# ES搜索Pipeline配置
components:
  # 🆕 添加查询重写组件
  query_rewriter:
    type: "query"
    name: "expansion"
    config:
      expansion_type: "rewrite"  # 查询重写模式
      temperature: 0.3
      max_retries: 3
      debug: true
  
  # 🆕 添加HyDE组件
  hyde_expander:
    type: "query"
    name: "expansion"
    config:
      expansion_type: "hyde"  # HyDE模式
      temperature: 0.7
      max_retries: 3
      debug: true
  
  # 🆕 添加多查询扩展组件（可选）
  multi_query_expander:
    type: "query"
    name: "expansion"
    config:
      expansion_type: "multi_query"  # 多查询扩展模式
      num_queries: 3  # 生成3个相关查询
      temperature: 0.5
      max_retries: 3
      debug: true

  es_retriever:
    type: "retriever"
    name: "elasticsearch"
    config:
      index_name: "vector_performance_docs"
      host: "localhost"
      port: 9200
      username: "elastic"
      password: "sPxLec=NGSFmUT_7+74R"
      use_ssl: true
      verify_certs: false
      search_type: "hybrid"
      similarity_threshold: 0.75
      
      # Small2Big检索配置
      enable_small2big: true
      small2big_config:
        small_chunk_size: 128
        medium_chunk_size: 512
        big_chunk_size: 1536
        expansion_strategy: "parent_expansion"
        small_chunk_top_k: 20
        final_top_k: 10
        similarity_threshold_small: 0.6
        score_fusion_method: "max"
        enable_score_normalization: true
        diversity_threshold: 0.8
        max_small_chunks_per_big: 5
        
        # 🆕 新增：差异化检索策略配置
        enable_differential_retrieval: true
        vector_chunk_level: 2    # 向量检索使用small chunk (level 2)
        text_chunk_level: 0      # BM25检索使用big chunk (level 0)
      
      # RRF融合配置
      fusion_method: "rrf"
      rrf_k: 60
      text_weight: 1.0
      vector_weight: 1.2
      
      # 🔧 修改搜索字段配置，移除空的 content_jieba 字段
      search_fields: {
        "content": 2.0,
        # "content_jieba": 2.5,  # 注释掉空字段
        "metadata.file_path": 1.2,
        "metadata.title": 1.5   # 如果有title字段也加上
      }
      
      # 🆕 添加分析器配置
      analyzer_config:
        search_analyzer: "ik_search_analyzer"  # 搜索时使用ik_smart
        index_analyzer: "ik_analyzer"          # 索引时使用ik_max_word
      
      # 🆕 添加高亮配置
      highlight_config:
        require_field_match: false  # 允许跨字段高亮
        fragment_size: 150
        number_of_fragments: 3
        pre_tags: ["<mark>"]
        post_tags: ["</mark>"]
        # 为不同字段设置不同的高亮参数
        fields:
          content:
            fragment_size: 200
            number_of_fragments: 2
          "metadata.file_path":
            fragment_size: 100
            number_of_fragments: 1
      
      embedding:
        type: "openai"
        model: "models/bge-m3"
        field_name: "content_vector"
        api_key: "123456"
        api_base: "http://workspace.featurize.cn:38819/v1"
        batch_size: 10
        timeout: 30
      debug: true
  
  openai_reranker:
    type: "reranker"
    name: "openai"
    config:
      api_key: "123456"
      base_url: "http://workspace.featurize.cn:62294/v1"
      model: "models/bge-reranker-v2-m3"
      top_k: 10
      debug: true
  
  openai_generator:
    type: "generator"
    name: "llm"

# 🆕 更新流程定义，添加查询处理步骤
flow:
  # 方案1：使用查询重写
  query_rewriter: ["es_retriever"]
  
  # 方案2：使用HyDE（注释掉方案1，启用方案2）
  # hyde_expander: ["es_retriever"]
  
  # 方案3：使用多查询扩展（注释掉方案1和2，启用方案3）
  # multi_query_expander: ["es_retriever"]
  
  es_retriever: ["openai_reranker"]
  openai_reranker: ["openai_generator"]
  openai_generator: []

# 🆕 更新入口点
entry_points:
  # 根据选择的方案更新入口点
  search: "query_rewriter"  # 方案1：查询重写
  # search: "hyde_expander"     # 方案2：HyDE
  # search: "multi_query_expander"  # 方案3：多查询扩展
