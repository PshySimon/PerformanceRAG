2025-08-01 00:06:37,213 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:06:37,213 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:06:37,214 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:06:37,214 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:06:37,214 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:06:37,214 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:06:37,214 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:06:37,214 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:06:37,214 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:06:37,214 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:06:37,214 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:06:37,214 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:06:37,214 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:06:37,214 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:06:37,235 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:06:37,291 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:06:37,292 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.056s]
2025-08-01 00:06:37,292 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:06:37,398 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:06:37,398 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:06:37,398 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:06:37,398 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:06:37,398 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:06:37,398 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:06:37,398 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:06:37,398 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:06:37,398 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:06:37,398 __main__ INFO: Pipeline初始化完成
2025-08-01 00:06:46,631 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:06:46,631 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:06:46,631 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:06:46,632 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:06:46,632 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:06:46,632 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:06:46,633 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:06:46,633 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:06:46,633 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:06:46,633 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:06:46,633 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:06:46,633 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:06:46,634 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:06:46,634 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:06:46,634 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:06:46,658 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,658 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,658 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,659 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.025s]
2025-08-01 00:06:46,659 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.025s]
2025-08-01 00:06:46,659 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.025s]
2025-08-01 00:06:46,666 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,666 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,666 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,667 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.007s]
2025-08-01 00:06:46,667 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.007s]
2025-08-01 00:06:46,667 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.007s]
2025-08-01 00:06:46,676 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,676 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,676 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:46,677 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:06:46,677 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:06:46,677 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:06:46,677 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:06:46,677 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:06:46,677 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:06:46,677 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:06:46,779 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7cc4836f-596d-4508-819c-11e38ad05225', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31cae2830>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:06:46,779 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7cc4836f-596d-4508-819c-11e38ad05225', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31cae2830>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:06:46,779 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7cc4836f-596d-4508-819c-11e38ad05225', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31cae2830>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:06:46,794 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:06:46,794 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:06:46,794 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e364d30>
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e364d30>
2025-08-01 00:06:46,795 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e364d30>
2025-08-01 00:06:46,795 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,795 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,795 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,796 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:06:46,949 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:06:46 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:06:46,949 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:06:46 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:06:46,949 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:06:46 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:06:46,950 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:06:46,950 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:06:46,950 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:06:46,950 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:06:46,951 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:06:46 GMT', 'server': 'uvicorn'})
2025-08-01 00:06:46,951 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:06:46 GMT', 'server': 'uvicorn'})
2025-08-01 00:06:46,951 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:06:46 GMT', 'server': 'uvicorn'})
2025-08-01 00:06:46,951 openai._base_client DEBUG: request_id: None
2025-08-01 00:06:46,951 openai._base_client DEBUG: request_id: None
2025-08-01 00:06:46,951 openai._base_client DEBUG: request_id: None
2025-08-01 00:06:46,952 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:06:46,952 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:06:46,952 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:06:46,952 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:06:46,952 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:06:46,952 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:06:46,953 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:06:47,133 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,133 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,133 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,134 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.178s]
2025-08-01 00:06:47,134 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.178s]
2025-08-01 00:06:47,134 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.178s]
2025-08-01 00:06:47,187 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,187 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,187 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,187 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.030s]
2025-08-01 00:06:47,187 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.030s]
2025-08-01 00:06:47,187 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.030s]
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:06:47,202 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:06:47,203 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,204 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:06:47,205 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,206 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,207 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:06:47,208 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:06:47,209 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:06:47,210 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:06:47,211 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:06:47,212 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:06:47,213 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:06:47,214 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:06:47,215 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:06:47,216 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:06:47,217 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:06:47,217 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:06:47,217 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:06:47,217 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:06:47,218 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:06:47,219 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:06:47,220 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:06:47,221 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:06:47,222 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,222 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:06:47,223 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,223 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:06:47,224 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:06:47,224 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:06:47,224 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,225 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,225 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,226 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:06:47,226 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:06:47,227 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:06:47,227 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:06:47,228 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,228 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:06:47,228 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,229 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:06:47,229 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:06:47,230 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,230 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,230 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:06:47,231 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:06:47,231 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:06:47,231 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:06:47,231 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:06:47,231 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:06:47,231 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:06:47,231 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:06:47,231 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:06:47,231 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491998_2effca61 本身就是big chunk，直接使用
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491998_2effca61 本身就是big chunk，直接使用
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491998_2effca61 本身就是big chunk，直接使用
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,231 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:06:47,231 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491009_606bfdf5 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491009_606bfdf5 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491009_606bfdf5 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,232 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,232 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490988_eb9ca35f 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490988_eb9ca35f 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490988_eb9ca35f 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491979_2c991d11 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491979_2c991d11 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491979_2c991d11 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,233 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:06:47,233 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491014_4763f6e6 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491014_4763f6e6 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491014_4763f6e6 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:06:47,234 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:06:47,234 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906492004_7180119e 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906492004_7180119e 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906492004_7180119e 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491973_ec175f44 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491973_ec175f44 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906491973_ec175f44 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774906490981_754b24fa
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490981_754b24fa 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490981_754b24fa 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490981_754b24fa 本身就是big chunk，直接使用
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,235 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,235 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774832930662_a4136c85
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774832930662_a4136c85 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774832930662_a4136c85 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774832930662_a4136c85 本身就是big chunk，直接使用
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,236 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774906490938_9d59e8c5
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,236 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:06:47,236 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490938_9d59e8c5 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490938_9d59e8c5 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774906490938_9d59e8c5 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,237 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📊 扩展统计: 创建了 10 个big chunk组
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📊 扩展统计: 创建了 10 个big chunk组
2025-08-01 00:06:47,237 rag.components.base DEBUG: 📊 扩展统计: 创建了 10 个big chunk组
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:06:47,237 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:06:47,238 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,238 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,238 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:06:47,243 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,243 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,243 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,243 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:06:47,243 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:06:47,243 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:06:47,243 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:06:47,243 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:06:47,243 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:06:47,243 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:06:47,243 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:06:47,243 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:06:47,243 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,243 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,243 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:06:47,245 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,245 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,245 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,245 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,245 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,245 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,245 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:06:47,245 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:06:47,245 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:06:47,245 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:06:47,245 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:06:47,245 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:06:47,245 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:06:47,245 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:06:47,245 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:06:47,247 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,247 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,247 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,247 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,247 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,247 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,247 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:06:47,247 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:06:47,247 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:06:47,247 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:06:47,247 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:06:47,247 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:06:47,247 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,247 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,247 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:06:47,248 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,248 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,248 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,248 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,248 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,248 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,248 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:06:47,248 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:06:47,248 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:06:47,248 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:06:47,248 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:06:47,248 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:06:47,248 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:06:47,248 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:06:47,248 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:06:47,250 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,250 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,250 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,250 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,250 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,250 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,250 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:06:47,250 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:06:47,250 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:06:47,250 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:06:47,250 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:06:47,250 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:06:47,250 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,250 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,250 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:06:47,251 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,251 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,251 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,251 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,251 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,251 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,251 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:06:47,251 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:06:47,251 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:06:47,252 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:06:47,252 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:06:47,252 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:06:47,252 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,252 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,252 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:06:47,253 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,253 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,253 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,253 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,253 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,253 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:06:47,253 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:06:47,253 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:06:47,253 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:06:47,253 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:06:47,253 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:06:47,253 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:06:47,253 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,253 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,253 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:06:47,255 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,255 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,255 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,255 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,255 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,255 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,255 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:06:47,255 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:06:47,255 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:06:47,255 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:06:47,255 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:06:47,255 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:06:47,255 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,255 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,255 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:06:47,258 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,258 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,258 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,258 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,258 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,258 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,258 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:06:47,258 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:06:47,258 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:06:47,258 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:06:47,258 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:06:47,258 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:06:47,258 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:06:47,258 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:06:47,258 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:06:47,261 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,261 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,261 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:06:47,261 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,261 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,261 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:06:47,261 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:06:47,261 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:06:47,261 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:06:47,261 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:06:47,261 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:06:47,261 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:06:47,261 rag.components.base DEBUG: 🎯 扩展完成: 0/10 个big chunk组成功获取内容
2025-08-01 00:06:47,261 rag.components.base DEBUG: 🎯 扩展完成: 0/10 个big chunk组成功获取内容
2025-08-01 00:06:47,261 rag.components.base DEBUG: 🎯 扩展完成: 0/10 个big chunk组成功获取内容
2025-08-01 00:06:47,261 rag.components.base INFO:    ✅ 扩展完成，获得 10 个Big Chunk
2025-08-01 00:06:47,261 rag.components.base INFO:    ✅ 扩展完成，获得 10 个Big Chunk
2025-08-01 00:06:47,261 rag.components.base INFO:    ✅ 扩展完成，获得 10 个Big Chunk
2025-08-01 00:06:47,261 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:06:47,261 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:06:47,261 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:06:47,261 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:06:47,261 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:06:47,261 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #2 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #2 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #2 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #3 ID: doc_1753774907723504_da84c278, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #3 ID: doc_1753774907723504_da84c278, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #3 ID: doc_1753774907723504_da84c278, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #4 ID: doc_1753771717452109_5bd66d71, 分数: 0.0156, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #4 ID: doc_1753771717452109_5bd66d71, 分数: 0.0156, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #4 ID: doc_1753771717452109_5bd66d71, 分数: 0.0156, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #5 ID: doc_1753774929569506_5decf883, 分数: 0.0154, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #5 ID: doc_1753774929569506_5decf883, 分数: 0.0154, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG:    #5 ID: doc_1753774929569506_5decf883, 分数: 0.0154, 来源Small Chunk数: 1
2025-08-01 00:06:47,261 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:06:47,261 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:06:47,261 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:06:47,262 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:06:47,262 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:06:47,262 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:06:47,263 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:06:47,263 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:06:47,263 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:06:47,910 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 39855
2025-08-01 00:06:47,910 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 39855
2025-08-01 00:06:47,910 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 39855
2025-08-01 00:06:47,999 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:06:47,999 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:06:47,999 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:06:48,000 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:06:48,000 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:06:48,000 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:06:48,000 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档7 - 文档7:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档8 - 文档8:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档9 - 文档9:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档10 - 文档10:
默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:06:48,000 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档7 - 文档7:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档8 - 文档8:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档9 - 文档9:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档10 - 文档10:
默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:06:48,000 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档7 - 文档7:
| 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。

文档8 - 文档8:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档9 - 文档9:
默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOCFG | 未配置SPR时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号2。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOCFG | 未配置SPR时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号3。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOCFG | 未配置SPR时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号4。

文档10 - 文档10:
默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOPKG | SPR中未签约套餐时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号3。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号4。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOPKG | SPR中未签约套餐时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号5。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOSPR | SPR宕机时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号1。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOSPR | SPR宕机时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号2。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID3NOSPR | SPR宕机时默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号3。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOSPR | SPR宕机时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号4。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID5NOSPR | SPR宕机时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕机时，系统默认为用户指定的套餐编号5。 当SPR宕机时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
PKGID1NOCFG | 未配置SPR时默认套餐1 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号1。 当未配置SPR时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时表示套餐ID不存在。
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:06:48,007 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:06:48,007 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:06:48,007 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:06:50,301 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:06:50,301 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:06:50,301 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:06:50,305 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:06:50,305 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:06:50,305 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:12:52,640 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:12:52,640 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:12:52,641 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:12:52,641 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:12:52,641 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:12:52,641 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:12:52,641 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:12:52,641 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:12:52,641 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:12:52,641 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:12:52,670 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:12:52,816 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:12:52,816 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.147s]
2025-08-01 00:12:52,817 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:12:52,907 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:12:52,907 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:12:52,907 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:12:52,907 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:12:52,907 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:12:52,907 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:12:52,907 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:12:52,907 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:12:52,907 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:12:52,908 __main__ INFO: Pipeline初始化完成
2025-08-01 00:14:04,102 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:14:04,102 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:14:04,104 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:14:04,104 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:14:04,104 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 3
2025-08-01 00:14:04,104 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 3
2025-08-01 00:14:04,105 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:14:04,105 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:14:04,106 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:14:04,106 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:14:04,120 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,120 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,121 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.014s]
2025-08-01 00:14:04,121 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.014s]
2025-08-01 00:14:04,136 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,136 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,136 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.015s]
2025-08-01 00:14:04,136 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.015s]
2025-08-01 00:14:04,156 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,156 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,156 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.018s]
2025-08-01 00:14:04,156 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.018s]
2025-08-01 00:14:04,156 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:14:04,156 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:14:04,156 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:14:04,156 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:14:04,156 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:14:04,156 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:14:04,261 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5fea4f18-0317-47c6-a8b8-a48986ebc737', 'post_parser': <function Embeddings.create.<locals>.parser at 0x1047245e0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:14:04,261 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5fea4f18-0317-47c6-a8b8-a48986ebc737', 'post_parser': <function Embeddings.create.<locals>.parser at 0x1047245e0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:14:04,276 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:14:04,276 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:14:04,276 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:14:04,276 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:14:04,276 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f065750>
2025-08-01 00:14:04,276 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f065750>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:14:04,277 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:14:04,415 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:14:03 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:14:04,415 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:14:03 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:14:04,416 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:14:04,416 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:14:04,416 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:14:04,417 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:14:04,417 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:14:04,417 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:14:03 GMT', 'server': 'uvicorn'})
2025-08-01 00:14:04,417 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:14:03 GMT', 'server': 'uvicorn'})
2025-08-01 00:14:04,417 openai._base_client DEBUG: request_id: None
2025-08-01 00:14:04,417 openai._base_client DEBUG: request_id: None
2025-08-01 00:14:04,418 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:14:04,418 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:14:04,418 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:14:04,418 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:14:04,418 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:14:04,418 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:14:04,418 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:14:04,418 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:14:04,419 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:14:04,419 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:14:04,579 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,579 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,580 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.160s]
2025-08-01 00:14:04,580 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.160s]
2025-08-01 00:14:04,647 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,647 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,648 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.047s]
2025-08-01 00:14:04,648 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.047s]
2025-08-01 00:14:04,664 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:14:04,664 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:14:04,664 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:14:04,664 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:14:04,665 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:14:04,665 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:14:04,665 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:14:04,665 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:14:04,665 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:14:04,666 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,667 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:14:04,668 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:14:04,669 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:14:04,670 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:14:04,671 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:14:04,672 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:14:04,673 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:14:04,674 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,675 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:14:04,676 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:14:04,677 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:14:04,677 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:14:04,677 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:14:04,677 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:14:04,678 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:14:04,679 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:14:04,680 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,680 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:14:04,680 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,680 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:14:04,680 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:14:04,681 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,681 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:14:04,682 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,682 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:14:04,683 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:14:04,683 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:14:04,683 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:14:04,684 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:14:04,684 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:14:04,684 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:14:04,685 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,685 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:14:04,685 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,685 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:14:04,686 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:14:04,686 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:14:04,686 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,687 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,687 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,687 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,688 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,688 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,688 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:14:04,689 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:14:04,689 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:14:04,689 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:14:04,689 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,689 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:14:04,689 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:14:04,690 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:14:04,690 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:14:04,690 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:14:04,690 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:14:04,690 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:14:04,690 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,690 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:14:04,690 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:14:04,690 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:14:04,690 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:14:04,690 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:14:04,691 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:14:04,691 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,691 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:14:04,691 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:14:04,691 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:14:04,692 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:14:04,692 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:14:04,692 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:14:04,692 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,692 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:14:04,693 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:14:04,693 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774906490981_754b24fa
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774906490981_754b24fa
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:14:04,693 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,693 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:14:04,694 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:14:04,694 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:14:04,694 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:14:04,694 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,694 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:14:04,695 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:14:04,695 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:14:04,695 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:14:04,695 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:14:04,695 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:14:04,695 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:14:04,695 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:14:04,695 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:14:04,695 rag.components.base DEBUG: 📊 扩展统计: 创建了 10 个big chunk组
2025-08-01 00:14:04,695 rag.components.base DEBUG: 📊 扩展统计: 创建了 10 个big chunk组
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:14:04,695 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,695 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:14:04,700 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,700 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,700 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:14:04,700 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:14:04,700 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:14:04,700 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:14:04,700 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:14:04,700 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:14:04,700 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,700 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:14:04,702 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,702 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,702 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,702 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,702 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:14:04,702 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:14:04,702 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:14:04,702 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:14:04,702 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:14:04,702 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:14:04,703 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,703 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,703 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,703 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,703 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:14:04,703 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:14:04,704 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:14:04,704 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:14:04,704 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,704 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:14:04,705 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,705 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,705 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,705 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,705 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:14:04,705 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:14:04,705 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:14:04,705 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:14:04,706 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:14:04,706 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:14:04,707 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,707 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,707 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,707 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:14:04,707 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:14:04,707 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:14:04,707 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:14:04,707 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:14:04,707 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,707 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:14:04,709 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,709 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,709 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,709 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,709 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:14:04,709 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:14:04,709 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:14:04,709 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:14:04,709 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,709 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:14:04,711 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,711 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,711 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,711 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,711 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:14:04,711 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:14:04,711 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:14:04,711 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:14:04,711 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,711 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:14:04,713 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,713 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,713 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,713 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,713 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:14:04,713 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:14:04,713 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:14:04,713 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:14:04,713 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,713 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:14:04,715 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,715 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,715 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,715 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,715 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:14:04,715 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:14:04,715 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:14:04,715 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:14:04,715 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:14:04,715 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:14:04,717 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,717 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:14:04,717 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,717 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:14:04,717 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:14:04,717 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:14:04,717 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:14:04,717 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:14:04,717 rag.components.base DEBUG: 🎯 扩展完成: 0/10 个big chunk组成功获取内容
2025-08-01 00:14:04,717 rag.components.base DEBUG: 🎯 扩展完成: 0/10 个big chunk组成功获取内容
2025-08-01 00:14:04,717 rag.components.base INFO:    ✅ 扩展完成，获得 10 个Big Chunk
2025-08-01 00:14:04,717 rag.components.base INFO:    ✅ 扩展完成，获得 10 个Big Chunk
2025-08-01 00:14:04,717 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:14:04,717 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:14:04,718 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:14:04,718 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #2 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #2 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #3 ID: doc_1753774907723504_da84c278, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG:    #3 ID: doc_1753774907723504_da84c278, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:14:04,718 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:14:04,718 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:14:04,718 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:14:04,718 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:14:04,720 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:14:04,720 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:14:05,003 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 11679
2025-08-01 00:14:05,003 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 11679
2025-08-01 00:14:05,003 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:14:05,003 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:14:05,003 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:14:05,003 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:14:05,003 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:14:05,003 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:14:05,005 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:14:05,005 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:14:06,066 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:14:06,066 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:14:06,067 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:14:06,067 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:26:51,356 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:26:51,356 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:26:51,356 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:26:51,356 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:26:51,357 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:26:51,357 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:26:51,357 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:26:51,357 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:26:51,357 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:26:51,357 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:26:51,357 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:26:51,357 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:26:51,380 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:26:51,417 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:26:51,418 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.038s]
2025-08-01 00:26:51,418 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:26:51,518 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:26:51,518 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:26:51,518 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:26:51,519 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:26:51,519 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:26:51,519 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:26:51,519 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:26:51,519 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:26:51,519 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:26:51,519 __main__ INFO: Pipeline初始化完成
2025-08-01 00:26:54,666 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:26:54,666 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:26:54,667 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:26:54,667 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:26:54,668 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 3
2025-08-01 00:26:54,668 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 3
2025-08-01 00:26:54,668 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:26:54,668 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:26:54,669 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:26:54,669 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:26:54,688 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,688 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,689 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.020s]
2025-08-01 00:26:54,689 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.020s]
2025-08-01 00:26:54,697 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,697 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,698 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:26:54,698 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:26:54,708 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,708 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:54,708 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:26:54,708 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:26:54,708 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:26:54,708 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:26:54,708 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:26:54,708 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:26:54,709 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:26:54,709 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:26:54,825 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-026cbde8-1347-488c-8383-dce50b472f54', 'post_parser': <function Embeddings.create.<locals>.parser at 0x315475ab0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:26:54,825 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-026cbde8-1347-488c-8383-dce50b472f54', 'post_parser': <function Embeddings.create.<locals>.parser at 0x315475ab0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:26:54,839 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:26:54,839 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:26:54,840 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:26:54,840 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:26:54,840 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16d05eda0>
2025-08-01 00:26:54,840 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16d05eda0>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:26:54,841 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:26:54,999 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:26:54 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:26:54,999 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:26:54 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:26:55,000 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:26:55,000 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:26:55,000 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:26:55,000 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:26:55,000 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:26:55,000 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:26:55,001 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:26:55,001 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:26:55,001 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:26:55,001 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:26:55,001 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:26:54 GMT', 'server': 'uvicorn'})
2025-08-01 00:26:55,001 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:26:54 GMT', 'server': 'uvicorn'})
2025-08-01 00:26:55,001 openai._base_client DEBUG: request_id: None
2025-08-01 00:26:55,001 openai._base_client DEBUG: request_id: None
2025-08-01 00:26:55,002 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:26:55,002 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:26:55,002 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:26:55,002 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:26:55,003 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:26:55,003 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:26:55,003 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:26:55,003 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:26:55,004 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:26:55,004 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:26:55,197 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,197 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,197 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.191s]
2025-08-01 00:26:55,197 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.191s]
2025-08-01 00:26:55,244 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,244 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,244 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.033s]
2025-08-01 00:26:55,244 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.033s]
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:26:55,256 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:26:55,257 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:26:55,257 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:26:55,257 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:26:55,257 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:26:55,257 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,258 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:26:55,259 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:26:55,260 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:26:55,261 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:26:55,262 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:26:55,263 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:26:55,264 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:26:55,265 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:26:55,266 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:26:55,267 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:26:55,267 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:26:55,267 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:26:55,268 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:26:55,269 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:26:55,270 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:26:55,270 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,270 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,271 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:26:55,271 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:26:55,271 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,271 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,271 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:26:55,271 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:26:55,271 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,271 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:26:55,272 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:26:55,273 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:26:55,274 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,274 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:26:55,275 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:26:55,275 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:26:55,275 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:26:55,275 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:26:55,275 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:26:55,275 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:26:55,275 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:26:55,275 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:26:55,275 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:26:55,276 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,276 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:26:55,276 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:26:55,277 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:26:55,277 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:26:55,277 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,277 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:26:55,277 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,277 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,278 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,278 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:26:55,278 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,279 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,279 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,279 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,280 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:26:55,280 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:26:55,280 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,280 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,280 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,280 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:26:55,281 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:26:55,281 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,281 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:26:55,282 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:26:55,282 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:26:55,282 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:26:55,282 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:26:55,282 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,282 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,282 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:26:55,282 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:26:55,282 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:26:55,282 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:26:55,282 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:26:55,282 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:26:55,282 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:26:55,282 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:26:55,282 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,283 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:26:55,283 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,283 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,283 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,283 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:26:55,283 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:26:55,283 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,284 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:26:55,284 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:26:55,284 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:26:55,284 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774907723504_da84c278
2025-08-01 00:26:55,284 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:26:55,284 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,284 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:26:55,284 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:26:55,284 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,284 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,284 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:26:55,284 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,284 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,285 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:26:55,285 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,285 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,285 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,285 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:26:55,285 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,285 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:26:55,285 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,285 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,286 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,286 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:26:55,286 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,286 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:26:55,286 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753774906491973_ec175f44
2025-08-01 00:26:55,286 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753774906491973_ec175f44
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:26:55,286 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,286 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,287 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:26:55,287 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:26:55,287 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,287 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,287 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:26:55,287 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,287 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:26:55,287 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774906490938_9d59e8c5
2025-08-01 00:26:55,287 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774906490938_9d59e8c5
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,288 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,288 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,288 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:26:55,288 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,288 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:26:55,288 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:26:55,288 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:26:55,288 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:26:55,288 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:26:55,288 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:26:55,289 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:26:55,289 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:26:55,295 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,295 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,296 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.006s]
2025-08-01 00:26:55,296 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.006s]
2025-08-01 00:26:55,296 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:26:55,296 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:26:55,296 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:26:55,296 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:26:55,296 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,296 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:26:55,298 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,298 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,298 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,298 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,298 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:26:55,298 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:26:55,298 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:26:55,298 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:26:55,298 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,298 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:26:55,299 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,299 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,300 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,300 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,300 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:26:55,300 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:26:55,300 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:26:55,300 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:26:55,300 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,300 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:26:55,301 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,301 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,301 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,301 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,302 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:26:55,302 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:26:55,302 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:26:55,302 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:26:55,302 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:26:55,302 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:26:55,303 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,303 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,304 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,304 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,304 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:26:55,304 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:26:55,304 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:26:55,304 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:26:55,304 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,304 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:26:55,305 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,305 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,305 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,305 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,305 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:26:55,305 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:26:55,305 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:26:55,305 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:26:55,305 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,305 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:26:55,306 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,306 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,306 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,306 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,306 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:26:55,306 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:26:55,306 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:26:55,306 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:26:55,306 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,306 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:26:55,308 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,308 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,308 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,308 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,309 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:26:55,309 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:26:55,309 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:26:55,309 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:26:55,309 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:26:55,309 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:26:55,310 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,310 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,310 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,310 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,310 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:26:55,310 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:26:55,310 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:26:55,310 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:26:55,310 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,310 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:26:55,311 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,311 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,311 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,311 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,311 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:26:55,311 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:26:55,311 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:26:55,311 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:26:55,311 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:26:55,311 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:26:55,313 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,313 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,313 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,313 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,313 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:26:55,313 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:26:55,313 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:26:55,313 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:26:55,313 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,313 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:26:55,314 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,314 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,314 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,314 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,314 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:26:55,314 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:26:55,314 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:26:55,314 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:26:55,314 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,314 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:26:55,316 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,316 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,316 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,316 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,317 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:26:55,317 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:26:55,317 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:26:55,317 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:26:55,317 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,317 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:26:55,318 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,318 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,319 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,319 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:26:55,319 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:26:55,319 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:26:55,319 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:26:55,319 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:26:55,319 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:26:55,319 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:26:55,326 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,326 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,326 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.007s]
2025-08-01 00:26:55,326 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.007s]
2025-08-01 00:26:55,326 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:26:55,326 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:26:55,326 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:26:55,326 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:26:55,326 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:26:55,326 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:26:55,327 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,327 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,327 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,327 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,327 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:26:55,327 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:26:55,327 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:26:55,327 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:26:55,327 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,327 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:26:55,332 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,332 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,332 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:26:55,332 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:26:55,332 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:26:55,332 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:26:55,332 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:26:55,332 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:26:55,332 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,332 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:26:55,339 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,339 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,339 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.006s]
2025-08-01 00:26:55,339 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.006s]
2025-08-01 00:26:55,339 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:26:55,339 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:26:55,339 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:26:55,339 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:26:55,339 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:26:55,339 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:26:55,341 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,341 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:26:55,341 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,341 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:26:55,341 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:26:55,341 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:26:55,341 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:26:55,341 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:26:55,341 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:26:55,341 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:26:55,341 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:26:55,341 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:26:55,341 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:26:55,341 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:26:55,341 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:26:55,341 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:26:55,341 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:26:55,341 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:26:55,341 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:26:55,341 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:26:55,343 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:26:55,343 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:26:55,506 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 4150
2025-08-01 00:26:55,506 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 4150
2025-08-01 00:26:55,508 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:26:55,508 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:26:55,508 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:26:55,508 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:26:55,508 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档2 - 文档2:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档3 - 文档3:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:26:55,508 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档2 - 文档2:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档3 - 文档3:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:26:55,511 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:26:55,511 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:26:58,485 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:26:58,485 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:26:58,488 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:26:58,488 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:30:16,988 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-217' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,988 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-217' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,988 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-217' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-218' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-218' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-218' coro=<HTTP1ServerConnection._server_request_loop() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/http1connection.py:819> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, IOLoop.add_future.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/ioloop.py:707]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-223' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-223' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-223' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-224' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-224' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:16,990 asyncio ERROR: Task was destroyed but it is pending!
task: <Task pending name='Task-224' coro=<RequestHandler._execute() running at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:1796> cb=[_wrap_awaitable.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/gen.py:854, _HandlerDelegate.execute.<locals>.<lambda>() at /Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/tornado/web.py:2498]>
2025-08-01 00:30:32,000 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:30:32,001 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:30:32,002 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:30:32,002 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:30:32,002 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:30:32,002 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:30:32,002 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:30:32,002 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:30:32,002 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:30:32,002 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:30:32,002 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:30:32,002 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:30:32,002 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:30:32,024 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:30:32,074 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:30:32,075 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.051s]
2025-08-01 00:30:32,075 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:30:32,174 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:30:32,175 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:30:32,175 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:30:32,175 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:30:32,175 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:30:32,175 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:30:32,176 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:30:32,176 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:30:32,176 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:30:32,176 __main__ INFO: Pipeline初始化完成
2025-08-01 00:30:42,284 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:30:42,284 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:30:42,286 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:30:42,286 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:30:42,287 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:30:42,287 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:30:42,287 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:30:42,287 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:30:42,287 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:30:42,287 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:30:42,306 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,306 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,306 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.019s]
2025-08-01 00:30:42,306 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.019s]
2025-08-01 00:30:42,324 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,324 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,324 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.017s]
2025-08-01 00:30:42,324 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.017s]
2025-08-01 00:30:42,334 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,334 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,335 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:30:42,335 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:30:42,335 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:30:42,335 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:30:42,335 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:30:42,335 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:30:42,335 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:30:42,335 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:30:42,437 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f1a627ee-1e08-46e8-9573-c7303d42ecaa', 'post_parser': <function Embeddings.create.<locals>.parser at 0x1709e9990>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:30:42,437 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f1a627ee-1e08-46e8-9573-c7303d42ecaa', 'post_parser': <function Embeddings.create.<locals>.parser at 0x1709e9990>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:30:42,452 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:30:42,452 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:30:42,452 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:30:42,452 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:30:42,453 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17106e4d0>
2025-08-01 00:30:42,453 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17106e4d0>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:30:42,453 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:30:42,587 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:30:41 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:30:42,587 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:30:41 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:30:42,588 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:30:42,588 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:30:42,588 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:30:42,589 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:30:42,589 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:30:42,589 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:30:41 GMT', 'server': 'uvicorn'})
2025-08-01 00:30:42,589 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:30:41 GMT', 'server': 'uvicorn'})
2025-08-01 00:30:42,589 openai._base_client DEBUG: request_id: None
2025-08-01 00:30:42,589 openai._base_client DEBUG: request_id: None
2025-08-01 00:30:42,589 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:30:42,589 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:30:42,590 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:30:42,590 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:30:42,590 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:30:42,743 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,743 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,744 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.153s]
2025-08-01 00:30:42,744 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.153s]
2025-08-01 00:30:42,786 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,786 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,786 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.030s]
2025-08-01 00:30:42,786 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.030s]
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:30:42,797 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:30:42,797 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:30:42,797 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:30:42,797 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:30:42,798 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:30:42,798 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:30:42,798 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:30:42,798 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,799 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:30:42,800 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:30:42,801 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:30:42,802 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:30:42,803 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:30:42,804 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:30:42,805 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:30:42,806 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:30:42,806 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:30:42,806 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:30:42,807 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:30:42,808 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:30:42,809 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:30:42,810 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 37, 分数: 0.8270
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 38, 分数: 0.8268
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576246_05bad0a2, 排名: 39, 分数: 0.8266
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:30:42,811 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772597107557_277900b9, 排名: 40, 分数: 0.8263
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:30:42,812 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,812 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:30:42,812 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,812 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:30:42,812 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:30:42,813 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,813 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:30:42,814 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,814 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,815 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:30:42,815 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:30:42,815 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,815 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,815 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:30:42,815 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,815 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,816 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:30:42,816 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:30:42,816 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,817 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,817 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:30:42,817 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,818 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,818 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:30:42,819 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:30:42,819 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:30:42,820 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,820 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:30:42,820 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:30:42,821 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:30:42,821 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:30:42,821 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:30:42,821 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:30:42,821 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:30:42,821 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:30:42,821 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:30:42,821 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:30:42,821 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:30:42,821 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:30:42,821 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:30:42,821 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:30:42,821 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,821 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,821 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,821 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,821 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,821 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,821 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:30:42,821 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:30:42,822 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,822 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:30:42,822 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,822 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,822 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:30:42,822 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:30:42,822 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:30:42,823 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,823 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,823 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,823 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:30:42,823 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,823 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,823 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:30:42,823 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:30:42,823 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,824 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753774906491973_ec175f44
2025-08-01 00:30:42,824 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753774906491973_ec175f44
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:30:42,824 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:30:42,824 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,825 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:30:42,825 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:30:42,825 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,825 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,825 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,825 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,825 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:30:42,825 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:30:42,825 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:30:42,826 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,826 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,826 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:30:42,826 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:30:42,826 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:30:42,826 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:30:42,826 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:30:42,826 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:30:42,826 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:30:42,826 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:30:42,827 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:30:42,827 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:30:42,827 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:30:42,827 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,827 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,827 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,827 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,827 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:30:42,827 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:30:42,827 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:30:42,827 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:30:42,827 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:30:42,828 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:30:42,828 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:30:42,831 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,831 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,832 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:30:42,832 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:30:42,832 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:30:42,832 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:30:42,832 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:30:42,832 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:30:42,832 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,832 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:30:42,836 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,836 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,837 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:30:42,837 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:30:42,837 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:30:42,837 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:30:42,837 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:30:42,837 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:30:42,837 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,837 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:30:42,839 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,839 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,839 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,839 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,839 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:30:42,839 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:30:42,839 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:30:42,839 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:30:42,839 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,839 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:30:42,841 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,841 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,841 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,841 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,841 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:30:42,841 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:30:42,841 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:30:42,841 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:30:42,841 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,841 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:30:42,843 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,843 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,843 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,843 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,843 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:30:42,843 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:30:42,843 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:30:42,843 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:30:42,843 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:30:42,843 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:30:42,845 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,845 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,845 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,845 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,845 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:30:42,845 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:30:42,845 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:30:42,845 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:30:42,845 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,845 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:30:42,848 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,848 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,848 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:30:42,848 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:30:42,848 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:30:42,848 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:30:42,848 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:30:42,848 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:30:42,848 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,848 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:30:42,850 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,850 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,850 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,850 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,850 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:30:42,850 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:30:42,850 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:30:42,850 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:30:42,850 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,850 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:30:42,852 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,852 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,852 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,852 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,852 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:30:42,852 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:30:42,852 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:30:42,852 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:30:42,852 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:30:42,852 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:30:42,865 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,865 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,865 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.013s]
2025-08-01 00:30:42,865 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.013s]
2025-08-01 00:30:42,865 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:30:42,865 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:30:42,865 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:30:42,865 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:30:42,865 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,865 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:30:42,867 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,867 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,867 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,867 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,867 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:30:42,867 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:30:42,867 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:30:42,867 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:30:42,867 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:30:42,867 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:30:42,868 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,868 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,868 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,868 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,869 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:30:42,869 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:30:42,869 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:30:42,869 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:30:42,869 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,869 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:30:42,870 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,870 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,870 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,870 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,870 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:30:42,870 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:30:42,870 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:30:42,870 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:30:42,870 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,870 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:30:42,872 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,872 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,872 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,872 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,872 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:30:42,872 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:30:42,872 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:30:42,872 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:30:42,872 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:30:42,872 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:30:42,874 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,874 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,874 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,874 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:30:42,874 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:30:42,874 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:30:42,874 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:30:42,874 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:30:42,874 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:30:42,874 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:30:42,875 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,875 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,875 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,875 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,875 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:30:42,875 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:30:42,875 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:30:42,875 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:30:42,875 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,875 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:30:42,876 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,876 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,876 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,876 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,876 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:30:42,876 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:30:42,876 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:30:42,876 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:30:42,877 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:30:42,877 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:30:42,878 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,878 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,878 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,878 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,878 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:30:42,878 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:30:42,878 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:30:42,878 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:30:42,878 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,878 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:30:42,879 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,879 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:30:42,879 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,879 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:30:42,880 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:30:42,880 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:30:42,880 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:30:42,880 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:30:42,880 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:30:42,880 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:30:42,880 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:30:42,880 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:30:42,880 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:30:42,880 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:30:42,880 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:30:42,880 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #4 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #4 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:30:42,880 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:30:42,880 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:30:42,880 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:30:42,880 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:30:42,882 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:30:42,882 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:30:43,358 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 22382
2025-08-01 00:30:43,358 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 22382
2025-08-01 00:30:43,403 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:30:43,403 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:30:43,403 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:30:43,403 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:30:43,403 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档7 - 文档7:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档8 - 文档8:
VPN
基本信息
* 产品大类：云基础计算
* 产品小类：网络
* 产品名称：虚拟专用网络
* 产品ID：zte-vpn-connection
* 产品标题：虚拟专用网络
* 产品描述：虚拟专用网络（Virtual Private Network）用于搭建用户本地数据中心与云管平台VPC之间便捷、灵活，即开即用的IPsec加密连接通道，实现灵活一体，可伸缩的混合云计算环境。
* 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_list/connection_create
* 产品资源详情页面URL：-
* 产品控制台页面URL：/network-portal/networkResource/services/zte-vpn/connection_list
* 产品管理门户页面URL：-
资源实施接口信息
* 微服务名：network
* 版本号：-
* 资源申请接口URL：/api/v1.0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-order
* 资源管理接口URL：-
配额项
key| 名称| 单位
---|---|---
vpn-connection| 虚拟专用网络| 个

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:30:43,403 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档7 - 文档7:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档8 - 文档8:
VPN
基本信息
* 产品大类：云基础计算
* 产品小类：网络
* 产品名称：虚拟专用网络
* 产品ID：zte-vpn-connection
* 产品标题：虚拟专用网络
* 产品描述：虚拟专用网络（Virtual Private Network）用于搭建用户本地数据中心与云管平台VPC之间便捷、灵活，即开即用的IPsec加密连接通道，实现灵活一体，可伸缩的混合云计算环境。
* 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_list/connection_create
* 产品资源详情页面URL：-
* 产品控制台页面URL：/network-portal/networkResource/services/zte-vpn/connection_list
* 产品管理门户页面URL：-
资源实施接口信息
* 微服务名：network
* 版本号：-
* 资源申请接口URL：/api/v1.0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-order
* 资源管理接口URL：-
配额项
key| 名称| 单位
---|---|---
vpn-connection| 虚拟专用网络| 个

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:30:43,405 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:30:43,405 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:30:44,884 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:30:44,884 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:30:44,886 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:30:44,886 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:34:06,270 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:34:06,270 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:34:06,270 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:34:06,270 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:34:06,271 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:34:06,271 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:34:06,271 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:34:06,271 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:34:06,271 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:34:06,271 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:34:06,271 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:34:06,271 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:34:06,300 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:34:06,434 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:34:06,434 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.135s]
2025-08-01 00:34:06,435 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:34:06,529 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:34:06,529 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:34:06,529 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:34:06,529 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:34:06,529 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:34:06,529 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:34:06,529 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:34:06,529 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:34:06,529 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:34:06,530 __main__ INFO: Pipeline初始化完成
2025-08-01 00:34:10,138 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:34:10,138 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: es_retriever
2025-08-01 00:34:10,139 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:34:10,139 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:34:10,139 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '使用的entry_point', 检索类型: hybrid, Top-K: 3
2025-08-01 00:34:10,139 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '使用的entry_point', 检索类型: hybrid, Top-K: 3
2025-08-01 00:34:10,140 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '使用的entry_point'
2025-08-01 00:34:10,140 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '使用的entry_point'
2025-08-01 00:34:10,140 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:34:10,140 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:34:10,157 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,157 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,157 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.017s]
2025-08-01 00:34:10,157 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.017s]
2025-08-01 00:34:10,166 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,166 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,166 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:34:10,166 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:34:10,176 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,176 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,176 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:34:10,176 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.009s]
2025-08-01 00:34:10,177 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:34:10,177 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:34:10,177 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '使用的entry_point...' (长度: 14)
2025-08-01 00:34:10,177 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '使用的entry_point...' (长度: 14)
2025-08-01 00:34:10,177 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:34:10,177 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:34:10,459 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7841fd4e-3f80-4cd8-9728-301fc8dc9b98', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17061af80>, 'json_data': {'input': '使用的entry_point', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:34:10,459 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7841fd4e-3f80-4cd8-9728-301fc8dc9b98', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17061af80>, 'json_data': {'input': '使用的entry_point', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:34:10,473 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:34:10,473 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:34:10,474 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:34:10,474 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:34:10,474 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x170bf5ba0>
2025-08-01 00:34:10,474 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x170bf5ba0>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:34:10,475 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:34:10,605 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5724'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:34:10 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:34:10,605 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5724'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:34:10 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:34:10,606 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:34:10,606 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:34:10,606 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:34:10,606 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5724', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:34:10 GMT', 'server': 'uvicorn'})
2025-08-01 00:34:10,606 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5724', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:34:10 GMT', 'server': 'uvicorn'})
2025-08-01 00:34:10,607 openai._base_client DEBUG: request_id: None
2025-08-01 00:34:10,607 openai._base_client DEBUG: request_id: None
2025-08-01 00:34:10,607 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:34:10,607 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:34:10,608 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:34:10,608 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '使用的entry_point', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '使用的entry_point', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '使用的entry_point', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '使用的entry_point', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '使用的entry_point', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '使用的entry_point', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [0.03156112879514694, 0.0012588349636644125, -0.04404497146606445, 0.012407837435603142, -0.014716492965817451, -0.012236826121807098, 0.0337652787566185, -0.019875342026352882, 0.020388375967741013, 0.00373137672431767, 0.013243894092738628, 0.0022385886404663324, 0.043892960995435715, -0.016046583652496338, 0.04431099072098732, -0.0371285043656826, 0.010403201915323734, -0.0017077402444556355, 0.03752753138542175, -0.010251191444694996, -0.0036149939987808466, 0.01439347118139267, -0.004177907016128302, 0.015258030034601688, -0.013832933269441128, -0.026392780244350433, 0.017775699496269226, -0.008256057277321815, 0.008436569012701511, -0.003510486800223589, 0.0033252243883907795, -0.013196390122175217, -0.021623458713293076, -0.03665347397327423, -0.037299517542123795, -0.04446300119161606, 0.01206581387668848, 0.004417798016220331, -0.06012005731463432, 0.03387928754091263, -0.0201413594186306, -0.01673062890768051, 0.006669450085610151, -0.03720451146364212, 0.006935467943549156, -0.03302422910928726, 0.021338440477848053, -0.03192215412855148, -0.028140898793935776, 0.018611755222082138, -0.014450475573539734, 0.031409118324518204, 0.002349033486098051, -0.04628712311387062, 0.03243518993258476, 0.040966764092445374, -0.06392031162977219, -0.01823173090815544, -0.02610776200890541, -0.007381998002529144, -0.01340540498495102, -0.01978033408522606, -0.04051073268055916, 0.02175646834075451, 0.0011157315457239747, 0.07342095673084259, 0.03292922303080559, 0.018364738672971725, -0.023637594655156136, -0.018839770928025246, -0.008009040728211403, 0.018545251339673996, -0.030972089618444443, 6.086348366807215e-05, -0.04944133758544922, 0.032682206481695175, 0.057079851627349854, -0.022839540615677834, -0.026829810813069344, -0.024929681792855263, 0.03439231961965561, -0.03739452362060547, 0.00901135802268982, 0.03247319161891937, 0.02255452238023281, 0.021509451791644096, -0.0037622537929564714, 0.014459975995123386, -0.0019511941354721785, -0.010156185366213322, -0.0339742936193943, -0.039826687425374985, 0.04605910927057266, 0.006441434845328331, -0.05035339668393135, -0.008294059894979, 0.0015794815262779593, 0.018488246947526932, 0.0266587994992733, -0.005291857291013002, 0.02302955463528633, 0.053849633783102036, -0.0028121897485107183, -0.01706315204501152, 0.04157480597496033, 0.0006116037839092314, 0.011486275121569633, 0.03790755942463875, -0.004130403511226177, 0.013243894092738628, 0.0029143216088414192, 0.052861567586660385, 0.03222617506980896, 0.008393816649913788, 0.02010335586965084, -0.04875728860497475, -0.01721516251564026, -0.035361386835575104, -0.02468266524374485, -0.003244468942284584, 0.042828891426324844, 0.006341678090393543, 0.04001669958233833, 0.0013182139955461025, 0.011476774699985981, 0.006493688095360994, 0.025974752381443977, 0.02354258857667446, -0.007182484492659569, 0.0004673127841670066, 0.021072421222925186, 0.04545106738805771, 0.01596107706427574, -0.025537723675370216, -0.048833295702934265, -0.004365544766187668, 0.009966172277927399, 0.007391498889774084, -0.003028329461812973, -0.04617311432957649, 0.030478056520223618, 0.007899782620370388, -0.05232953280210495, -0.05156948044896126, 0.015790065750479698, -0.04347493499517441, -0.01129626203328371, 0.02282053977251053, -0.010327196680009365, -0.0028881949838250875, -0.017709195613861084, 0.01230333000421524, 0.04636313021183014, -0.009638400748372078, 0.02065439336001873, -0.013661921955645084, -0.032131168991327286, -0.0001216527380165644, 0.03861060366034508, 0.0003262876416556537, -0.023371577262878418, -0.0005804297979921103, -0.04833926260471344, 0.03197915852069855, 0.029603997245430946, -0.032321181148290634, 0.02101541869342327, 0.015020513907074928, 0.0019785084296017885, -0.05472369119524956, 0.01541954092681408, -0.019970348104834557, -0.028520924970507622, 0.007358246482908726, 0.002971325535327196, -0.007971038110554218, 0.035608403384685516, 0.0036482461728155613, -0.005073342472314835, -0.05776389688253403, -0.034221310168504715, 0.015077517367899418, 0.0004290133365429938, -0.022877544164657593, 0.03676748275756836, 0.0008538701222278178, -0.0022041487973183393, -0.02017936110496521, -0.005719386041164398, 0.045831091701984406, -0.02614576369524002, -0.03747052699327469, 0.05555975064635277, -0.013319898396730423, 0.042676880955696106, 0.01237933523952961, -0.002859693020582199, -0.03313823789358139, 0.013034879229962826, -0.016863638535141945, -0.021357441321015358, 0.03720451146364212, 0.0018169976538047194, 0.004605435766279697, -0.029680002480745316, -0.012075315229594707, 0.017899207770824432, -0.022649528458714485, 0.04921332001686096, -0.005348860751837492, 0.021832473576068878, 0.015448042191565037, 0.015467043966054916, -0.03593142330646515, -0.023789605125784874, -0.0024345393758267164, 0.03313823789358139, 0.021148426458239555, 0.015590552240610123, -0.08261757344007492, -0.023789605125784874, 0.03395529091358185, -0.01166678685694933, 0.03507636860013008, 0.010517209768295288, -0.018649758771061897, 0.03902863338589668, 0.0060519082471728325, 0.03399329259991646, -0.009092113934457302, -0.029832012951374054, -0.006113662384450436, -0.044805023819208145, -0.016673624515533447, -0.0018003714503720403, -0.003346600802615285, -0.011343765072524548, 0.017338670790195465, 0.0004405922372825444, -0.007448502816259861, -0.006712202914059162, -0.0337652787566185, -0.0019416934810578823, -0.015951575711369514, 0.00669320160523057, -0.030269041657447815, -0.01463098730891943, 0.04567908123135567, -0.006987721659243107, -0.03028804436326027, 0.008545827120542526, 0.005524622742086649, -0.07927335053682327, 0.007500756066292524, 0.04115677624940872, 0.014773497357964516, 0.02350458689033985, 0.014431473799049854, 0.02534770965576172, -0.007714520674198866, 0.009643150493502617, -0.005586376879364252, -0.002271840814501047, 0.029965022578835487, 0.0012350833276286721, -0.01684463582932949, -0.0032800964545458555, -0.033271245658397675, 0.04298090189695358, 0.01940980926156044, -0.033119235187768936, -0.008887849748134613, -0.005196850746870041, -0.0007214549113996327, 0.030345046892762184, 0.04925132170319557, -0.025727735832333565, -0.0560917854309082, 0.05111344903707504, -0.008298809640109539, 0.0022837165743112564, 0.022136494517326355, 0.012255826964974403, -0.02124343439936638, 0.01655011624097824, 0.04545106738805771, -0.028558926656842232, -0.025404714047908783, -0.008270308375358582, -0.055027712136507034, 0.002579424064606428, 0.008849847130477428, 0.08968605101108551, -0.007400999311357737, -0.031010093167424202, -0.035532396286726, -0.01384243369102478, -0.1670592725276947, -0.002524795476347208, -0.004059148952364922, 0.044957034289836884, 0.00032183423172682524, -0.017642689868807793, -0.08482172340154648, -0.0470091737806797, -0.04640113189816475, 0.04548906907439232, -0.057991914451122284, -0.06661849468946457, 0.004099526442587376, -0.022858543321490288, 0.0337652787566185, 0.004631562624126673, -0.01974233239889145, -0.026753805577754974, -0.03116210363805294, -0.05955001711845398, 0.0047716968692839146, -0.0060186563059687614, 0.09455037862062454, -0.017566684633493423, -0.02266852930188179, -0.02409362606704235, 0.04727518931031227, 0.021433446556329727, -0.04005470126867294, 0.00977616012096405, -0.0037218760699033737, -0.022991551086306572, -0.005747887771576643, 0.003743252484127879, -0.011277261190116405, 0.05669982731342316, -0.015277030877768993, 0.029318979009985924, -0.029794011265039444, -0.0038216328248381615, 0.02472066879272461, 0.02057838812470436, -0.0030259541235864162, 0.0525195449590683, 0.018507249653339386, -0.028995957225561142, -0.009975672699511051, -0.019162792712450027, -0.05677583068609238, 0.009947171434760094, -0.014003944583237171, -0.008707338012754917, -0.02234550751745701, -0.021737467497587204, -0.04024471715092659, -0.008208554238080978, -0.030003024265170097, 0.05521772429347038, -0.0426388755440712, 0.02128143608570099, -0.0005341141950339079, -0.07813327014446259, -0.014811499044299126, 0.041004765778779984, -0.018611755222082138, -0.005291857291013002, 0.01750968210399151, -0.005918899551033974, 0.020825404673814774, -0.01978033408522606, 0.053811632096767426, -0.023789605125784874, 0.03446832671761513, 0.0003544926585163921, -0.04412097856402397, 0.019210295751690865, 0.017671192064881325, -0.00041743440669961274, -0.021813472732901573, -0.14433373510837555, -0.011885302141308784, -0.0017861205851659179, -0.0003984331269748509, 0.014326966367661953, -0.03131411224603653, -0.020084355026483536, -0.016863638535141945, 0.01585656963288784, 0.01838374137878418, 0.27270638942718506, 0.0647563710808754, 0.030915087088942528, 0.005135096609592438, 0.01870676316320896, -0.01283536572009325, -0.041992831975221634, 0.020521385595202446, -0.0013110884465277195, -0.04241086170077324, 0.026943817734718323, 0.021699463948607445, 0.025936750695109367, -0.022991551086306572, 0.0036672474816441536, 0.02933797985315323, -0.029508991166949272, -0.025955751538276672, 0.07459903508424759, -0.01307288184762001, -0.019856339320540428, -0.045717086642980576, 0.016132088378071785, 0.00746275344863534, -0.05932200327515602, -0.013728426769375801, -0.030820079147815704, 0.030972089618444443, -0.03522837907075882, 0.03811657056212425, -0.026677800342440605, 0.027399849146604538, 0.021737467497587204, -0.023599592968821526, -0.0236945990473032, -0.04719918593764305, -0.03437332063913345, 0.013633419759571552, 0.019894342869520187, 0.01626509800553322, 0.03929465264081955, 0.0034534831065684557, 0.0033798529766499996, 0.04111877456307411, 0.0005658819573000073, 0.007201485801488161, 0.03570340946316719, -0.03629244863986969, -0.023352576419711113, 0.025081692263484, 0.019799336791038513, -0.04917531833052635, 0.004329917021095753, -0.020597390830516815, 0.03342325612902641, 0.002679180819541216, -0.03135211393237114, -0.019875342026352882, 0.009030359797179699, 0.028216904029250145, 0.026943817734718323, 0.02204148657619953, -0.0422588512301445, 0.024853676557540894, -0.02274453453719616, 0.0036126188933849335, 0.03353726491332054, 0.01900128275156021, 0.04324691742658615, 0.012483842670917511, 0.027912883087992668, 0.020388375967741013, 0.022858543321490288, 0.00853157602250576, 0.0357414111495018, -0.009320128709077835, 0.0092298723757267, 0.03076307661831379, -0.02629777416586876, 0.03918064385652542, -0.043626945465803146, -0.03834458813071251, 0.015372036956250668, 0.018136722967028618, 0.027779875323176384, -0.034354317933321, 0.02057838812470436, 0.07934935390949249, 0.048947304487228394, 0.006417682860046625, 0.011980308219790459, -0.007439001929014921, 0.0385155975818634, 0.008892600424587727, -0.00983316358178854, -0.024378644302487373, 0.027551859617233276, -0.012027811259031296, -0.024663664400577545, -0.027437850832939148, -0.01532453391700983, -0.029356980696320534, -0.029870016500353813, 0.016388606280088425, -0.005182599648833275, -0.04400696977972984, -0.01479249820113182, 0.006431933958083391, 0.017956212162971497, -0.03509536758065224, -0.01237933523952961, 0.035760413855314255, -0.016274597495794296, -0.008778592571616173, 0.0365394651889801, 0.01558105181902647, 0.03786955401301384, 0.013538413681089878, 0.02321956679224968, 0.011989808641374111, 0.006289424374699593, -0.04157480597496033, 0.009415135718882084, -0.017766198143363, -0.016977645456790924, -0.00851257424801588, -0.058789968490600586, -0.04811124503612518, -0.05020138621330261, 0.05248154327273369, -0.0066266972571611404, -0.029413985088467598, -0.026677800342440605, -0.002150707645341754, 0.06361629068851471, -0.020502382889389992, 0.04628712311387062, -0.006873713806271553, -0.001679238281212747, -0.005249103996902704, -0.013177389279007912, 0.012369834817945957, -0.0185642521828413, 0.03401229530572891, 0.01699664629995823, 0.019428811967372894, 0.016825634986162186, 0.0007000784971751273, 0.016284098848700523, 0.04222084954380989, 0.030858082696795464, 0.013177389279007912, 0.015068016946315765, -0.022459516301751137, -0.0006507938960567117, -0.018060719594359398, 0.0027694369200617075, 0.027114829048514366, 0.019438311457633972, -0.01014668494462967, 0.010222690179944038, 0.013481409288942814, 0.010935237631201744, 0.08352963626384735, -0.020559387281537056, 0.021946480497717857, -0.051873501390218735, 0.010431704111397266, -0.017376672476530075, -0.021034419536590576, -0.0012564597418531775, -0.05643380805850029, -0.05612978711724281, 0.038363587111234665, 0.04206883907318115, -0.0337652787566185, -0.03762253746390343, -0.048985306173563004, -0.02914796769618988, -0.0031114600133150816, 0.01291137095540762, -0.02432164177298546, -0.019419310614466667, -0.03758453577756882, 0.054989710450172424, 0.007766773924231529, -0.013595417141914368, 0.0026411782018840313, 0.01622709445655346, 0.0016056083841249347, -0.022174496203660965, 0.14585384726524353, 0.006759705953299999, -0.006816709879785776, 0.021585457026958466, -0.014212959446012974, 0.043930962681770325, -0.011011242866516113, -0.02610776200890541, -0.00882609561085701, -0.007686018478125334, 0.026829810813069344, 0.008256057277321815, -0.006517439614981413, 0.012464840896427631, 0.013633419759571552, -0.008298809640109539, 0.02819790318608284, -0.015524047426879406, -0.027000822126865387, 0.01534353569149971, 0.027513856068253517, -0.07889332622289658, 0.01030819583684206, 0.0345633327960968, 0.028140898793935776, 0.05932200327515602, 0.03716650977730751, -0.02757086046040058, -0.01409895159304142, 0.033271245658397675, 0.011210756376385689, -0.012825865298509598, -0.08223754912614822, -0.016854137182235718, -0.013889937661588192, 0.03937065601348877, 0.005453368183225393, -0.008631332777440548, 0.01772819645702839, 0.006194417830556631, -0.01662612147629261, 0.00948639027774334, -0.0695066899061203, 0.05757388472557068, 0.012189322151243687, -0.013281896710395813, 0.02420763298869133, 0.032397184520959854, -0.022535521537065506, 0.017386173829436302, 0.011381767690181732, 0.03625444695353508, 0.05020138621330261, 0.014801998622715473, 0.035437390208244324, -0.0111537529155612, 0.003185089910402894, -0.012683356180787086, 0.05008738115429878, -0.003622119314968586, 0.041802819818258286, 0.022516518831253052, -0.015239028260111809, 0.04165080934762955, -0.0059236497618258, 0.004458175972104073, -0.020597390830516815, -0.061906177550554276, 0.009567145258188248, -0.001961882458999753, 0.03606443479657173, -0.03786955401301384, -0.03885762393474579, -0.020445380359888077, -0.03952266648411751, 0.01332939974963665, -0.05840994045138359, -0.014535981230437756, -0.005282356403768063, 0.0066409483551979065, -0.00491658179089427, -0.012493343092501163, -0.02175646834075451, 0.03349925950169563, 0.028995957225561142, -0.0054438672959804535, 0.0256707314401865, 0.038686610758304596, 0.025385713204741478, -0.007006722968071699, -0.02263052761554718, -0.0406627431511879, 0.04917531833052635, -0.024378644302487373, -0.03068707138299942, 0.02329557202756405, -0.010716723278164864, 0.010260692797601223, -0.006503188982605934, 0.011334264650940895, -0.008099296130239964, -0.07406699657440186, 0.005581626668572426, -0.03439231961965561, 0.02255452238023281, -0.0377175435423851, 0.03254919499158859, -0.014859003014862537, 0.03646346181631088, -0.028558926656842232, -0.0106597188860178, -0.019067786633968353, -0.027988888323307037, -0.016749629750847816, -0.000811117235571146, 0.017718695104122162, -0.004161280579864979, 0.011457772925496101, 0.030193038284778595, 0.04469101503491402, -0.014992011711001396, -0.013215391896665096, 0.05206351354718208, 0.011163253337144852, 0.012407837435603142, 0.05620579421520233, 0.00645568547770381, 0.013756928034126759, 0.016046583652496338, -0.013880436308681965, 0.00437504518777132, -0.0008514949586242437, -0.010279693640768528, -0.03159913048148155, 0.01998934894800186, -0.00213289400562644, 0.01291137095540762, 0.008593330159783363, -0.0022338381968438625, -0.007229987997561693, 0.0003895262780133635, -0.015305533073842525, -0.0005970559432171285, 0.03754653409123421, -0.016616621986031532, -0.005557875148952007, -0.026791807264089584, -0.028216904029250145, 0.07319293916225433, 0.0288249459117651, -0.03368927165865898, 0.07524507492780685, -0.033936288207769394, 0.036938492208719254, -0.005781140178442001, -0.018193727359175682, -0.022022485733032227, 0.01354791410267353, -0.00935813132673502, -0.017595186829566956, 0.01356691587716341, -0.024530654773116112, -0.017082152888178825, 0.0051160953007638454, 0.014773497357964516, -0.05540774017572403, 0.0430569052696228, -0.02472066879272461, -0.00527285598218441, -0.042828891426324844, 0.01214181911200285, -0.04510904476046562, 0.04043472930788994, -0.02204148657619953, 0.02709582820534706, 0.02834991365671158, -0.020407376810908318, 0.025898747146129608, -0.016464611515402794, -0.04024471715092659, -0.03509536758065224, 0.008655084297060966, -0.028216904029250145, -0.03507636860013008, 0.026563793420791626, 0.002736184746026993, -0.03351826220750809, 0.02681080996990204, -0.017899207770824432, -0.03663447126746178, -0.02069239690899849, -0.0201413594186306, -0.013443407602608204, 0.004049648065119982, -0.029090963304042816, -0.004641063045710325, -0.006830960977822542, 0.014203458093106747, 0.0852777510881424, -0.012816364876925945, -0.010745225474238396, 0.00871683843433857, 0.020388375967741013, -0.17192360758781433, 0.015020513907074928, 0.017329169437289238, -0.01005167793482542, -0.049745358526706696, -0.01607508398592472, -0.04005470126867294, -0.07311693578958511, 0.010583714582026005, -0.0026340526528656483, -0.05031539499759674, 0.03471534326672554, -0.020882409065961838, -0.011780794709920883, -0.025062691420316696, 0.0034867352806031704, -0.006707452703267336, 0.0027884382288903, -0.0017552434001117945, 0.018630757927894592, -0.006802459247410297, -0.026411782950162888, 0.0940183475613594, 0.03840159252285957, -0.0008889037417247891, -0.045831091701984406, -0.04210684075951576, -0.011685788631439209, -0.02981301210820675, -0.030554061755537987, 0.000751738203689456, -0.029508991166949272, 0.0221174918115139, 0.01765219122171402, 0.023789605125784874, 0.020920412614941597, 0.018070219084620476, -0.014136954210698605, 0.01676863245666027, 0.01974233239889145, -0.005372612737119198, 0.01827923394739628, -0.006712202914059162, -0.013614418916404247, 0.01611308753490448, 0.05202551186084747, -0.01878276839852333, -0.009581396356225014, -0.019457312300801277, -0.015467043966054916, 0.010973240248858929, 0.03805956989526749, -0.02677280642092228, 0.025423714891076088, 0.01206581387668848, -0.015761563554406166, -0.016379104927182198, -0.011343765072524548, -0.043778955936431885, 0.0065221902914345264, 0.003030704567208886, 0.00840331707149744, -0.030307045206427574, -0.06069009378552437, -0.037337519228458405, 0.018374240025877953, -0.04609711095690727, 0.01137226726859808, -0.00633692741394043, -0.00853157602250576, 0.023523587733507156, -0.002731434302404523, -0.04735119640827179, -0.026639796793460846, 0.004878579173237085, 0.03741352632641792, 0.04529905691742897, -0.03587442263960838, -0.03815457597374916, -0.0034321066923439503, -0.03503836318850517, 0.02618376724421978, 0.015486044809222221, 0.0017801825888454914, 0.03937065601348877, 0.04514704644680023, -0.0043204165995121, -0.013519411906599998, -0.018469246104359627, -0.01933380402624607, -0.030896084383130074, -0.02149045094847679, 0.01332939974963665, 0.014887504279613495, -0.023371577262878418, 0.0414607971906662, 0.0009845038875937462, 0.01831723563373089, 0.018336236476898193, 0.0106597188860178, 0.001731491880491376, -0.02732384391129017, 0.011761793866753578, 0.033271245658397675, -0.012569348327815533, -0.042714882642030716, 0.007790525909513235, -0.013215391896665096, 0.0002955590025521815, -0.008251306600868702, -0.0288249459117651, -0.0037670042365789413, 0.02464466355741024, 0.012692856602370739, -0.03937065601348877, 0.0006959219463169575, 0.0021839598193764687, -0.018649758771061897, -0.02622176893055439, -0.00901135802268982, -0.018364738672971725, 0.01779470033943653, -0.00373137672431767, -0.0394846647977829, 0.0033822283148765564, 0.04746520146727562, -0.0006199168274179101, 0.017386173829436302, 0.03585541993379593, 0.0013027754612267017, 0.023922614753246307, -0.01629360020160675, 0.03906663507223129, 0.008156300522387028, 0.018079720437526703, -0.02563272975385189, -0.04564107954502106, 0.06281823664903641, -0.02966100163757801, -0.0465911440551281, -0.038173574954271317, 0.0066266972571611404, 0.0032302180770784616, -0.050847429782152176, 0.017490679398179054, 0.024302639067173004, 0.00953864399343729, 0.015695059671998024, -0.012569348327815533, -0.051835499703884125, 0.010412702336907387, -0.007296492345631123, -0.007496005855500698, 0.0009744095150381327, -0.026563793420791626, 0.022611524909734726, -0.05453367903828621, 0.027190834283828735, 0.030668068677186966, 0.03463933616876602, 0.00869783665984869, 0.010479207150638103, 0.015657056123018265, -0.05259554833173752, 0.009215622209012508, -0.04165080934762955, -0.031333114951848984, -0.01998934894800186, -0.021338440477848053, -0.007595762610435486, 0.012578848749399185, 0.030307045206427574, -0.0201413594186306, 0.02534770965576172, 0.03087708353996277, -0.030915087088942528, 0.01486850343644619, -0.022383511066436768, 0.025024687871336937, -0.04833926260471344, 0.008655084297060966, 0.0184597447514534, 0.07060876488685608, 9.834647789830342e-05, 0.03348026052117348, -0.0111537529155612, 0.04001669958233833, 0.04522304981946945, 0.04001669958233833, -0.005239603575319052, -0.019647326320409775, -0.00787128135561943, -0.03479134663939476, -0.027228837832808495, 0.02933797985315323, 0.012208323925733566, 0.02582274191081524, -0.007272740826010704, -0.03410730138421059, 0.05441967397928238, 0.04301890358328819, -0.0031138351187109947, -0.030421052128076553, -0.017718695104122162, -0.002453540451824665, 0.03526638075709343, -0.021471448242664337, 0.005743137560784817, -0.0031209606677293777, 0.04332292452454567, -0.00977616012096405, -0.002645928645506501, -0.017091654241085052, -0.009144366718828678, 0.01153377816081047, -0.028881948441267014, 0.020407376810908318, 0.06882264465093613, -0.004068649373948574, -0.027456853538751602, -0.00195475690998137, -0.024815674871206284, -0.01028919406235218, -0.007586261723190546, -0.03925664722919464, -0.014041947200894356, 0.002786062890663743, -0.01959032192826271, 0.016455110162496567, -0.0020426379051059484, -0.012939873151481152, 0.04210684075951576, -0.038914624601602554, 0.025613728910684586, 0.015600052662193775, -0.006351178511977196, 0.03940865769982338, 0.021148426458239555, -0.009690653532743454, -0.0473891980946064, -0.002515294821932912, -0.025841744616627693, -0.016749629750847816, 0.012369834817945957], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:34:10,608 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [0.03156112879514694, 0.0012588349636644125, -0.04404497146606445, 0.012407837435603142, -0.014716492965817451, -0.012236826121807098, 0.0337652787566185, -0.019875342026352882, 0.020388375967741013, 0.00373137672431767, 0.013243894092738628, 0.0022385886404663324, 0.043892960995435715, -0.016046583652496338, 0.04431099072098732, -0.0371285043656826, 0.010403201915323734, -0.0017077402444556355, 0.03752753138542175, -0.010251191444694996, -0.0036149939987808466, 0.01439347118139267, -0.004177907016128302, 0.015258030034601688, -0.013832933269441128, -0.026392780244350433, 0.017775699496269226, -0.008256057277321815, 0.008436569012701511, -0.003510486800223589, 0.0033252243883907795, -0.013196390122175217, -0.021623458713293076, -0.03665347397327423, -0.037299517542123795, -0.04446300119161606, 0.01206581387668848, 0.004417798016220331, -0.06012005731463432, 0.03387928754091263, -0.0201413594186306, -0.01673062890768051, 0.006669450085610151, -0.03720451146364212, 0.006935467943549156, -0.03302422910928726, 0.021338440477848053, -0.03192215412855148, -0.028140898793935776, 0.018611755222082138, -0.014450475573539734, 0.031409118324518204, 0.002349033486098051, -0.04628712311387062, 0.03243518993258476, 0.040966764092445374, -0.06392031162977219, -0.01823173090815544, -0.02610776200890541, -0.007381998002529144, -0.01340540498495102, -0.01978033408522606, -0.04051073268055916, 0.02175646834075451, 0.0011157315457239747, 0.07342095673084259, 0.03292922303080559, 0.018364738672971725, -0.023637594655156136, -0.018839770928025246, -0.008009040728211403, 0.018545251339673996, -0.030972089618444443, 6.086348366807215e-05, -0.04944133758544922, 0.032682206481695175, 0.057079851627349854, -0.022839540615677834, -0.026829810813069344, -0.024929681792855263, 0.03439231961965561, -0.03739452362060547, 0.00901135802268982, 0.03247319161891937, 0.02255452238023281, 0.021509451791644096, -0.0037622537929564714, 0.014459975995123386, -0.0019511941354721785, -0.010156185366213322, -0.0339742936193943, -0.039826687425374985, 0.04605910927057266, 0.006441434845328331, -0.05035339668393135, -0.008294059894979, 0.0015794815262779593, 0.018488246947526932, 0.0266587994992733, -0.005291857291013002, 0.02302955463528633, 0.053849633783102036, -0.0028121897485107183, -0.01706315204501152, 0.04157480597496033, 0.0006116037839092314, 0.011486275121569633, 0.03790755942463875, -0.004130403511226177, 0.013243894092738628, 0.0029143216088414192, 0.052861567586660385, 0.03222617506980896, 0.008393816649913788, 0.02010335586965084, -0.04875728860497475, -0.01721516251564026, -0.035361386835575104, -0.02468266524374485, -0.003244468942284584, 0.042828891426324844, 0.006341678090393543, 0.04001669958233833, 0.0013182139955461025, 0.011476774699985981, 0.006493688095360994, 0.025974752381443977, 0.02354258857667446, -0.007182484492659569, 0.0004673127841670066, 0.021072421222925186, 0.04545106738805771, 0.01596107706427574, -0.025537723675370216, -0.048833295702934265, -0.004365544766187668, 0.009966172277927399, 0.007391498889774084, -0.003028329461812973, -0.04617311432957649, 0.030478056520223618, 0.007899782620370388, -0.05232953280210495, -0.05156948044896126, 0.015790065750479698, -0.04347493499517441, -0.01129626203328371, 0.02282053977251053, -0.010327196680009365, -0.0028881949838250875, -0.017709195613861084, 0.01230333000421524, 0.04636313021183014, -0.009638400748372078, 0.02065439336001873, -0.013661921955645084, -0.032131168991327286, -0.0001216527380165644, 0.03861060366034508, 0.0003262876416556537, -0.023371577262878418, -0.0005804297979921103, -0.04833926260471344, 0.03197915852069855, 0.029603997245430946, -0.032321181148290634, 0.02101541869342327, 0.015020513907074928, 0.0019785084296017885, -0.05472369119524956, 0.01541954092681408, -0.019970348104834557, -0.028520924970507622, 0.007358246482908726, 0.002971325535327196, -0.007971038110554218, 0.035608403384685516, 0.0036482461728155613, -0.005073342472314835, -0.05776389688253403, -0.034221310168504715, 0.015077517367899418, 0.0004290133365429938, -0.022877544164657593, 0.03676748275756836, 0.0008538701222278178, -0.0022041487973183393, -0.02017936110496521, -0.005719386041164398, 0.045831091701984406, -0.02614576369524002, -0.03747052699327469, 0.05555975064635277, -0.013319898396730423, 0.042676880955696106, 0.01237933523952961, -0.002859693020582199, -0.03313823789358139, 0.013034879229962826, -0.016863638535141945, -0.021357441321015358, 0.03720451146364212, 0.0018169976538047194, 0.004605435766279697, -0.029680002480745316, -0.012075315229594707, 0.017899207770824432, -0.022649528458714485, 0.04921332001686096, -0.005348860751837492, 0.021832473576068878, 0.015448042191565037, 0.015467043966054916, -0.03593142330646515, -0.023789605125784874, -0.0024345393758267164, 0.03313823789358139, 0.021148426458239555, 0.015590552240610123, -0.08261757344007492, -0.023789605125784874, 0.03395529091358185, -0.01166678685694933, 0.03507636860013008, 0.010517209768295288, -0.018649758771061897, 0.03902863338589668, 0.0060519082471728325, 0.03399329259991646, -0.009092113934457302, -0.029832012951374054, -0.006113662384450436, -0.044805023819208145, -0.016673624515533447, -0.0018003714503720403, -0.003346600802615285, -0.011343765072524548, 0.017338670790195465, 0.0004405922372825444, -0.007448502816259861, -0.006712202914059162, -0.0337652787566185, -0.0019416934810578823, -0.015951575711369514, 0.00669320160523057, -0.030269041657447815, -0.01463098730891943, 0.04567908123135567, -0.006987721659243107, -0.03028804436326027, 0.008545827120542526, 0.005524622742086649, -0.07927335053682327, 0.007500756066292524, 0.04115677624940872, 0.014773497357964516, 0.02350458689033985, 0.014431473799049854, 0.02534770965576172, -0.007714520674198866, 0.009643150493502617, -0.005586376879364252, -0.002271840814501047, 0.029965022578835487, 0.0012350833276286721, -0.01684463582932949, -0.0032800964545458555, -0.033271245658397675, 0.04298090189695358, 0.01940980926156044, -0.033119235187768936, -0.008887849748134613, -0.005196850746870041, -0.0007214549113996327, 0.030345046892762184, 0.04925132170319557, -0.025727735832333565, -0.0560917854309082, 0.05111344903707504, -0.008298809640109539, 0.0022837165743112564, 0.022136494517326355, 0.012255826964974403, -0.02124343439936638, 0.01655011624097824, 0.04545106738805771, -0.028558926656842232, -0.025404714047908783, -0.008270308375358582, -0.055027712136507034, 0.002579424064606428, 0.008849847130477428, 0.08968605101108551, -0.007400999311357737, -0.031010093167424202, -0.035532396286726, -0.01384243369102478, -0.1670592725276947, -0.002524795476347208, -0.004059148952364922, 0.044957034289836884, 0.00032183423172682524, -0.017642689868807793, -0.08482172340154648, -0.0470091737806797, -0.04640113189816475, 0.04548906907439232, -0.057991914451122284, -0.06661849468946457, 0.004099526442587376, -0.022858543321490288, 0.0337652787566185, 0.004631562624126673, -0.01974233239889145, -0.026753805577754974, -0.03116210363805294, -0.05955001711845398, 0.0047716968692839146, -0.0060186563059687614, 0.09455037862062454, -0.017566684633493423, -0.02266852930188179, -0.02409362606704235, 0.04727518931031227, 0.021433446556329727, -0.04005470126867294, 0.00977616012096405, -0.0037218760699033737, -0.022991551086306572, -0.005747887771576643, 0.003743252484127879, -0.011277261190116405, 0.05669982731342316, -0.015277030877768993, 0.029318979009985924, -0.029794011265039444, -0.0038216328248381615, 0.02472066879272461, 0.02057838812470436, -0.0030259541235864162, 0.0525195449590683, 0.018507249653339386, -0.028995957225561142, -0.009975672699511051, -0.019162792712450027, -0.05677583068609238, 0.009947171434760094, -0.014003944583237171, -0.008707338012754917, -0.02234550751745701, -0.021737467497587204, -0.04024471715092659, -0.008208554238080978, -0.030003024265170097, 0.05521772429347038, -0.0426388755440712, 0.02128143608570099, -0.0005341141950339079, -0.07813327014446259, -0.014811499044299126, 0.041004765778779984, -0.018611755222082138, -0.005291857291013002, 0.01750968210399151, -0.005918899551033974, 0.020825404673814774, -0.01978033408522606, 0.053811632096767426, -0.023789605125784874, 0.03446832671761513, 0.0003544926585163921, -0.04412097856402397, 0.019210295751690865, 0.017671192064881325, -0.00041743440669961274, -0.021813472732901573, -0.14433373510837555, -0.011885302141308784, -0.0017861205851659179, -0.0003984331269748509, 0.014326966367661953, -0.03131411224603653, -0.020084355026483536, -0.016863638535141945, 0.01585656963288784, 0.01838374137878418, 0.27270638942718506, 0.0647563710808754, 0.030915087088942528, 0.005135096609592438, 0.01870676316320896, -0.01283536572009325, -0.041992831975221634, 0.020521385595202446, -0.0013110884465277195, -0.04241086170077324, 0.026943817734718323, 0.021699463948607445, 0.025936750695109367, -0.022991551086306572, 0.0036672474816441536, 0.02933797985315323, -0.029508991166949272, -0.025955751538276672, 0.07459903508424759, -0.01307288184762001, -0.019856339320540428, -0.045717086642980576, 0.016132088378071785, 0.00746275344863534, -0.05932200327515602, -0.013728426769375801, -0.030820079147815704, 0.030972089618444443, -0.03522837907075882, 0.03811657056212425, -0.026677800342440605, 0.027399849146604538, 0.021737467497587204, -0.023599592968821526, -0.0236945990473032, -0.04719918593764305, -0.03437332063913345, 0.013633419759571552, 0.019894342869520187, 0.01626509800553322, 0.03929465264081955, 0.0034534831065684557, 0.0033798529766499996, 0.04111877456307411, 0.0005658819573000073, 0.007201485801488161, 0.03570340946316719, -0.03629244863986969, -0.023352576419711113, 0.025081692263484, 0.019799336791038513, -0.04917531833052635, 0.004329917021095753, -0.020597390830516815, 0.03342325612902641, 0.002679180819541216, -0.03135211393237114, -0.019875342026352882, 0.009030359797179699, 0.028216904029250145, 0.026943817734718323, 0.02204148657619953, -0.0422588512301445, 0.024853676557540894, -0.02274453453719616, 0.0036126188933849335, 0.03353726491332054, 0.01900128275156021, 0.04324691742658615, 0.012483842670917511, 0.027912883087992668, 0.020388375967741013, 0.022858543321490288, 0.00853157602250576, 0.0357414111495018, -0.009320128709077835, 0.0092298723757267, 0.03076307661831379, -0.02629777416586876, 0.03918064385652542, -0.043626945465803146, -0.03834458813071251, 0.015372036956250668, 0.018136722967028618, 0.027779875323176384, -0.034354317933321, 0.02057838812470436, 0.07934935390949249, 0.048947304487228394, 0.006417682860046625, 0.011980308219790459, -0.007439001929014921, 0.0385155975818634, 0.008892600424587727, -0.00983316358178854, -0.024378644302487373, 0.027551859617233276, -0.012027811259031296, -0.024663664400577545, -0.027437850832939148, -0.01532453391700983, -0.029356980696320534, -0.029870016500353813, 0.016388606280088425, -0.005182599648833275, -0.04400696977972984, -0.01479249820113182, 0.006431933958083391, 0.017956212162971497, -0.03509536758065224, -0.01237933523952961, 0.035760413855314255, -0.016274597495794296, -0.008778592571616173, 0.0365394651889801, 0.01558105181902647, 0.03786955401301384, 0.013538413681089878, 0.02321956679224968, 0.011989808641374111, 0.006289424374699593, -0.04157480597496033, 0.009415135718882084, -0.017766198143363, -0.016977645456790924, -0.00851257424801588, -0.058789968490600586, -0.04811124503612518, -0.05020138621330261, 0.05248154327273369, -0.0066266972571611404, -0.029413985088467598, -0.026677800342440605, -0.002150707645341754, 0.06361629068851471, -0.020502382889389992, 0.04628712311387062, -0.006873713806271553, -0.001679238281212747, -0.005249103996902704, -0.013177389279007912, 0.012369834817945957, -0.0185642521828413, 0.03401229530572891, 0.01699664629995823, 0.019428811967372894, 0.016825634986162186, 0.0007000784971751273, 0.016284098848700523, 0.04222084954380989, 0.030858082696795464, 0.013177389279007912, 0.015068016946315765, -0.022459516301751137, -0.0006507938960567117, -0.018060719594359398, 0.0027694369200617075, 0.027114829048514366, 0.019438311457633972, -0.01014668494462967, 0.010222690179944038, 0.013481409288942814, 0.010935237631201744, 0.08352963626384735, -0.020559387281537056, 0.021946480497717857, -0.051873501390218735, 0.010431704111397266, -0.017376672476530075, -0.021034419536590576, -0.0012564597418531775, -0.05643380805850029, -0.05612978711724281, 0.038363587111234665, 0.04206883907318115, -0.0337652787566185, -0.03762253746390343, -0.048985306173563004, -0.02914796769618988, -0.0031114600133150816, 0.01291137095540762, -0.02432164177298546, -0.019419310614466667, -0.03758453577756882, 0.054989710450172424, 0.007766773924231529, -0.013595417141914368, 0.0026411782018840313, 0.01622709445655346, 0.0016056083841249347, -0.022174496203660965, 0.14585384726524353, 0.006759705953299999, -0.006816709879785776, 0.021585457026958466, -0.014212959446012974, 0.043930962681770325, -0.011011242866516113, -0.02610776200890541, -0.00882609561085701, -0.007686018478125334, 0.026829810813069344, 0.008256057277321815, -0.006517439614981413, 0.012464840896427631, 0.013633419759571552, -0.008298809640109539, 0.02819790318608284, -0.015524047426879406, -0.027000822126865387, 0.01534353569149971, 0.027513856068253517, -0.07889332622289658, 0.01030819583684206, 0.0345633327960968, 0.028140898793935776, 0.05932200327515602, 0.03716650977730751, -0.02757086046040058, -0.01409895159304142, 0.033271245658397675, 0.011210756376385689, -0.012825865298509598, -0.08223754912614822, -0.016854137182235718, -0.013889937661588192, 0.03937065601348877, 0.005453368183225393, -0.008631332777440548, 0.01772819645702839, 0.006194417830556631, -0.01662612147629261, 0.00948639027774334, -0.0695066899061203, 0.05757388472557068, 0.012189322151243687, -0.013281896710395813, 0.02420763298869133, 0.032397184520959854, -0.022535521537065506, 0.017386173829436302, 0.011381767690181732, 0.03625444695353508, 0.05020138621330261, 0.014801998622715473, 0.035437390208244324, -0.0111537529155612, 0.003185089910402894, -0.012683356180787086, 0.05008738115429878, -0.003622119314968586, 0.041802819818258286, 0.022516518831253052, -0.015239028260111809, 0.04165080934762955, -0.0059236497618258, 0.004458175972104073, -0.020597390830516815, -0.061906177550554276, 0.009567145258188248, -0.001961882458999753, 0.03606443479657173, -0.03786955401301384, -0.03885762393474579, -0.020445380359888077, -0.03952266648411751, 0.01332939974963665, -0.05840994045138359, -0.014535981230437756, -0.005282356403768063, 0.0066409483551979065, -0.00491658179089427, -0.012493343092501163, -0.02175646834075451, 0.03349925950169563, 0.028995957225561142, -0.0054438672959804535, 0.0256707314401865, 0.038686610758304596, 0.025385713204741478, -0.007006722968071699, -0.02263052761554718, -0.0406627431511879, 0.04917531833052635, -0.024378644302487373, -0.03068707138299942, 0.02329557202756405, -0.010716723278164864, 0.010260692797601223, -0.006503188982605934, 0.011334264650940895, -0.008099296130239964, -0.07406699657440186, 0.005581626668572426, -0.03439231961965561, 0.02255452238023281, -0.0377175435423851, 0.03254919499158859, -0.014859003014862537, 0.03646346181631088, -0.028558926656842232, -0.0106597188860178, -0.019067786633968353, -0.027988888323307037, -0.016749629750847816, -0.000811117235571146, 0.017718695104122162, -0.004161280579864979, 0.011457772925496101, 0.030193038284778595, 0.04469101503491402, -0.014992011711001396, -0.013215391896665096, 0.05206351354718208, 0.011163253337144852, 0.012407837435603142, 0.05620579421520233, 0.00645568547770381, 0.013756928034126759, 0.016046583652496338, -0.013880436308681965, 0.00437504518777132, -0.0008514949586242437, -0.010279693640768528, -0.03159913048148155, 0.01998934894800186, -0.00213289400562644, 0.01291137095540762, 0.008593330159783363, -0.0022338381968438625, -0.007229987997561693, 0.0003895262780133635, -0.015305533073842525, -0.0005970559432171285, 0.03754653409123421, -0.016616621986031532, -0.005557875148952007, -0.026791807264089584, -0.028216904029250145, 0.07319293916225433, 0.0288249459117651, -0.03368927165865898, 0.07524507492780685, -0.033936288207769394, 0.036938492208719254, -0.005781140178442001, -0.018193727359175682, -0.022022485733032227, 0.01354791410267353, -0.00935813132673502, -0.017595186829566956, 0.01356691587716341, -0.024530654773116112, -0.017082152888178825, 0.0051160953007638454, 0.014773497357964516, -0.05540774017572403, 0.0430569052696228, -0.02472066879272461, -0.00527285598218441, -0.042828891426324844, 0.01214181911200285, -0.04510904476046562, 0.04043472930788994, -0.02204148657619953, 0.02709582820534706, 0.02834991365671158, -0.020407376810908318, 0.025898747146129608, -0.016464611515402794, -0.04024471715092659, -0.03509536758065224, 0.008655084297060966, -0.028216904029250145, -0.03507636860013008, 0.026563793420791626, 0.002736184746026993, -0.03351826220750809, 0.02681080996990204, -0.017899207770824432, -0.03663447126746178, -0.02069239690899849, -0.0201413594186306, -0.013443407602608204, 0.004049648065119982, -0.029090963304042816, -0.004641063045710325, -0.006830960977822542, 0.014203458093106747, 0.0852777510881424, -0.012816364876925945, -0.010745225474238396, 0.00871683843433857, 0.020388375967741013, -0.17192360758781433, 0.015020513907074928, 0.017329169437289238, -0.01005167793482542, -0.049745358526706696, -0.01607508398592472, -0.04005470126867294, -0.07311693578958511, 0.010583714582026005, -0.0026340526528656483, -0.05031539499759674, 0.03471534326672554, -0.020882409065961838, -0.011780794709920883, -0.025062691420316696, 0.0034867352806031704, -0.006707452703267336, 0.0027884382288903, -0.0017552434001117945, 0.018630757927894592, -0.006802459247410297, -0.026411782950162888, 0.0940183475613594, 0.03840159252285957, -0.0008889037417247891, -0.045831091701984406, -0.04210684075951576, -0.011685788631439209, -0.02981301210820675, -0.030554061755537987, 0.000751738203689456, -0.029508991166949272, 0.0221174918115139, 0.01765219122171402, 0.023789605125784874, 0.020920412614941597, 0.018070219084620476, -0.014136954210698605, 0.01676863245666027, 0.01974233239889145, -0.005372612737119198, 0.01827923394739628, -0.006712202914059162, -0.013614418916404247, 0.01611308753490448, 0.05202551186084747, -0.01878276839852333, -0.009581396356225014, -0.019457312300801277, -0.015467043966054916, 0.010973240248858929, 0.03805956989526749, -0.02677280642092228, 0.025423714891076088, 0.01206581387668848, -0.015761563554406166, -0.016379104927182198, -0.011343765072524548, -0.043778955936431885, 0.0065221902914345264, 0.003030704567208886, 0.00840331707149744, -0.030307045206427574, -0.06069009378552437, -0.037337519228458405, 0.018374240025877953, -0.04609711095690727, 0.01137226726859808, -0.00633692741394043, -0.00853157602250576, 0.023523587733507156, -0.002731434302404523, -0.04735119640827179, -0.026639796793460846, 0.004878579173237085, 0.03741352632641792, 0.04529905691742897, -0.03587442263960838, -0.03815457597374916, -0.0034321066923439503, -0.03503836318850517, 0.02618376724421978, 0.015486044809222221, 0.0017801825888454914, 0.03937065601348877, 0.04514704644680023, -0.0043204165995121, -0.013519411906599998, -0.018469246104359627, -0.01933380402624607, -0.030896084383130074, -0.02149045094847679, 0.01332939974963665, 0.014887504279613495, -0.023371577262878418, 0.0414607971906662, 0.0009845038875937462, 0.01831723563373089, 0.018336236476898193, 0.0106597188860178, 0.001731491880491376, -0.02732384391129017, 0.011761793866753578, 0.033271245658397675, -0.012569348327815533, -0.042714882642030716, 0.007790525909513235, -0.013215391896665096, 0.0002955590025521815, -0.008251306600868702, -0.0288249459117651, -0.0037670042365789413, 0.02464466355741024, 0.012692856602370739, -0.03937065601348877, 0.0006959219463169575, 0.0021839598193764687, -0.018649758771061897, -0.02622176893055439, -0.00901135802268982, -0.018364738672971725, 0.01779470033943653, -0.00373137672431767, -0.0394846647977829, 0.0033822283148765564, 0.04746520146727562, -0.0006199168274179101, 0.017386173829436302, 0.03585541993379593, 0.0013027754612267017, 0.023922614753246307, -0.01629360020160675, 0.03906663507223129, 0.008156300522387028, 0.018079720437526703, -0.02563272975385189, -0.04564107954502106, 0.06281823664903641, -0.02966100163757801, -0.0465911440551281, -0.038173574954271317, 0.0066266972571611404, 0.0032302180770784616, -0.050847429782152176, 0.017490679398179054, 0.024302639067173004, 0.00953864399343729, 0.015695059671998024, -0.012569348327815533, -0.051835499703884125, 0.010412702336907387, -0.007296492345631123, -0.007496005855500698, 0.0009744095150381327, -0.026563793420791626, 0.022611524909734726, -0.05453367903828621, 0.027190834283828735, 0.030668068677186966, 0.03463933616876602, 0.00869783665984869, 0.010479207150638103, 0.015657056123018265, -0.05259554833173752, 0.009215622209012508, -0.04165080934762955, -0.031333114951848984, -0.01998934894800186, -0.021338440477848053, -0.007595762610435486, 0.012578848749399185, 0.030307045206427574, -0.0201413594186306, 0.02534770965576172, 0.03087708353996277, -0.030915087088942528, 0.01486850343644619, -0.022383511066436768, 0.025024687871336937, -0.04833926260471344, 0.008655084297060966, 0.0184597447514534, 0.07060876488685608, 9.834647789830342e-05, 0.03348026052117348, -0.0111537529155612, 0.04001669958233833, 0.04522304981946945, 0.04001669958233833, -0.005239603575319052, -0.019647326320409775, -0.00787128135561943, -0.03479134663939476, -0.027228837832808495, 0.02933797985315323, 0.012208323925733566, 0.02582274191081524, -0.007272740826010704, -0.03410730138421059, 0.05441967397928238, 0.04301890358328819, -0.0031138351187109947, -0.030421052128076553, -0.017718695104122162, -0.002453540451824665, 0.03526638075709343, -0.021471448242664337, 0.005743137560784817, -0.0031209606677293777, 0.04332292452454567, -0.00977616012096405, -0.002645928645506501, -0.017091654241085052, -0.009144366718828678, 0.01153377816081047, -0.028881948441267014, 0.020407376810908318, 0.06882264465093613, -0.004068649373948574, -0.027456853538751602, -0.00195475690998137, -0.024815674871206284, -0.01028919406235218, -0.007586261723190546, -0.03925664722919464, -0.014041947200894356, 0.002786062890663743, -0.01959032192826271, 0.016455110162496567, -0.0020426379051059484, -0.012939873151481152, 0.04210684075951576, -0.038914624601602554, 0.025613728910684586, 0.015600052662193775, -0.006351178511977196, 0.03940865769982338, 0.021148426458239555, -0.009690653532743454, -0.0473891980946064, -0.002515294821932912, -0.025841744616627693, -0.016749629750847816, 0.012369834817945957], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:34:10,767 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,767 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,768 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.158s]
2025-08-01 00:34:10,768 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.158s]
2025-08-01 00:34:10,876 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,876 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,876 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.085s]
2025-08-01 00:34:10,876 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.085s]
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=10000, 返回=40
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=10000, 返回=40
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:34:10,894 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:34:10,894 rag.components.base DEBUG:   1. ID=doc_1753774432664375_30479dce, Score=7.2780, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG:   1. ID=doc_1753774432664375_30479dce, Score=7.2780, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG:   2. ID=doc_1753772249816965_3bf29d36, Score=7.1040, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG:   2. ID=doc_1753772249816965_3bf29d36, Score=7.1040, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG:   3. ID=doc_1753774357676094_d0e7e8f4, Score=6.9314, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG:   3. ID=doc_1753774357676094_d0e7e8f4, Score=6.9314, chunk_level=0
2025-08-01 00:34:10,894 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:34:10,894 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:34:10,894 rag.components.base DEBUG:   1. ID=doc_1753772645724556_0e91bf6b, Score=0.8058, chunk_level=2
2025-08-01 00:34:10,894 rag.components.base DEBUG:   1. ID=doc_1753772645724556_0e91bf6b, Score=0.8058, chunk_level=2
2025-08-01 00:34:10,894 rag.components.base DEBUG:   2. ID=doc_1753774482854805_dfcfb0f2, Score=0.8014, chunk_level=2
2025-08-01 00:34:10,894 rag.components.base DEBUG:   2. ID=doc_1753774482854805_dfcfb0f2, Score=0.8014, chunk_level=2
2025-08-01 00:34:10,895 rag.components.base DEBUG:   3. ID=doc_1753772001962530_8e7bee8e, Score=0.7959, chunk_level=2
2025-08-01 00:34:10,895 rag.components.base DEBUG:   3. ID=doc_1753772001962530_8e7bee8e, Score=0.7959, chunk_level=2
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753774432664375_30479dce 的高亮信息: {'content': ['当查询<em>的</em>VRU没有进行CPU和内存资源配额时，该VRU<em>的</em>CPU相对<em>使用</em>率、CPU绝对<em>使用</em>率、内存<em>使用</em>量和内存<em>使用</em>率显示为"N/A"。\n具体查询方式：\n* 当指定VRU名称时，该命令查询指定VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。\n* 当指定VRU类型时，该命令查询指定类型下<em>的</em>所有VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。', 'MEMUSEDRATIO | 内存<em>使用</em>率（%） | 参数可选性: 必选\n参数类型: 字符串\n参数范围: 0-8 | 该参数用于显示当前NF中部署<em>的</em>该VRU<em>的</em>内存<em>使用</em>率，指容器<em>的</em>内存<em>使用</em>量相对内存配额<em>的</em>百分比。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753774432664375_30479dce 的高亮信息: {'content': ['当查询<em>的</em>VRU没有进行CPU和内存资源配额时，该VRU<em>的</em>CPU相对<em>使用</em>率、CPU绝对<em>使用</em>率、内存<em>使用</em>量和内存<em>使用</em>率显示为"N/A"。\n具体查询方式：\n* 当指定VRU名称时，该命令查询指定VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。\n* 当指定VRU类型时，该命令查询指定类型下<em>的</em>所有VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。', 'MEMUSEDRATIO | 内存<em>使用</em>率（%） | 参数可选性: 必选\n参数类型: 字符串\n参数范围: 0-8 | 该参数用于显示当前NF中部署<em>的</em>该VRU<em>的</em>内存<em>使用</em>率，指容器<em>的</em>内存<em>使用</em>量相对内存配额<em>的</em>百分比。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753774432664375_30479dce 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753774432664375_30479dce 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774432664375_30479dce, 排名: 1, 分数: 7.2780, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774432664375_30479dce, 排名: 1, 分数: 7.2780, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753772249816965_3bf29d36 的高亮信息: {'content': ['当查询<em>的</em>VRU没有进行CPU和内存资源配额时，该VRU<em>的</em>CPU相对<em>使用</em>率、CPU绝对<em>使用</em>率、内存<em>使用</em>量和内存<em>使用</em>率显示为"N/A"。\n具体查询方式：\n* 当指定VRU名称时，该命令查询指定VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。\n* 当指定VRU类型时，该命令查询指定类型下<em>的</em>所有VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。', 'MEMUSEDRATIO | 内存<em>使用</em>率（%） | 参数可选性: 必选\n参数类型: 字符串\n参数范围: 0-8 | 该参数用于显示当前NF中部署<em>的</em>该VRU<em>的</em>内存<em>使用</em>率，指容器<em>的</em>内存<em>使用</em>量相对内存配额<em>的</em>百分比。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753772249816965_3bf29d36 的高亮信息: {'content': ['当查询<em>的</em>VRU没有进行CPU和内存资源配额时，该VRU<em>的</em>CPU相对<em>使用</em>率、CPU绝对<em>使用</em>率、内存<em>使用</em>量和内存<em>使用</em>率显示为"N/A"。\n具体查询方式：\n* 当指定VRU名称时，该命令查询指定VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。\n* 当指定VRU类型时，该命令查询指定类型下<em>的</em>所有VRU<em>的</em>CPU和内存资源配额和<em>使用</em>情况。', 'MEMUSEDRATIO | 内存<em>使用</em>率（%） | 参数可选性: 必选\n参数类型: 字符串\n参数范围: 0-8 | 该参数用于显示当前NF中部署<em>的</em>该VRU<em>的</em>内存<em>使用</em>率，指容器<em>的</em>内存<em>使用</em>量相对内存配额<em>的</em>百分比。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753772249816965_3bf29d36 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753772249816965_3bf29d36 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772249816965_3bf29d36, 排名: 2, 分数: 7.1040, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772249816965_3bf29d36, 排名: 2, 分数: 7.1040, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753774357676094_d0e7e8f4 的高亮信息: {'content': ['**CG容量配置**\n<em>使用</em>命令SET CAPACITY配置全局容量规划中<em>的</em>CG服务器个数。\n2. **Ga接口配置**\n<em>使用</em>命令SET LOCAL GAINFO配置本地Ga接口相关信息。\n<em>使用</em>命令ADD CGCFG配置CG服务器。\n<em>使用</em>命令ADD CGPROFILE配置CG profile。\n<em>使用</em>命令ADD CGPLMN配置某PLMN用户<em>使用</em><em>的</em>CG profile。', '<em>使用</em>命令SET SINGLE ADDR配置本端单地址。\n<em>使用</em>命令SET CDR NODEID配置话单NODE ID。\n3. **计费模板配置**\n<em>使用</em>命令ADD APNCTPL配置APN计费模板。\n<em>使用</em>命令SET APNCTPL RATE，配置计费模板<em>的</em>费率时段。\n<em>使用</em>命令ADD GPRS APN，配置APN对应<em>的</em>计费模板。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753774357676094_d0e7e8f4 的高亮信息: {'content': ['**CG容量配置**\n<em>使用</em>命令SET CAPACITY配置全局容量规划中<em>的</em>CG服务器个数。\n2. **Ga接口配置**\n<em>使用</em>命令SET LOCAL GAINFO配置本地Ga接口相关信息。\n<em>使用</em>命令ADD CGCFG配置CG服务器。\n<em>使用</em>命令ADD CGPROFILE配置CG profile。\n<em>使用</em>命令ADD CGPLMN配置某PLMN用户<em>使用</em><em>的</em>CG profile。', '<em>使用</em>命令SET SINGLE ADDR配置本端单地址。\n<em>使用</em>命令SET CDR NODEID配置话单NODE ID。\n3. **计费模板配置**\n<em>使用</em>命令ADD APNCTPL配置APN计费模板。\n<em>使用</em>命令SET APNCTPL RATE，配置计费模板<em>的</em>费率时段。\n<em>使用</em>命令ADD GPRS APN，配置APN对应<em>的</em>计费模板。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753774357676094_d0e7e8f4 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753774357676094_d0e7e8f4 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774357676094_d0e7e8f4, 排名: 3, 分数: 6.9314, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774357676094_d0e7e8f4, 排名: 3, 分数: 6.9314, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753773075828131_9bb2302f 的高亮信息: {'content': ['| 该参数用于显示系统中加载<em>的</em>License受控项<em>的</em>服务类型。\nITEMID | 受控项ID | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项标识，供系统内部<em>使用</em>。\nITEMNAME | 受控项名称 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项名称，即具体<em>的</em>功能或者性能指标名称。', 'CURVAL | 实际<em>使用</em>量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务实际<em>使用</em>量。\nCFGVAL | 可<em>使用</em>总量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务可<em>使用</em>总量,公式为(授权量*（1-超期递减比例(%)*License受控项过期月数/100）)。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753773075828131_9bb2302f 的高亮信息: {'content': ['| 该参数用于显示系统中加载<em>的</em>License受控项<em>的</em>服务类型。\nITEMID | 受控项ID | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项标识，供系统内部<em>使用</em>。\nITEMNAME | 受控项名称 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项名称，即具体<em>的</em>功能或者性能指标名称。', 'CURVAL | 实际<em>使用</em>量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务实际<em>使用</em>量。\nCFGVAL | 可<em>使用</em>总量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务可<em>使用</em>总量,公式为(授权量*（1-超期递减比例(%)*License受控项过期月数/100）)。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753773075828131_9bb2302f 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🎯 文档 doc_1753773075828131_9bb2302f 提取的匹配词: {}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773075828131_9bb2302f, 排名: 4, 分数: 6.9205, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773075828131_9bb2302f, 排名: 4, 分数: 6.9205, 命中词: 无
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753772347170463_b78a08d7 的高亮信息: {'content': ['| 该参数用于显示系统中加载<em>的</em>License受控项<em>的</em>服务类型。\nITEMID | 受控项ID | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项标识，供系统内部<em>使用</em>。\nITEMNAME | 受控项名称 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项名称，即具体<em>的</em>功能或者性能指标名称。', 'CURVAL | 实际<em>使用</em>量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务实际<em>使用</em>量。\nCFGVAL | 可<em>使用</em>总量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务可<em>使用</em>总量,公式为(授权量*（1-超期递减比例(%)*License受控项过期月数/100）)。']}
2025-08-01 00:34:10,895 rag.components.base DEBUG: 🔍 文档 doc_1753772347170463_b78a08d7 的高亮信息: {'content': ['| 该参数用于显示系统中加载<em>的</em>License受控项<em>的</em>服务类型。\nITEMID | 受控项ID | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项标识，供系统内部<em>使用</em>。\nITEMNAME | 受控项名称 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示系统中加载<em>的</em>License受控项名称，即具体<em>的</em>功能或者性能指标名称。', 'CURVAL | 实际<em>使用</em>量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务实际<em>使用</em>量。\nCFGVAL | 可<em>使用</em>总量 | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务可<em>使用</em>总量,公式为(授权量*（1-超期递减比例(%)*License受控项过期月数/100）)。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772347170463_b78a08d7 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772347170463_b78a08d7 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772347170463_b78a08d7, 排名: 5, 分数: 6.9205, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772347170463_b78a08d7, 排名: 5, 分数: 6.9205, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773539799598_10c91b1f 的高亮信息: {'content': ['如果没有收到UE<em>的</em>寻呼响应，MME优先按照Old GUTI+用户签约<em>的</em>CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应<em>的</em>eNodeB，<em>使用</em>GUTI寻呼用户。\n6. 如果eNodeB收到MME<em>的</em>寻呼消息，eNodeB<em>使用</em>GUTI寻呼用户，如果收到UE<em>的</em>寻呼响应，寻呼流程成功，寻呼流程结束。\n7.', '如果没有收到UE<em>的</em>寻呼响应，MME优先按照New GUTI+用户签约<em>的</em>CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应<em>的</em>eNodeB，<em>使用</em>GUTI寻呼用户。\n8. 如果eNodeB收到MME<em>的</em>寻呼消息，eNodeB<em>使用</em>GUTI寻呼用户，如果收到UE<em>的</em>寻呼响应，寻呼流程成功，寻呼流程结束。\n9.']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773539799598_10c91b1f 的高亮信息: {'content': ['如果没有收到UE<em>的</em>寻呼响应，MME优先按照Old GUTI+用户签约<em>的</em>CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应<em>的</em>eNodeB，<em>使用</em>GUTI寻呼用户。\n6. 如果eNodeB收到MME<em>的</em>寻呼消息，eNodeB<em>使用</em>GUTI寻呼用户，如果收到UE<em>的</em>寻呼响应，寻呼流程成功，寻呼流程结束。\n7.', '如果没有收到UE<em>的</em>寻呼响应，MME优先按照New GUTI+用户签约<em>的</em>CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应<em>的</em>eNodeB，<em>使用</em>GUTI寻呼用户。\n8. 如果eNodeB收到MME<em>的</em>寻呼消息，eNodeB<em>使用</em>GUTI寻呼用户，如果收到UE<em>的</em>寻呼响应，寻呼流程成功，寻呼流程结束。\n9.']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773539799598_10c91b1f 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773539799598_10c91b1f 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539799598_10c91b1f, 排名: 6, 分数: 6.9060, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539799598_10c91b1f, 排名: 6, 分数: 6.9060, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773814820687_241a9b08 的高亮信息: {'content': ['# EPC扩展APN配置\n## 背景知识\n运营商在部署PGW时，有可能需要考虑用户<em>的</em>号码和签约计费特性等因素，在APN NI中扩展这些用户信息，可以为运营商提供更准确<em>的</em>APN选择PGW<em>的</em>策略。\n## 功能描述\nMME在进行PGW选择时，根据配置<em>的</em>扩展方法对APN NI进行扩展，然后用扩展后<em>的</em>APN NI来构造APN获取服务<em>的</em>PGW。', '注意事项：\n软件参数“APN扩展号码类型”（ID：786565），控制APN扩展<em>使用</em><em>的</em>号码类型，软件参数取值为0，则<em>使用</em>IMSI扩展APN；取值为1，则<em>使用</em>MSISDN扩展APN。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773814820687_241a9b08 的高亮信息: {'content': ['# EPC扩展APN配置\n## 背景知识\n运营商在部署PGW时，有可能需要考虑用户<em>的</em>号码和签约计费特性等因素，在APN NI中扩展这些用户信息，可以为运营商提供更准确<em>的</em>APN选择PGW<em>的</em>策略。\n## 功能描述\nMME在进行PGW选择时，根据配置<em>的</em>扩展方法对APN NI进行扩展，然后用扩展后<em>的</em>APN NI来构造APN获取服务<em>的</em>PGW。', '注意事项：\n软件参数“APN扩展号码类型”（ID：786565），控制APN扩展<em>使用</em><em>的</em>号码类型，软件参数取值为0，则<em>使用</em>IMSI扩展APN；取值为1，则<em>使用</em>MSISDN扩展APN。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773814820687_241a9b08 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773814820687_241a9b08 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773814820687_241a9b08, 排名: 7, 分数: 6.8989, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773814820687_241a9b08, 排名: 7, 分数: 6.8989, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753772680889496_5a797d4b 的高亮信息: {'content': ['**process** | 配置优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例。\n＜ _OSPF process ID_ ＞ | 优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例号。OSPF协议<em>的</em>范围为1~65535。\n**area** | 配置优先<em>使用</em><em>的</em>OSPF协议<em>的</em>区域。\n＜ _OSPF area ID_ ＞ | 区域标识符。范围为0.0.0.0~ff.ff.ff.ff。\n**isis** | 优先<em>使用</em>ISIS协议进行CSPF算路。', '**process** | 配置优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例。\n＜ _ISIS process ID_ ＞ | 优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例号。ISIS协议<em>的</em>范围为0~65535。\n**level-1** | 优先<em>使用</em>处于level-1区域<em>的</em>路径。\n**level-2** | 优先<em>使用</em>处于level-2区域<em>的</em>路径。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753772680889496_5a797d4b 的高亮信息: {'content': ['**process** | 配置优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例。\n＜ _OSPF process ID_ ＞ | 优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例号。OSPF协议<em>的</em>范围为1~65535。\n**area** | 配置优先<em>使用</em><em>的</em>OSPF协议<em>的</em>区域。\n＜ _OSPF area ID_ ＞ | 区域标识符。范围为0.0.0.0~ff.ff.ff.ff。\n**isis** | 优先<em>使用</em>ISIS协议进行CSPF算路。', '**process** | 配置优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例。\n＜ _ISIS process ID_ ＞ | 优先<em>使用</em><em>的</em>IGP协议<em>的</em>实例号。ISIS协议<em>的</em>范围为0~65535。\n**level-1** | 优先<em>使用</em>处于level-1区域<em>的</em>路径。\n**level-2** | 优先<em>使用</em>处于level-2区域<em>的</em>路径。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772680889496_5a797d4b 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772680889496_5a797d4b 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772680889496_5a797d4b, 排名: 8, 分数: 6.8972, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772680889496_5a797d4b, 排名: 8, 分数: 6.8972, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['通常应用于异地迁移虚拟机<em>的</em>场景，比如把虚拟机从新型号CPU<em>的</em>服务器往旧型号CPU<em>的</em>服务器上迁移时，需要通过本参数来指定虚拟机所<em>使用</em><em>的</em>CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在<em>使用</em>SR-IOV网卡部署虚机<em>的</em>场景才涉及到该参数<em>的</em>配置。hw:numa_nodes是用于指定虚机<em>使用</em><em>的</em>NUMA节点数。', '该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，不存在碎片，虚机<em>使用</em>时，会在性能上有所提高。\n* null：表示不<em>使用</em>该参数功能。\n* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* large：选择<em>使用</em>巨页。\n* small：选择<em>使用</em>小页。\n* 1G页面：选择<em>使用</em>1G<em>的</em>页面。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['通常应用于异地迁移虚拟机<em>的</em>场景，比如把虚拟机从新型号CPU<em>的</em>服务器往旧型号CPU<em>的</em>服务器上迁移时，需要通过本参数来指定虚拟机所<em>使用</em><em>的</em>CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在<em>使用</em>SR-IOV网卡部署虚机<em>的</em>场景才涉及到该参数<em>的</em>配置。hw:numa_nodes是用于指定虚机<em>使用</em><em>的</em>NUMA节点数。', '该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，不存在碎片，虚机<em>使用</em>时，会在性能上有所提高。\n* null：表示不<em>使用</em>该参数功能。\n* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* large：选择<em>使用</em>巨页。\n* small：选择<em>使用</em>小页。\n* 1G页面：选择<em>使用</em>1G<em>的</em>页面。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 9, 分数: 6.8346, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 9, 分数: 6.8346, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753772301361176_270faeab 的高亮信息: {'content': ['，用户<em>的</em>带宽不同，RCP需为用户尽量提供允许<em>的</em>最高<em>的</em>带宽。', '* 套餐1每月<em>使用</em>流量 <= 签约值时，调整套餐1<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。\n* 套餐1每月<em>使用</em>流量 > 签约值，并且套餐2每月<em>使用</em>流量 <= 签约值时，调整套餐2<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。\n* 套餐1每月<em>使用</em>流量 > 签约值，并且套餐2每月<em>使用</em>流量 > 签约值时，调整套餐1<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753772301361176_270faeab 的高亮信息: {'content': ['，用户<em>的</em>带宽不同，RCP需为用户尽量提供允许<em>的</em>最高<em>的</em>带宽。', '* 套餐1每月<em>使用</em>流量 <= 签约值时，调整套餐1<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。\n* 套餐1每月<em>使用</em>流量 > 签约值，并且套餐2每月<em>使用</em>流量 <= 签约值时，调整套餐2<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。\n* 套餐1每月<em>使用</em>流量 > 签约值，并且套餐2每月<em>使用</em>流量 > 签约值时，调整套餐1<em>的</em>优先级为最高优先级11；条件不满足时，优先级恢复为1。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772301361176_270faeab 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753772301361176_270faeab 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772301361176_270faeab, 排名: 10, 分数: 6.7619, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772301361176_270faeab, 排名: 10, 分数: 6.7619, 命中词: 无
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773509105970_78a3be18 的高亮信息: {'content': ['ZXUN uMAC-MME| TCP：[51000, 59199]| DNS-Server| TCP：53| DNS| 用于MME网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>TCP协议。', 'GPRS Protocol, 基站子系统GPRS协议)| 用于SGSN网元和BSC网元<em>的</em>Gb接口，<em>使用</em>BSSGP协议，NS提供了透明<em>的</em>非确认<em>的</em>信令传送通道。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🔍 文档 doc_1753773509105970_78a3be18 的高亮信息: {'content': ['ZXUN uMAC-MME| TCP：[51000, 59199]| DNS-Server| TCP：53| DNS| 用于MME网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>TCP协议。', 'GPRS Protocol, 基站子系统GPRS协议)| 用于SGSN网元和BSC网元<em>的</em>Gb接口，<em>使用</em>BSSGP协议，NS提供了透明<em>的</em>非确认<em>的</em>信令传送通道。']}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773509105970_78a3be18 提取的匹配词: {}
2025-08-01 00:34:10,896 rag.components.base DEBUG: 🎯 文档 doc_1753773509105970_78a3be18 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773509105970_78a3be18, 排名: 11, 分数: 6.7117, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773509105970_78a3be18, 排名: 11, 分数: 6.7117, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773829746586_c603b73b 的高亮信息: {'content': ['* <em>使用</em><em>的</em>RFSP：是指MME根据本地<em>的</em>RFSP策略配置数据，比较本地RFSP和签约RFSP，从中选择一个做为下发给eNodeB<em>的</em>RFSP。\n在下述场景下，可以<em>使用</em>RFSP策略：\n* 对不同用户，<em>使用</em>不同<em>的</em>频率频段，比如对漫游用户，<em>使用</em>FDD（Frequency Division Duplex，频分双工）频段，对其他用户，<em>使用</em>TDD（Time Division Duplex，时分双工）频段。', '说明：\nMME是否投递<em>使用</em><em>的</em>RFSP给eNodeB，可以通过RFSP配置策略控制，如果MME获取<em>的</em><em>使用</em>RFSP值为0，则表示不投递<em>使用</em><em>的</em>RFSP给eNodeB。\n默认配置中MME不携带<em>使用</em>RFSP给eNodeB。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773829746586_c603b73b 的高亮信息: {'content': ['* <em>使用</em><em>的</em>RFSP：是指MME根据本地<em>的</em>RFSP策略配置数据，比较本地RFSP和签约RFSP，从中选择一个做为下发给eNodeB<em>的</em>RFSP。\n在下述场景下，可以<em>使用</em>RFSP策略：\n* 对不同用户，<em>使用</em>不同<em>的</em>频率频段，比如对漫游用户，<em>使用</em>FDD（Frequency Division Duplex，频分双工）频段，对其他用户，<em>使用</em>TDD（Time Division Duplex，时分双工）频段。', '说明：\nMME是否投递<em>使用</em><em>的</em>RFSP给eNodeB，可以通过RFSP配置策略控制，如果MME获取<em>的</em><em>使用</em>RFSP值为0，则表示不投递<em>使用</em><em>的</em>RFSP给eNodeB。\n默认配置中MME不携带<em>使用</em>RFSP给eNodeB。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773829746586_c603b73b 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773829746586_c603b73b 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773829746586_c603b73b, 排名: 12, 分数: 6.6316, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773829746586_c603b73b, 排名: 12, 分数: 6.6316, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773075827972_503282c0 的高亮信息: {'content': ['| 该参数用于显示数值型License受控项在License文件中<em>的</em>授权量。\nUSAGE | <em>使用</em>率(%) | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务<em>使用</em>率(%)，公式为((实际<em>使用</em>量/可<em>使用</em>总量)*100)。', '## 命令举例\n查询License<em>使用</em>情况\nSHOW LICUSAGE\nSHOW LICUSAGE\n-----------------i5GC_5GC_33----------------\n服务类型  受控项ID                        受控项名称                                   实际<em>使用</em>量  可<em>使用</em>总量  授权量  <em>使用</em>率(%)\n-----']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773075827972_503282c0 的高亮信息: {'content': ['| 该参数用于显示数值型License受控项在License文件中<em>的</em>授权量。\nUSAGE | <em>使用</em>率(%) | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务<em>使用</em>率(%)，公式为((实际<em>使用</em>量/可<em>使用</em>总量)*100)。', '## 命令举例\n查询License<em>使用</em>情况\nSHOW LICUSAGE\nSHOW LICUSAGE\n-----------------i5GC_5GC_33----------------\n服务类型  受控项ID                        受控项名称                                   实际<em>使用</em>量  可<em>使用</em>总量  授权量  <em>使用</em>率(%)\n-----']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773075827972_503282c0 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773075827972_503282c0 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773075827972_503282c0, 排名: 13, 分数: 6.6100, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773075827972_503282c0, 排名: 13, 分数: 6.6100, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753772347170264_0b1929b8 的高亮信息: {'content': ['| 该参数用于显示数值型License受控项在License文件中<em>的</em>授权量。\nUSAGE | <em>使用</em>率(%) | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务<em>使用</em>率(%)，公式为((实际<em>使用</em>量/可<em>使用</em>总量)*100)。', '## 命令举例\n查询License<em>使用</em>情况\nSHOW LICUSAGE\nSHOW LICUSAGE\n-----------------i5GC_5GC_33----------------\n服务类型  受控项ID                        受控项名称                                   实际<em>使用</em>量  可<em>使用</em>总量  授权量  <em>使用</em>率(%)\n-----']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753772347170264_0b1929b8 的高亮信息: {'content': ['| 该参数用于显示数值型License受控项在License文件中<em>的</em>授权量。\nUSAGE | <em>使用</em>率(%) | 参数可选性:任选参数；参数类型:字符型。 | 该参数用于显示数值型License受控项<em>的</em>业务<em>使用</em>率(%)，公式为((实际<em>使用</em>量/可<em>使用</em>总量)*100)。', '## 命令举例\n查询License<em>使用</em>情况\nSHOW LICUSAGE\nSHOW LICUSAGE\n-----------------i5GC_5GC_33----------------\n服务类型  受控项ID                        受控项名称                                   实际<em>使用</em>量  可<em>使用</em>总量  授权量  <em>使用</em>率(%)\n-----']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753772347170264_0b1929b8 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753772347170264_0b1929b8 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772347170264_0b1929b8, 排名: 14, 分数: 6.6100, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772347170264_0b1929b8, 排名: 14, 分数: 6.6100, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773450527296_3b116786 的高亮信息: {'content': ['数据来源： 本端规划 默认值：90 配置原则：无\nlevel2value | 二级告警门限值(%) | 参数可选性: 任选\n参数类型: 数字\n参数范围: 0-100\n默认值: 80 | 参数作用：本参数用于设置缺省动态资源<em>使用</em>率<em>的</em>告警二级上报门限值。动态资源<em>使用</em>率达到该门限后，将会上报对应<em>的</em>动态资源<em>使用</em>率二级告警。', '数据来源： 本端规划 默认值：80 配置原则：无\nlevel3value | 三级告警门限值(%) | 参数可选性: 任选\n参数类型: 数字\n参数范围: 0-100\n默认值: 70 | 参数作用：本参数用于设置缺省动态资源<em>使用</em>率<em>的</em>告警三级上报门限值。动态资源<em>使用</em>率达到该门限后，将会上报对应<em>的</em>动态资源<em>使用</em>率三级告警。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753773450527296_3b116786 的高亮信息: {'content': ['数据来源： 本端规划 默认值：90 配置原则：无\nlevel2value | 二级告警门限值(%) | 参数可选性: 任选\n参数类型: 数字\n参数范围: 0-100\n默认值: 80 | 参数作用：本参数用于设置缺省动态资源<em>使用</em>率<em>的</em>告警二级上报门限值。动态资源<em>使用</em>率达到该门限后，将会上报对应<em>的</em>动态资源<em>使用</em>率二级告警。', '数据来源： 本端规划 默认值：80 配置原则：无\nlevel3value | 三级告警门限值(%) | 参数可选性: 任选\n参数类型: 数字\n参数范围: 0-100\n默认值: 70 | 参数作用：本参数用于设置缺省动态资源<em>使用</em>率<em>的</em>告警三级上报门限值。动态资源<em>使用</em>率达到该门限后，将会上报对应<em>的</em>动态资源<em>使用</em>率三级告警。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773450527296_3b116786 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753773450527296_3b116786 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773450527296_3b116786, 排名: 15, 分数: 6.6080, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773450527296_3b116786, 排名: 15, 分数: 6.6080, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753771920475185_77b906e3 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753771920475185_77b906e3 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753771920475185_77b906e3 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753771920475185_77b906e3 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771920475185_77b906e3, 排名: 16, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771920475185_77b906e3, 排名: 16, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753771906804943_7882e08d 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🔍 文档 doc_1753771906804943_7882e08d 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753771906804943_7882e08d 提取的匹配词: {}
2025-08-01 00:34:10,897 rag.components.base DEBUG: 🎯 文档 doc_1753771906804943_7882e08d 提取的匹配词: {}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906804943_7882e08d, 排名: 17, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,898 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906804943_7882e08d, 排名: 17, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🔍 文档 doc_1753771906808689_52df6715 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🔍 文档 doc_1753771906808689_52df6715 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', 'TDF网元和RCP网元间<em>使用</em>TDF应用标识来表示需要TDF网元探测<em>的</em>业务。']}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🎯 文档 doc_1753771906808689_52df6715 提取的匹配词: {}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🎯 文档 doc_1753771906808689_52df6715 提取的匹配词: {}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906808689_52df6715, 排名: 18, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,898 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906808689_52df6715, 排名: 18, 分数: 6.5985, 命中词: 无
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['在<em>使用</em>SR-IOV网卡部署虚机<em>的</em>场景才涉及到该参数<em>的</em>配置。hw:numa_nodes是用于指定虚机<em>使用</em><em>的</em>NUMA节点数。hw:numa_nodes<em>的</em>取值表示不大于计算节点<em>的</em>NUMA节点个数<em>的</em>整数。\n* hw:numa_nodes取值为null：表示不<em>使用</em>该参数功能。\n* hw:numa_nodes取值为1：表示虚机<em>使用</em><em>的</em>CPU及内存分配在同一NUMA节点上。', '* hw:numa_nodes取值为2：表示虚机<em>使用</em><em>的</em>CPU及内存分配在2个不同<em>的</em>NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，不存在碎片，虚机<em>使用</em>时，会在性能上有所提高。配置原则如下：\n* null：表示不<em>使用</em>该参数功能。']}
2025-08-01 00:34:10,898 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['在<em>使用</em>SR-IOV网卡部署虚机<em>的</em>场景才涉及到该参数<em>的</em>配置。hw:numa_nodes是用于指定虚机<em>使用</em><em>的</em>NUMA节点数。hw:numa_nodes<em>的</em>取值表示不大于计算节点<em>的</em>NUMA节点个数<em>的</em>整数。\n* hw:numa_nodes取值为null：表示不<em>使用</em>该参数功能。\n* hw:numa_nodes取值为1：表示虚机<em>使用</em><em>的</em>CPU及内存分配在同一NUMA节点上。', '* hw:numa_nodes取值为2：表示虚机<em>使用</em><em>的</em>CPU及内存分配在2个不同<em>的</em>NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，不存在碎片，虚机<em>使用</em>时，会在性能上有所提高。配置原则如下：\n* null：表示不<em>使用</em>该参数功能。']}
2025-08-01 00:34:10,901 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:34:10,901 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:34:10,901 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 19, 分数: 6.5664, 命中词: 无
2025-08-01 00:34:10,901 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 19, 分数: 6.5664, 命中词: 无
2025-08-01 00:34:10,901 rag.components.base DEBUG: 🔍 文档 doc_1753772737179459_b35a63c7 的高亮信息: {'content': ['<em>使用</em>说明\n命令带组名为显示指定组下<em>的</em>资源<em>使用</em>情况信息。不带组名为显示全局统计信息以及所有组<em>的</em>资源<em>使用</em>情况<em>的</em>逐个显示。详见范例及说明。\n范例\n1\\.', '显示RADIUS所有认证组<em>的</em>资源<em>使用</em>情况：']}
2025-08-01 00:34:10,901 rag.components.base DEBUG: 🔍 文档 doc_1753772737179459_b35a63c7 的高亮信息: {'content': ['<em>使用</em>说明\n命令带组名为显示指定组下<em>的</em>资源<em>使用</em>情况信息。不带组名为显示全局统计信息以及所有组<em>的</em>资源<em>使用</em>情况<em>的</em>逐个显示。详见范例及说明。\n范例\n1\\.', '显示RADIUS所有认证组<em>的</em>资源<em>使用</em>情况：']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753772737179459_b35a63c7 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753772737179459_b35a63c7 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772737179459_b35a63c7, 排名: 20, 分数: 6.5616, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772737179459_b35a63c7, 排名: 20, 分数: 6.5616, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753773543373444_acaba2cd 的高亮信息: {'content': ['当出现该值时，应指示该URR在监控时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>流量值。\nSubsequent Time Threshold| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>基于时间<em>的</em>测量，则可能存在该IE。当出现时，应指示在监视时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>时间<em>使用</em>情况。', 'Subsequent Volume Quota| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>了基于流量<em>的</em>测量，则可能存在该IE。当出现时，它应指示用户面网元在监视时间之后<em>的</em>一段时间内<em>使用</em>该URR所<em>使用</em><em>的</em>流量配额值。']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753773543373444_acaba2cd 的高亮信息: {'content': ['当出现该值时，应指示该URR在监控时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>流量值。\nSubsequent Time Threshold| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>基于时间<em>的</em>测量，则可能存在该IE。当出现时，应指示在监视时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>时间<em>使用</em>情况。', 'Subsequent Volume Quota| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>了基于流量<em>的</em>测量，则可能存在该IE。当出现时，它应指示用户面网元在监视时间之后<em>的</em>一段时间内<em>使用</em>该URR所<em>使用</em><em>的</em>流量配额值。']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753773543373444_acaba2cd 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753773543373444_acaba2cd 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773543373444_acaba2cd, 排名: 21, 分数: 6.5507, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773543373444_acaba2cd, 排名: 21, 分数: 6.5507, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753771715197942_f2379376 的高亮信息: {'content': ['当出现该值时，应指示该URR在监控时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>流量值。\nSubsequent Time Threshold| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>基于时间<em>的</em>测量，则可能存在该IE。当出现时，应指示在监视时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>时间<em>使用</em>情况。', 'Subsequent Volume Quota| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>了基于流量<em>的</em>测量，则可能存在该IE。当出现时，它应指示用户面网元在监视时间之后<em>的</em>一段时间内<em>使用</em>该URR所<em>使用</em><em>的</em>流量配额值。']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753771715197942_f2379376 的高亮信息: {'content': ['当出现该值时，应指示该URR在监控时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>流量值。\nSubsequent Time Threshold| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>基于时间<em>的</em>测量，则可能存在该IE。当出现时，应指示在监视时间之后<em>的</em>一段时间内，用户面网元向控制面网元上报网络资源<em>使用</em>情况<em>的</em>时间<em>使用</em>情况。', 'Subsequent Volume Quota| Optional| 如果存在Monitoring Time IE，并且<em>使用</em>了基于流量<em>的</em>测量，则可能存在该IE。当出现时，它应指示用户面网元在监视时间之后<em>的</em>一段时间内<em>使用</em>该URR所<em>使用</em><em>的</em>流量配额值。']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753771715197942_f2379376 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🎯 文档 doc_1753771715197942_f2379376 提取的匹配词: {}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771715197942_f2379376, 排名: 22, 分数: 6.5507, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771715197942_f2379376, 排名: 22, 分数: 6.5507, 命中词: 无
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753771906804968_ff8c28ef 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', '<em>使用</em>属性"TDFAPPID"，表示TDF应用标识。该策略变量表示指定TDF业务发生<em>的</em>实例个数。根据TDF业务发生<em>的</em>实例数，运营商可以调整该TDF业务<em>的</em>QoS参数。通过ADD TDFAPP指定TDF业务<em>的</em>应用标识。\n* SVC_USG_STATE（业务配额状态）：数值型，范围0~255，<em>使用</em>属性"PKGID"，表示套餐标识。']}
2025-08-01 00:34:10,902 rag.components.base DEBUG: 🔍 文档 doc_1753771906804968_ff8c28ef 的高亮信息: {'content': ['该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。\n* NUM_PCID_STATUS_SYEXT（数值型策略计数状态(Sy+)）：数值型，范围0~4294967295。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。', '<em>使用</em>属性"TDFAPPID"，表示TDF应用标识。该策略变量表示指定TDF业务发生<em>的</em>实例个数。根据TDF业务发生<em>的</em>实例数，运营商可以调整该TDF业务<em>的</em>QoS参数。通过ADD TDFAPP指定TDF业务<em>的</em>应用标识。\n* SVC_USG_STATE（业务配额状态）：数值型，范围0~255，<em>使用</em>属性"PKGID"，表示套餐标识。']}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753771906804968_ff8c28ef 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753771906804968_ff8c28ef 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906804968_ff8c28ef, 排名: 23, 分数: 6.5445, 命中词: 无
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771906804968_ff8c28ef, 排名: 23, 分数: 6.5445, 命中词: 无
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🔍 文档 doc_1753772441285046_c4190d3f 的高亮信息: {'content': ['当需要对特定<em>的</em>HTTP请求<em>使用</em>指定<em>的</em>代理主机，或者对特定<em>的</em>HTTP请求不<em>使用</em>代理主机时，执行该命令。命令执行成功后，本网元会根据代理匹配规则<em>的</em>匹配结果发送HTTP请求。\n## 注意事项\n新增代理匹配规则时，注意检查以下内容：\n* IP/Prefix规则<em>的</em>合法性。\n* 当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置（SHOW PROXYHOST）中存在。', 'RULE_TYPE | 规则类型 | 参数可选性: 必选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。']}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🔍 文档 doc_1753772441285046_c4190d3f 的高亮信息: {'content': ['当需要对特定<em>的</em>HTTP请求<em>使用</em>指定<em>的</em>代理主机，或者对特定<em>的</em>HTTP请求不<em>使用</em>代理主机时，执行该命令。命令执行成功后，本网元会根据代理匹配规则<em>的</em>匹配结果发送HTTP请求。\n## 注意事项\n新增代理匹配规则时，注意检查以下内容：\n* IP/Prefix规则<em>的</em>合法性。\n* 当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置（SHOW PROXYHOST）中存在。', 'RULE_TYPE | 规则类型 | 参数可选性: 必选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。']}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753772441285046_c4190d3f 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753772441285046_c4190d3f 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772441285046_c4190d3f, 排名: 24, 分数: 6.5312, 命中词: 无
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772441285046_c4190d3f, 排名: 24, 分数: 6.5312, 命中词: 无
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🔍 文档 doc_1753774671371079_57445cc0 的高亮信息: {'content': ['当需要对特定<em>的</em>HTTP请求<em>使用</em>指定<em>的</em>代理主机，或者对特定<em>的</em>HTTP请求不<em>使用</em>代理主机时，执行该命令。命令执行成功后，本网元会根据代理匹配规则<em>的</em>匹配结果发送HTTP请求。\n## 注意事项\n新增代理匹配规则时，注意检查以下内容：\n* IP/Prefix规则<em>的</em>合法性。\n* 当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置（SHOW PROXYHOST）中存在。', 'RULE_TYPE | 规则类型 | 参数可选性: 必选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。']}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🔍 文档 doc_1753774671371079_57445cc0 的高亮信息: {'content': ['当需要对特定<em>的</em>HTTP请求<em>使用</em>指定<em>的</em>代理主机，或者对特定<em>的</em>HTTP请求不<em>使用</em>代理主机时，执行该命令。命令执行成功后，本网元会根据代理匹配规则<em>的</em>匹配结果发送HTTP请求。\n## 注意事项\n新增代理匹配规则时，注意检查以下内容：\n* IP/Prefix规则<em>的</em>合法性。\n* 当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置（SHOW PROXYHOST）中存在。', 'RULE_TYPE | 规则类型 | 参数可选性: 必选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。']}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753774671371079_57445cc0 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 🎯 文档 doc_1753774671371079_57445cc0 提取的匹配词: {}
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774671371079_57445cc0, 排名: 25, 分数: 6.5312, 命中词: 无
2025-08-01 00:34:10,903 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774671371079_57445cc0, 排名: 25, 分数: 6.5312, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753773509105975_aa4e4439 的高亮信息: {'content': ['DNS| ZXUN uMAC-SGSN| UDP：[51000, 51024]| DNS-Server| UDP：53| DNS| 用于SGSN网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>UDP协议。', 'ZXUN uMAC-SGSN| TCP：[51000, 59199]| DNS-Server| TCP：53| DNS| 用于SGSN网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>TCP协议。']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753773509105975_aa4e4439 的高亮信息: {'content': ['DNS| ZXUN uMAC-SGSN| UDP：[51000, 51024]| DNS-Server| UDP：53| DNS| 用于SGSN网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>UDP协议。', 'ZXUN uMAC-SGSN| TCP：[51000, 59199]| DNS-Server| TCP：53| DNS| 用于SGSN网元和DNS网元<em>的</em>DNS接口，<em>使用</em>DNS<em>的</em>协议，底层<em>使用</em>TCP协议。']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753773509105975_aa4e4439 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753773509105975_aa4e4439 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773509105975_aa4e4439, 排名: 26, 分数: 6.5072, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773509105975_aa4e4439, 排名: 26, 分数: 6.5072, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753772056382386_fd2dcfab 的高亮信息: {'content': ['该策略变量表示Sy会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。\n* STR_PCID_STATUS_SYEXT（字符型策略计数状态(Sy+)）：1~32位字符串型。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。', '该策略变量表示用户签约中在用户层或套餐层对应扩展属性名称<em>的</em>扩展属性值，并将该扩展属性值作为数值型数据<em>使用</em>。\n* USER_ACCAREA_STATUS（用户接入区域状态标识）：枚举型。<em>使用</em>属性"ACCAREA"，表示用户<em>的</em>接入类型。RCP网元支持将不同接入类型<em>的</em>接入属性划分到一个区域中，每个区域<em>使用</em>一个区域接入属性表示。该策略变量表示用户当前<em>的</em>接入位置是否在指定<em>的</em>区域接入属性内。']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753772056382386_fd2dcfab 的高亮信息: {'content': ['该策略变量表示Sy会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为数值型数据<em>使用</em>。\n* STR_PCID_STATUS_SYEXT（字符型策略计数状态(Sy+)）：1~32位字符串型。<em>使用</em>属性"EXTPCID"，表示策略计数器标识。该策略变量表示Sy+会话中指定策略计数器标识<em>的</em>状态，并将该策略计数器状态<em>的</em>值作为字符型数据<em>使用</em>。', '该策略变量表示用户签约中在用户层或套餐层对应扩展属性名称<em>的</em>扩展属性值，并将该扩展属性值作为数值型数据<em>使用</em>。\n* USER_ACCAREA_STATUS（用户接入区域状态标识）：枚举型。<em>使用</em>属性"ACCAREA"，表示用户<em>的</em>接入类型。RCP网元支持将不同接入类型<em>的</em>接入属性划分到一个区域中，每个区域<em>使用</em>一个区域接入属性表示。该策略变量表示用户当前<em>的</em>接入位置是否在指定<em>的</em>区域接入属性内。']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753772056382386_fd2dcfab 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753772056382386_fd2dcfab 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772056382386_fd2dcfab, 排名: 27, 分数: 6.4879, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772056382386_fd2dcfab, 排名: 27, 分数: 6.4879, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753772737179092_ed3f0a2f 的高亮信息: {'content': ['** | 显示计费组<em>的</em>资源<em>使用</em>情况；\n＜ _group-name_ ＞ | RADIUS 认证组或者计费组组名，组名长度为1-31个字符；\n缺省\n无。', '<em>使用</em>说明\n命令带组名为显示指定组下<em>的</em>资源<em>使用</em>情况信息。不带组名为显示全局统计信息以及所有组<em>的</em>资源<em>使用</em>情况<em>的</em>逐个显示。详见范例及说明。\n范例\n1\\.']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753772737179092_ed3f0a2f 的高亮信息: {'content': ['** | 显示计费组<em>的</em>资源<em>使用</em>情况；\n＜ _group-name_ ＞ | RADIUS 认证组或者计费组组名，组名长度为1-31个字符；\n缺省\n无。', '<em>使用</em>说明\n命令带组名为显示指定组下<em>的</em>资源<em>使用</em>情况信息。不带组名为显示全局统计信息以及所有组<em>的</em>资源<em>使用</em>情况<em>的</em>逐个显示。详见范例及说明。\n范例\n1\\.']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753772737179092_ed3f0a2f 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🎯 文档 doc_1753772737179092_ed3f0a2f 提取的匹配词: {}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772737179092_ed3f0a2f, 排名: 28, 分数: 6.4783, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772737179092_ed3f0a2f, 排名: 28, 分数: 6.4783, 命中词: 无
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753773608208013_84632314 的高亮信息: {'content': ['| 该参数用于配置寻呼策略<em>的</em>用户位置因子，该索引<em>使用</em>跟踪区配置（配置命令ADD TA）中已有配置<em>的</em>TAID参数；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。\nQCI | QCI | 参数可选性:任选参数；参数类型:整数；参数范围为:0~255。 | 该参数用于配置寻呼策略<em>的</em>QCI因子；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。', '| 该参数用于配置寻呼策略<em>的</em>用户位置因子，该索引<em>使用</em>跟踪区配置（配置命令ADD TA）中已有配置<em>的</em>TAID参数；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。\nQCI | QCI | 参数可选性:任选参数；参数类型:整数。 | 该参数用于配置寻呼策略<em>的</em>QCI因子；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。']}
2025-08-01 00:34:10,904 rag.components.base DEBUG: 🔍 文档 doc_1753773608208013_84632314 的高亮信息: {'content': ['| 该参数用于配置寻呼策略<em>的</em>用户位置因子，该索引<em>使用</em>跟踪区配置（配置命令ADD TA）中已有配置<em>的</em>TAID参数；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。\nQCI | QCI | 参数可选性:任选参数；参数类型:整数；参数范围为:0~255。 | 该参数用于配置寻呼策略<em>的</em>QCI因子；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。', '| 该参数用于配置寻呼策略<em>的</em>用户位置因子，该索引<em>使用</em>跟踪区配置（配置命令ADD TA）中已有配置<em>的</em>TAID参数；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。\nQCI | QCI | 参数可选性:任选参数；参数类型:整数。 | 该参数用于配置寻呼策略<em>的</em>QCI因子；如果不需要通过当前因子选择寻呼策略，则可不<em>使用</em>该参数。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753773608208013_84632314 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753773608208013_84632314 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773608208013_84632314, 排名: 29, 分数: 6.4771, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773608208013_84632314, 排名: 29, 分数: 6.4771, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772478169297_266e6070 的高亮信息: {'content': ['当发送<em>的</em>HTTP请求无法匹配到可以<em>使用</em><em>的</em>代理匹配规则时，执行该命令添加缺省规则。命令执行成功后，无法根据代理匹配规则发送<em>的</em>HTTP请求将根据缺省规则发送。\n## 注意事项\n新增缺省代理配置时，注意检查以下内容：\n当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置中存在。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n新增缺省代理配置：编号为1，HTTP版本为HTTP2，Scheme为HTTP，执行策略为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772478169297_266e6070 的高亮信息: {'content': ['当发送<em>的</em>HTTP请求无法匹配到可以<em>使用</em><em>的</em>代理匹配规则时，执行该命令添加缺省规则。命令执行成功后，无法根据代理匹配规则发送<em>的</em>HTTP请求将根据缺省规则发送。\n## 注意事项\n新增缺省代理配置时，注意检查以下内容：\n当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置中存在。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n新增缺省代理配置：编号为1，HTTP版本为HTTP2，Scheme为HTTP，执行策略为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772478169297_266e6070 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772478169297_266e6070 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772478169297_266e6070, 排名: 30, 分数: 6.4576, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772478169297_266e6070, 排名: 30, 分数: 6.4576, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753774699363897_e531a95c 的高亮信息: {'content': ['当发送<em>的</em>HTTP请求无法匹配到可以<em>使用</em><em>的</em>代理匹配规则时，执行该命令添加缺省规则。命令执行成功后，无法根据代理匹配规则发送<em>的</em>HTTP请求将根据缺省规则发送。\n## 注意事项\n新增缺省代理配置时，注意检查以下内容：\n当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置中存在。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n新增缺省代理配置：编号为1，HTTP版本为HTTP2，Scheme为HTTP，执行策略为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753774699363897_e531a95c 的高亮信息: {'content': ['当发送<em>的</em>HTTP请求无法匹配到可以<em>使用</em><em>的</em>代理匹配规则时，执行该命令添加缺省规则。命令执行成功后，无法根据代理匹配规则发送<em>的</em>HTTP请求将根据缺省规则发送。\n## 注意事项\n新增缺省代理配置时，注意检查以下内容：\n当执行策略为<em>使用</em>代理时，代理主机编号中<em>的</em>编号必须在代理主机配置中存在。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n新增缺省代理配置：编号为1，HTTP版本为HTTP2，Scheme为HTTP，执行策略为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753774699363897_e531a95c 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753774699363897_e531a95c 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774699363897_e531a95c, 排名: 31, 分数: 6.4576, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774699363897_e531a95c, 排名: 31, 分数: 6.4576, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772478171556_5c67db84 的高亮信息: {'content': ['ACTION | 执行策略 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: USE_PROXY | 该参数用于设置此缺省代理配置匹配成功后本网元执行<em>的</em>动作，是<em>使用</em>代理主机发送请求或者不<em>使用</em>代理主机。\n* NO_PROXY：不<em>使用</em>代理主机。\n* USE_PROXY：<em>使用</em>代理主机。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n设置编号为1<em>的</em>缺省代理配置，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772478171556_5c67db84 的高亮信息: {'content': ['ACTION | 执行策略 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: USE_PROXY | 该参数用于设置此缺省代理配置匹配成功后本网元执行<em>的</em>动作，是<em>使用</em>代理主机发送请求或者不<em>使用</em>代理主机。\n* NO_PROXY：不<em>使用</em>代理主机。\n* USE_PROXY：<em>使用</em>代理主机。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n设置编号为1<em>的</em>缺省代理配置，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772478171556_5c67db84 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772478171556_5c67db84 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772478171556_5c67db84, 排名: 32, 分数: 6.4499, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772478171556_5c67db84, 排名: 32, 分数: 6.4499, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753774715075906_0064b054 的高亮信息: {'content': ['ACTION | 执行策略 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: USE_PROXY | 该参数用于设置此缺省代理配置匹配成功后本网元执行<em>的</em>动作，是<em>使用</em>代理主机发送请求或者不<em>使用</em>代理主机。\n* NO_PROXY：不<em>使用</em>代理主机。\n* USE_PROXY：<em>使用</em>代理主机。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n设置编号为1<em>的</em>缺省代理配置，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753774715075906_0064b054 的高亮信息: {'content': ['ACTION | 执行策略 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: USE_PROXY | 该参数用于设置此缺省代理配置匹配成功后本网元执行<em>的</em>动作，是<em>使用</em>代理主机发送请求或者不<em>使用</em>代理主机。\n* NO_PROXY：不<em>使用</em>代理主机。\n* USE_PROXY：<em>使用</em>代理主机。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 0-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置SHOW PROXYHOST中已经配置。\n## 命令举例\n设置编号为1<em>的</em>缺省代理配置，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为2。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753774715075906_0064b054 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753774715075906_0064b054 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774715075906_0064b054, 排名: 33, 分数: 6.4499, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774715075906_0064b054, 排名: 33, 分数: 6.4499, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772025724946_675c40cd 的高亮信息: {'content': ['* NPCF_SMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_SMPolicyControl服务。\n* NPCF_AMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_AMPolicyControl服务。\n* NPCF_UEPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_UEPolicyControl服务。', '| 该参数用于设置PCF<em>的</em>服务类型。\n* NPCF_SMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_SMPolicyControl服务。\n* NPCF_AMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_AMPolicyControl服务。\n* NPCF_UEPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_UEPolicyControl服务。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753772025724946_675c40cd 的高亮信息: {'content': ['* NPCF_SMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_SMPolicyControl服务。\n* NPCF_AMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_AMPolicyControl服务。\n* NPCF_UEPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_UEPolicyControl服务。', '| 该参数用于设置PCF<em>的</em>服务类型。\n* NPCF_SMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_SMPolicyControl服务。\n* NPCF_AMPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_AMPolicyControl服务。\n* NPCF_UEPOLICYCONTROL：表示<em>使用</em>PCF提供<em>的</em>Npcf_UEPolicyControl服务。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772025724946_675c40cd 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753772025724946_675c40cd 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772025724946_675c40cd, 排名: 34, 分数: 6.4487, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772025724946_675c40cd, 排名: 34, 分数: 6.4487, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753771716835231_4ec42efe 的高亮信息: {'content': ['配置该参数之前，需要在TECS OpenStack控制节点上，通过命令查询虚机部署<em>使用</em><em>的</em>计算节点<em>的</em>cpu信息，示例：source keystonerc_admin nova hypervisor-show Computer0102 |grep cpu_info_model Haswell\nmem_page_size参数| 该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，', '* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* small：选择<em>使用</em>小页。\n* large：选择<em>使用</em>巨页。\n* 1048576：选择<em>使用</em>1048576<em>的</em>页面。\n* 1GB：选择1GB<em>的</em>页面。\n该参数建议采用默认值**1GB** 。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🔍 文档 doc_1753771716835231_4ec42efe 的高亮信息: {'content': ['配置该参数之前，需要在TECS OpenStack控制节点上，通过命令查询虚机部署<em>使用</em><em>的</em>计算节点<em>的</em>cpu信息，示例：source keystonerc_admin nova hypervisor-show Computer0102 |grep cpu_info_model Haswell\nmem_page_size参数| 该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，', '* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* small：选择<em>使用</em>小页。\n* large：选择<em>使用</em>巨页。\n* 1048576：选择<em>使用</em>1048576<em>的</em>页面。\n* 1GB：选择1GB<em>的</em>页面。\n该参数建议采用默认值**1GB** 。']}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753771716835231_4ec42efe 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 🎯 文档 doc_1753771716835231_4ec42efe 提取的匹配词: {}
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771716835231_4ec42efe, 排名: 35, 分数: 6.4443, 命中词: 无
2025-08-01 00:34:10,905 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771716835231_4ec42efe, 排名: 35, 分数: 6.4443, 命中词: 无
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753772592232067_cf0e03d2 的高亮信息: {'content': ['配置该参数之前，需要在TECS OpenStack控制节点上，通过命令查询虚机部署<em>使用</em><em>的</em>计算节点<em>的</em>cpu信息，示例：source keystonerc_admin nova hypervisor-show Computer0102 |grep cpu_info_model Haswell\nmem_page_size参数| 该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，', '* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* small：选择<em>使用</em>小页。\n* large：选择<em>使用</em>巨页。\n* 1048576：选择<em>使用</em>1048576<em>的</em>页面。\n* 1GB：选择1GB<em>的</em>页面。\n该参数建议采用默认值**1GB** 。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753772592232067_cf0e03d2 的高亮信息: {'content': ['配置该参数之前，需要在TECS OpenStack控制节点上，通过命令查询虚机部署<em>使用</em><em>的</em>计算节点<em>的</em>cpu信息，示例：source keystonerc_admin nova hypervisor-show Computer0102 |grep cpu_info_model Haswell\nmem_page_size参数| 该参数用于设置虚机<em>使用</em><em>的</em>巨页内存<em>的</em>内存页大小，<em>使用</em>巨页内存<em>的</em>后，由于内存连续，', '* any：优先<em>使用</em>巨页，虚机可以<em>使用</em>所有类型<em>的</em>页面，按照页面大小由大到小选择，如果巨页页面不满足，则选择小页。\n* small：选择<em>使用</em>小页。\n* large：选择<em>使用</em>巨页。\n* 1048576：选择<em>使用</em>1048576<em>的</em>页面。\n* 1GB：选择1GB<em>的</em>页面。\n该参数建议采用默认值**1GB** 。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753772592232067_cf0e03d2 提取的匹配词: {}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753772592232067_cf0e03d2 提取的匹配词: {}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772592232067_cf0e03d2, 排名: 36, 分数: 6.4443, 命中词: 无
2025-08-01 00:34:10,906 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772592232067_cf0e03d2, 排名: 36, 分数: 6.4443, 命中词: 无
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753772441282799_2831917c 的高亮信息: {'content': ['RULE_TYPE | 规则类型 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 1-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置（SHOW PROXYHOST）中已经配置。\n## 命令举例\n设置编号为1<em>的</em>代理匹配规则，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为3。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753772441282799_2831917c 的高亮信息: {'content': ['RULE_TYPE | 规则类型 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 1-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置（SHOW PROXYHOST）中已经配置。\n## 命令举例\n设置编号为1<em>的</em>代理匹配规则，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为3。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753772441282799_2831917c 提取的匹配词: {}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753772441282799_2831917c 提取的匹配词: {}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772441282799_2831917c, 排名: 37, 分数: 6.4388, 命中词: 无
2025-08-01 00:34:10,906 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772441282799_2831917c, 排名: 37, 分数: 6.4388, 命中词: 无
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753774671370116_281e5209 的高亮信息: {'content': ['RULE_TYPE | 规则类型 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 1-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置（SHOW PROXYHOST）中已经配置。\n## 命令举例\n设置编号为1<em>的</em>代理匹配规则，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为3。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🔍 文档 doc_1753774671370116_281e5209 的高亮信息: {'content': ['RULE_TYPE | 规则类型 | 参数可选性: 任选\n参数类型: 枚举，参见枚举定义\n参数范围: 0-1\n默认值: IP_PREFIX | 该参数用于设置代理匹配规则<em>的</em>类型。\n* IP_PREFIX：IP/Prefix格式，<em>使用</em>IP地址加前缀（子网掩码位数）<em>的</em>格式。\n* HOSTSTRING：主机名格式，<em>使用</em>主机名<em>的</em>子字符串。', 'PROXYIDS | 代理主机编号 | 参数可选性: 任选\n参数类型: 字符串\n参数范围: 1-256 | 该参数表示发送HTTP请求<em>使用</em><em>的</em>代理主机编号，该编号必须在代理主机配置（SHOW PROXYHOST）中已经配置。\n## 命令举例\n设置编号为1<em>的</em>代理匹配规则，执行策略修改为<em>使用</em>代理，<em>使用</em><em>的</em>代理主机编号修改为3。']}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753774671370116_281e5209 提取的匹配词: {}
2025-08-01 00:34:10,906 rag.components.base DEBUG: 🎯 文档 doc_1753774671370116_281e5209 提取的匹配词: {}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774671370116_281e5209, 排名: 38, 分数: 6.4388, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774671370116_281e5209, 排名: 38, 分数: 6.4388, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🔍 文档 doc_1753774858149055_43e18f26 的高亮信息: {'content': ['2365981188 硬盘<em>使用</em>率超标二级告警\n告警描述\n针对某一特定分区，监控参数中监控类型为按绝对值监控或按百分比监控，在监控时间点监测到对应<em>的</em><em>使用</em>空间超过设定<em>的</em>监控阈值－主要（非0值），但未超过监控阈值－严重时，上报本告警。', '告警属性\n* 告警级别：主要\n* 告警类型：设备告警\n* 自动清除：是\n告警参数\n参数名称| 参数含义\n---|---\n分区描述| 上报该告警<em>的</em>硬盘<em>的</em>分区情况，对应SHOW PARTITIONPARA命令中<em>的</em>分区描述字段。\n监控阈值（主要）| 主要级别的监控阈值，对应SHOW PARTITIONPARA命令中<em>的</em>监控阈值－主要字段。\n<em>使用</em>空间| 已<em>使用</em>空间。']}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🔍 文档 doc_1753774858149055_43e18f26 的高亮信息: {'content': ['2365981188 硬盘<em>使用</em>率超标二级告警\n告警描述\n针对某一特定分区，监控参数中监控类型为按绝对值监控或按百分比监控，在监控时间点监测到对应<em>的</em><em>使用</em>空间超过设定<em>的</em>监控阈值－主要（非0值），但未超过监控阈值－严重时，上报本告警。', '告警属性\n* 告警级别：主要\n* 告警类型：设备告警\n* 自动清除：是\n告警参数\n参数名称| 参数含义\n---|---\n分区描述| 上报该告警<em>的</em>硬盘<em>的</em>分区情况，对应SHOW PARTITIONPARA命令中<em>的</em>分区描述字段。\n监控阈值（主要）| 主要级别的监控阈值，对应SHOW PARTITIONPARA命令中<em>的</em>监控阈值－主要字段。\n<em>使用</em>空间| 已<em>使用</em>空间。']}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 文档 doc_1753774858149055_43e18f26 提取的匹配词: {}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 文档 doc_1753774858149055_43e18f26 提取的匹配词: {}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774858149055_43e18f26, 排名: 39, 分数: 6.3976, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774858149055_43e18f26, 排名: 39, 分数: 6.3976, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🔍 文档 doc_1753774844574008_b81efc3e 的高亮信息: {'content': ['2365981190 硬盘<em>使用</em>率超标四级告警\n告警描述\n针对某一特定分区，监控参数中监控类型为按绝对值监控或按百分比监控，在监控时间点监测到对应<em>的</em><em>使用</em>空间超过设定<em>的</em>监控阈值－警告（非0值），但未超过监控阈值－次要时，上报本告警。', '告警属性\n* 告警级别：警告\n* 告警类型：设备告警\n* 自动清除：是\n告警参数\n参数名称| 参数含义\n---|---\n分区描述| 上报该告警<em>的</em>硬盘<em>的</em>分区情况，对应SHOW PARTITIONPARA命令中<em>的</em>分区描述字段。\n监控阈值（警告）| 警告级别的监控阈值，对应SHOW PARTITIONPARA命令中<em>的</em>监控阈值－警告字段。\n<em>使用</em>空间| 已<em>使用</em>空间。']}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🔍 文档 doc_1753774844574008_b81efc3e 的高亮信息: {'content': ['2365981190 硬盘<em>使用</em>率超标四级告警\n告警描述\n针对某一特定分区，监控参数中监控类型为按绝对值监控或按百分比监控，在监控时间点监测到对应<em>的</em><em>使用</em>空间超过设定<em>的</em>监控阈值－警告（非0值），但未超过监控阈值－次要时，上报本告警。', '告警属性\n* 告警级别：警告\n* 告警类型：设备告警\n* 自动清除：是\n告警参数\n参数名称| 参数含义\n---|---\n分区描述| 上报该告警<em>的</em>硬盘<em>的</em>分区情况，对应SHOW PARTITIONPARA命令中<em>的</em>分区描述字段。\n监控阈值（警告）| 警告级别的监控阈值，对应SHOW PARTITIONPARA命令中<em>的</em>监控阈值－警告字段。\n<em>使用</em>空间| 已<em>使用</em>空间。']}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 文档 doc_1753774844574008_b81efc3e 提取的匹配词: {}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 文档 doc_1753774844574008_b81efc3e 提取的匹配词: {}
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774844574008_b81efc3e, 排名: 40, 分数: 6.3976, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774844574008_b81efc3e, 排名: 40, 分数: 6.3976, 命中词: 无
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772645724556_0e91bf6b, 排名: 1, 分数: 0.8058
2025-08-01 00:34:10,907 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772645724556_0e91bf6b, 排名: 1, 分数: 0.8058
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774482854805_dfcfb0f2, 排名: 2, 分数: 0.8014
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774482854805_dfcfb0f2, 排名: 2, 分数: 0.8014
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772001962530_8e7bee8e, 排名: 3, 分数: 0.7959
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772001962530_8e7bee8e, 排名: 3, 分数: 0.7959
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774374181476_9fc2e6c4, 排名: 4, 分数: 0.7953
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774374181476_9fc2e6c4, 排名: 4, 分数: 0.7953
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772001962480_7ee793f7, 排名: 5, 分数: 0.7947
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772001962480_7ee793f7, 排名: 5, 分数: 0.7947
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554271251_287ce7d9, 排名: 6, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554271251_287ce7d9, 排名: 6, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554271290_31881668, 排名: 7, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554271290_31881668, 排名: 7, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554274299_579ed600, 排名: 8, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554274299_579ed600, 排名: 8, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772555564279_136f8304, 排名: 9, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772555564279_136f8304, 排名: 9, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772557471804_a0d5d936, 排名: 10, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772557471804_a0d5d936, 排名: 10, 分数: 0.7944
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772555564262_50bd8cc4, 排名: 11, 分数: 0.7943
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772555564262_50bd8cc4, 排名: 11, 分数: 0.7943
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771970430750_022a5945, 排名: 12, 分数: 0.7942
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771970430750_022a5945, 排名: 12, 分数: 0.7942
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772662364255_54bcaad9, 排名: 13, 分数: 0.7930
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772662364255_54bcaad9, 排名: 13, 分数: 0.7930
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772666266682_9b9bcff1, 排名: 14, 分数: 0.7930
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772666266682_9b9bcff1, 排名: 14, 分数: 0.7930
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888306_9cfc1f32, 排名: 15, 分数: 0.7905
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888306_9cfc1f32, 排名: 15, 分数: 0.7905
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772557471770_e3c596b4, 排名: 16, 分数: 0.7899
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772557471770_e3c596b4, 排名: 16, 分数: 0.7899
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773835356447_8a1daa7f, 排名: 17, 分数: 0.7889
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773835356447_8a1daa7f, 排名: 17, 分数: 0.7889
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772719825797_1af5cb9a, 排名: 18, 分数: 0.7884
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772719825797_1af5cb9a, 排名: 18, 分数: 0.7884
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011538_23969791, 排名: 19, 分数: 0.7880
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011538_23969791, 排名: 19, 分数: 0.7880
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011542_279fe8d5, 排名: 20, 分数: 0.7880
2025-08-01 00:34:10,908 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011542_279fe8d5, 排名: 20, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771648728161_f5fbf655, 排名: 21, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771648728161_f5fbf655, 排名: 21, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771648728164_691bf0b1, 排名: 22, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771648728164_691bf0b1, 排名: 22, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011534_8e443aa4, 排名: 23, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011534_8e443aa4, 排名: 23, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011237_f14af47d, 排名: 24, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011237_f14af47d, 排名: 24, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011246_c34a27c9, 排名: 25, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011246_c34a27c9, 排名: 25, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011248_cdf60a1d, 排名: 26, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011248_cdf60a1d, 排名: 26, 分数: 0.7880
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554274232_e428e81e, 排名: 27, 分数: 0.7876
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772554274232_e428e81e, 排名: 27, 分数: 0.7876
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774864527128_712af41c, 排名: 28, 分数: 0.7867
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774864527128_712af41c, 排名: 28, 分数: 0.7867
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888286_32e03e54, 排名: 29, 分数: 0.7858
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888286_32e03e54, 排名: 29, 分数: 0.7858
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774679864699_d39df923, 排名: 30, 分数: 0.7848
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774679864699_d39df923, 排名: 30, 分数: 0.7848
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759745_fbbb1247, 排名: 31, 分数: 0.7845
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759745_fbbb1247, 排名: 31, 分数: 0.7845
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772685170317_787dc4b1, 排名: 32, 分数: 0.7843
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772685170317_787dc4b1, 排名: 32, 分数: 0.7843
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772680889297_afa944ef, 排名: 33, 分数: 0.7841
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772680889297_afa944ef, 排名: 33, 分数: 0.7841
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773791874256_ebe90c65, 排名: 34, 分数: 0.7841
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773791874256_ebe90c65, 排名: 34, 分数: 0.7841
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774322028933_f7e4f799, 排名: 35, 分数: 0.7839
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774322028933_f7e4f799, 排名: 35, 分数: 0.7839
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774322024052_0e1e94d0, 排名: 36, 分数: 0.7839
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774322024052_0e1e94d0, 排名: 36, 分数: 0.7839
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414075892_30d455dc, 排名: 37, 分数: 0.7837
2025-08-01 00:34:10,909 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414075892_30d455dc, 排名: 37, 分数: 0.7837
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772628752764_717b4c41, 排名: 38, 分数: 0.7837
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772628752764_717b4c41, 排名: 38, 分数: 0.7837
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888280_adb37b47, 排名: 39, 分数: 0.7831
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773800888280_adb37b47, 排名: 39, 分数: 0.7831
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774363484264_76f3308a, 排名: 40, 分数: 0.7828
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774363484264_76f3308a, 排名: 40, 分数: 0.7828
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753772645724556_0e91bf6b: RRF分数=0.016393
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753772645724556_0e91bf6b: RRF分数=0.016393
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753772645724556_0e91bf6b 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753772645724556_0e91bf6b 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774432664375_30479dce: RRF分数=0.016393
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774432664375_30479dce: RRF分数=0.016393
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753774432664375_30479dce 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753774432664375_30479dce 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753772249816965_3bf29d36: RRF分数=0.016129
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753772249816965_3bf29d36: RRF分数=0.016129
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753772249816965_3bf29d36 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753772249816965_3bf29d36 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774482854805_dfcfb0f2: RRF分数=0.016129
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774482854805_dfcfb0f2: RRF分数=0.016129
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753774482854805_dfcfb0f2 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: ✅ 文档 doc_1753774482854805_dfcfb0f2 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774357676094_d0e7e8f4: RRF分数=0.015873
2025-08-01 00:34:10,910 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774357676094_d0e7e8f4: RRF分数=0.015873
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753774357676094_d0e7e8f4 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753774357676094_d0e7e8f4 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753772001962530_8e7bee8e: RRF分数=0.015873
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753772001962530_8e7bee8e: RRF分数=0.015873
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772001962530_8e7bee8e 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772001962530_8e7bee8e 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753773075828131_9bb2302f: RRF分数=0.015625
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753773075828131_9bb2302f: RRF分数=0.015625
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773075828131_9bb2302f 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773075828131_9bb2302f 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774374181476_9fc2e6c4: RRF分数=0.015625
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774374181476_9fc2e6c4: RRF分数=0.015625
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753774374181476_9fc2e6c4 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753774374181476_9fc2e6c4 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753772001962480_7ee793f7: RRF分数=0.015385
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753772001962480_7ee793f7: RRF分数=0.015385
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772001962480_7ee793f7 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772001962480_7ee793f7 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753772347170463_b78a08d7: RRF分数=0.015385
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753772347170463_b78a08d7: RRF分数=0.015385
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772347170463_b78a08d7 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772347170463_b78a08d7 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753773539799598_10c91b1f: RRF分数=0.015152
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753773539799598_10c91b1f: RRF分数=0.015152
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773539799598_10c91b1f 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773539799598_10c91b1f 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753772554271251_287ce7d9: RRF分数=0.015152
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753772554271251_287ce7d9: RRF分数=0.015152
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772554271251_287ce7d9 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772554271251_287ce7d9 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753772554271290_31881668: RRF分数=0.014925
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753772554271290_31881668: RRF分数=0.014925
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772554271290_31881668 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753772554271290_31881668 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753773814820687_241a9b08: RRF分数=0.014925
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753773814820687_241a9b08: RRF分数=0.014925
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773814820687_241a9b08 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: ✅ 文档 doc_1753773814820687_241a9b08 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753772554274299_579ed600: RRF分数=0.014706
2025-08-01 00:34:10,911 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753772554274299_579ed600: RRF分数=0.014706
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772554274299_579ed600 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772554274299_579ed600 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753772680889496_5a797d4b: RRF分数=0.014706
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753772680889496_5a797d4b: RRF分数=0.014706
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772680889496_5a797d4b 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772680889496_5a797d4b 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753771717452174_7cf4f4b2: RRF分数=0.014493
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753771717452174_7cf4f4b2: RRF分数=0.014493
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753771717452174_7cf4f4b2 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753771717452174_7cf4f4b2 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772555564279_136f8304: RRF分数=0.014493
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772555564279_136f8304: RRF分数=0.014493
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772555564279_136f8304 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772555564279_136f8304 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772301361176_270faeab: RRF分数=0.014286
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772301361176_270faeab: RRF分数=0.014286
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772301361176_270faeab 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772301361176_270faeab 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772557471804_a0d5d936: RRF分数=0.014286
2025-08-01 00:34:10,912 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772557471804_a0d5d936: RRF分数=0.014286
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772557471804_a0d5d936 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: ✅ 文档 doc_1753772557471804_a0d5d936 通过RRF过滤，加入最终结果
2025-08-01 00:34:10,912 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:34:10,912 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:34:10,912 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,912 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8058
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8058
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,912 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📝 内容: 参数范围:1-50
＜ _since-id_ ＞ | 显示自配置回退点ID之后的所有配置回退点信息。参数范围：1000000001-1999999999
＜ _at-id_ ＞ | 显示某配置回退点信...
2025-08-01 00:34:10,912 rag.components.base DEBUG:    📝 内容: 参数范围:1-50
＜ _since-id_ ＞ | 显示自配置回退点ID之后的所有配置回退点信息。参数范围：1000000001-1999999999
＜ _at-id_ ＞ | 显示某配置回退点信...
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774432664375_30479dce
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774432664375_30479dce
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 文本: 7.2780
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 文本: 7.2780
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: # 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对...
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: # 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对...
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 文本: 7.1040
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 文本: 7.1040
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: # 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对...
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: # 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对...
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774482854805_dfcfb0f2
2025-08-01 00:34:10,913 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774482854805_dfcfb0f2
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8014
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8014
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,913 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: ADD 5GSUPIRSTRNSSAI
SET 5GSUPIRSTRNSSAI
DEL 5GSUPIRSTRNSSAI
SHOW 5GSUPIRSTRNSSAI
* 安全变量
本特性不涉及安全变量的变...
2025-08-01 00:34:10,913 rag.components.base DEBUG:    📝 内容: ADD 5GSUPIRSTRNSSAI
SET 5GSUPIRSTRNSSAI
DEL 5GSUPIRSTRNSSAI
SHOW 5GSUPIRSTRNSSAI
* 安全变量
本特性不涉及安全变量的变...
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9314
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9314
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: 特性配置
* GnGp SGSN网元计费功能配置特性
* 调整特性
* 测试用例
GnGp SGSN网元计费功能配置特性
配置说明
1. **CG容量配置**
使用命令SET CAPACITY配置全局...
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: 特性配置
* GnGp SGSN网元计费功能配置特性
* 调整特性
* 测试用例
GnGp SGSN网元计费功能配置特性
配置说明
1. **CG容量配置**
使用命令SET CAPACITY配置全局...
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753772001962530_8e7bee8e
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753772001962530_8e7bee8e
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7959
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7959
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: | 本参数用于唯一标识一个场景。场景名称可以根据规划配置或由运维人员自行定义。
ENTRANCE | 场景入口 | 参数可选性:任选参数；参数类型:字符型；参数范围为:1~1024个字符。 | 本参数...
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: | 本参数用于唯一标识一个场景。场景名称可以根据规划配置或由运维人员自行定义。
ENTRANCE | 场景入口 | 参数可选性:任选参数；参数类型:字符型；参数范围为:1~1024个字符。 | 本参数...
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,914 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9205
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9205
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,914 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: # 查询License使用情况(SHOW LICUSAGE)
## 命令功能
该命令用于查询License使用情况。使用情况由前台的License代理上报。
## 注意事项
无。
## 输入参数说明
...
2025-08-01 00:34:10,914 rag.components.base DEBUG:    📝 内容: # 查询License使用情况(SHOW LICUSAGE)
## 命令功能
该命令用于查询License使用情况。使用情况由前台的License代理上报。
## 注意事项
无。
## 输入参数说明
...
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7953
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7953
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: NfInstanceId
属性名称| 描述
---|---
NfInstanceId| 唯一标识NF实例的字符串。 NF实例ID的格式应为通用唯一标识符（UUID）版本4。
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: NfInstanceId
属性名称| 描述
---|---
NfInstanceId| 唯一标识NF实例的字符串。 NF实例ID的格式应为通用唯一标识符（UUID）版本4。
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753772001962480_7ee793f7
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753772001962480_7ee793f7
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7947
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7947
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: | 本参数用于唯一标识一个场景。场景名称可以根据规划配置或由运维人员自行定义。
ENTRANCE | 场景入口 | 参数可选性:任选参数；参数类型:复合参数 | 本参数用于确定场景下策略规则的使用前提...
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: | 本参数用于唯一标识一个场景。场景名称可以根据规划配置或由运维人员自行定义。
ENTRANCE | 场景入口 | 参数可选性:任选参数；参数类型:复合参数 | 本参数用于确定场景下策略规则的使用前提...
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9205
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9205
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: # 查询License使用情况(SHOW LICUSAGE)
## 命令功能
该命令用于查询License使用情况。使用情况由前台的License代理上报。
## 注意事项
无。
## 输入参数说明
...
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: # 查询License使用情况(SHOW LICUSAGE)
## 命令功能
该命令用于查询License使用情况。使用情况由前台的License代理上报。
## 注意事项
无。
## 输入参数说明
...
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9060
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.9060
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,915 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: 如果没有收到UE的寻呼响应，MME优先按照Old GUTI+用户签约的CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应的eNodeB，使用GUTI寻呼用户。
6. 如果eNodeB收到...
2025-08-01 00:34:10,915 rag.components.base DEBUG:    📝 内容: 如果没有收到UE的寻呼响应，MME优先按照Old GUTI+用户签约的CSGLIST进行寻呼，发送寻呼消息给MME下CSGLIST对应的eNodeB，使用GUTI寻呼用户。
6. 如果eNodeB收到...
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753772554271251_287ce7d9
2025-08-01 00:34:10,915 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753772554271251_287ce7d9
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # 删除服务端PSK配置(DEL SBISERVERPSK)
## 功能说明
该命令用于删除服务端PSK配置。当一个服务端PSK配置不再归属于一个服务端PSK配置集时，使用该命令。命令执行成功后，原先...
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # 删除服务端PSK配置(DEL SBISERVERPSK)
## 功能说明
该命令用于删除服务端PSK配置。当一个服务端PSK配置不再归属于一个服务端PSK配置集时，使用该命令。命令执行成功后，原先...
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753772554271290_31881668
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753772554271290_31881668
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: 服务端PSK配置引用“服务端PSK集配置”中的配置。
PSKID | PSK标识 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-128 | 该参数用于设置服务端PSK标识，与PSKSET...
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: 服务端PSK配置引用“服务端PSK集配置”中的配置。
PSKID | PSK标识 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-128 | 该参数用于设置服务端PSK标识，与PSKSET...
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8989
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8989
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # EPC扩展APN配置
## 背景知识
运营商在部署PGW时，有可能需要考虑用户的号码和签约计费特性等因素，在APN NI中扩展这些用户信息，可以为运营商提供更准确的APN选择PGW的策略。
## ...
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # EPC扩展APN配置
## 背景知识
运营商在部署PGW时，有可能需要考虑用户的号码和签约计费特性等因素，在APN NI中扩展这些用户信息，可以为运营商提供更准确的APN选择PGW的策略。
## ...
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753772554274299_579ed600
2025-08-01 00:34:10,916 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753772554274299_579ed600
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # 修改局向入向IP地址归属配置(SET OFFICERECVIPBELONG)
## 功能说明
该命令用于修改局向入向IP归属配置。当需要修改局向入向IP归属配置，执行该命令。命令执行成功后，局向重...
2025-08-01 00:34:10,916 rag.components.base DEBUG:    📝 内容: # 修改局向入向IP地址归属配置(SET OFFICERECVIPBELONG)
## 功能说明
该命令用于修改局向入向IP归属配置。当需要修改局向入向IP归属配置，执行该命令。命令执行成功后，局向重...
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8972
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8972
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: ﻿
tunnel mpls traffic-eng hot-standby preferred-igp
命令功能
指定隧道HSB路由优先使用某种IGP路由进行CSPF算路。
命令模式
MPLS-TE隧...
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: ﻿
tunnel mpls traffic-eng hot-standby preferred-igp
命令功能
指定隧道HSB路由优先使用某种IGP路由进行CSPF算路。
命令模式
MPLS-TE隧...
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8346
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.8346
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: 主机集合（Host Aggregates）是一组节点，即主机（host）的组合，是指具有共同属性的多个主机的集合。比如：CPU都是制定类型的一组主机的集合，磁阵类型都是SSD的一组主机的集合，操作系统...
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: 主机集合（Host Aggregates）是一组节点，即主机（host）的组合，是指具有共同属性的多个主机的集合。比如：CPU都是制定类型的一组主机的集合，磁阵类型都是SSD的一组主机的集合，操作系统...
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772555564279_136f8304
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772555564279_136f8304
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: END | 结束 | 参数可选性: 任选
参数类型: 字符串 | 该参数用于设置IPv4地址范围配置的结束地址。
ZONEID | 归属分区标识 | 参数可选性: 任选
参数类型: 数字
参数范围: ...
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: END | 结束 | 参数可选性: 任选
参数类型: 字符串 | 该参数用于设置IPv4地址范围配置的结束地址。
ZONEID | 归属分区标识 | 参数可选性: 任选
参数类型: 数字
参数范围: ...
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772301361176_270faeab
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772301361176_270faeab
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.7619
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📊 原始分数 - 文本: 6.7619
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: 配置场景规则关联
场景名称| 参数| 取值
---|---|---
QoS_Based_on_User type control policy| 入口| 入口类型| 用户信息类
已选入口| 用户套餐
...
2025-08-01 00:34:10,917 rag.components.base DEBUG:    📝 内容: 配置场景规则关联
场景名称| 参数| 取值
---|---|---
QoS_Based_on_User type control policy| 入口| 入口类型| 用户信息类
已选入口| 用户套餐
...
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,917 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.7944
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📝 内容: 在一般的网络传输过程中，采用TCP协议规定的参数默认值均能很好的满足要求。如果和其他5GC网元对接过程中，存在特殊要求，可通过此配置调整TCP协议栈参数。
## 功能说明
TCP配置管理用于管理本网元...
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📝 内容: 在一般的网络传输过程中，采用TCP协议规定的参数默认值均能很好的满足要求。如果和其他5GC网元对接过程中，存在特殊要求，可通过此配置调整TCP协议栈参数。
## 功能说明
TCP配置管理用于管理本网元...
2025-08-01 00:34:10,918 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:34:10,918 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:34:10,918 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:34:10,918 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:34:10,918 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:34:10,918 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:34:10,918 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,918 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:34:10,918 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/系统管理/MIM配置命令/show_configuration_commit_changes5510001B.txt', 'file_type': '.txt', 'filename': 'show_configuration_commit_changes5510001B.txt', 'chunk_id': 'ac724b4f7456298c_L2_3', 'parent_id': None, 'root_id': 'ac724b4f7456298c', 'chunk_index': 5, 'total_chunks': 11, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:34:10,918 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/系统管理/MIM配置命令/show_configuration_commit_changes5510001B.txt', 'file_type': '.txt', 'filename': 'show_configuration_commit_changes5510001B.txt', 'chunk_id': 'ac724b4f7456298c_L2_3', 'parent_id': None, 'root_id': 'ac724b4f7456298c', 'chunk_index': 5, 'total_chunks': 11, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753772645724556_0e91bf6b 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,919 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753772645724556_0e91bf6b 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774432664375_30479dce
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774432664375_30479dce
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Commons_TMSP/zh-cn/mml/1240352.txt', 'file_type': '.txt', 'filename': '1240352.txt', 'chunk_id': '2992c60899ba6b75_L0_0', 'parent_id': None, 'root_id': '2992c60899ba6b75', 'chunk_index': 0, 'total_chunks': 19, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2140}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Commons_TMSP/zh-cn/mml/1240352.txt', 'file_type': '.txt', 'filename': '1240352.txt', 'chunk_id': '2992c60899ba6b75_L0_0', 'parent_id': None, 'root_id': '2992c60899ba6b75', 'chunk_index': 0, 'total_chunks': 19, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2140}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774432664375_30479dce 本身就是big chunk，直接使用
2025-08-01 00:34:10,919 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774432664375_30479dce 本身就是big chunk，直接使用
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_TMSP/zh-cn/mml/1240352.txt', 'file_type': '.txt', 'filename': '1240352.txt', 'chunk_id': 'b3fe48c0b1e60e36_L0_0', 'parent_id': None, 'root_id': 'b3fe48c0b1e60e36', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2407}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_TMSP/zh-cn/mml/1240352.txt', 'file_type': '.txt', 'filename': '1240352.txt', 'chunk_id': 'b3fe48c0b1e60e36_L0_0', 'parent_id': None, 'root_id': 'b3fe48c0b1e60e36', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2407}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,919 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772249816965_3bf29d36 本身就是big chunk，直接使用
2025-08-01 00:34:10,919 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772249816965_3bf29d36 本身就是big chunk，直接使用
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774482854805_dfcfb0f2
2025-08-01 00:34:10,919 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774482854805_dfcfb0f2
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:34:10,919 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-79-09 网络切片/topics/16430053228356i4G6n.txt', 'file_type': '.txt', 'filename': '16430053228356i4G6n.txt', 'chunk_id': 'dbe4e1c30ab2931e_L2_71', 'parent_id': 'dbe4e1c30ab2931e_L1_11', 'root_id': 'dbe4e1c30ab2931e', 'chunk_index': 87, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 124}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-79-09 网络切片/topics/16430053228356i4G6n.txt', 'file_type': '.txt', 'filename': '16430053228356i4G6n.txt', 'chunk_id': 'dbe4e1c30ab2931e_L2_71', 'parent_id': 'dbe4e1c30ab2931e_L1_11', 'root_id': 'dbe4e1c30ab2931e', 'chunk_index': 87, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 124}
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,919 rag.components.base DEBUG:    🔗 parent_id: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,919 rag.components.base DEBUG:    ✅ 创建新的big chunk组: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,919 rag.components.base DEBUG:    ✅ 创建新的big chunk组: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,919 rag.components.base DEBUG:    ✅ 添加到big chunk组 dbe4e1c30ab2931e_L1_11，当前最高分数: 0.016129
2025-08-01 00:34:10,919 rag.components.base DEBUG:    ✅ 添加到big chunk组 dbe4e1c30ab2931e_L1_11，当前最高分数: 0.016129
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-77-12 计费/topics/1589350559271.txt', 'file_type': '.txt', 'filename': '1589350559271.txt', 'chunk_id': '956be66ed989770d_L0_0', 'parent_id': None, 'root_id': '956be66ed989770d', 'chunk_index': 0, 'total_chunks': 43, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2571}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-77-12 计费/topics/1589350559271.txt', 'file_type': '.txt', 'filename': '1589350559271.txt', 'chunk_id': '956be66ed989770d_L0_0', 'parent_id': None, 'root_id': '956be66ed989770d', 'chunk_index': 0, 'total_chunks': 43, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2571}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,920 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774357676094_d0e7e8f4 本身就是big chunk，直接使用
2025-08-01 00:34:10,920 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774357676094_d0e7e8f4 本身就是big chunk，直接使用
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753772001962530_8e7bee8e
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753772001962530_8e7bee8e
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787217.txt', 'file_type': '.txt', 'filename': '1787217.txt', 'chunk_id': 'ce45e55cbaa10000_L2_13', 'parent_id': 'ce45e55cbaa10000_L1_2', 'root_id': 'ce45e55cbaa10000', 'chunk_index': 17, 'total_chunks': 25, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 132}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787217.txt', 'file_type': '.txt', 'filename': '1787217.txt', 'chunk_id': 'ce45e55cbaa10000_L2_13', 'parent_id': 'ce45e55cbaa10000_L1_2', 'root_id': 'ce45e55cbaa10000', 'chunk_index': 17, 'total_chunks': 25, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 132}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,920 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,920 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,920 rag.components.base DEBUG:    ✅ 添加到big chunk组 ce45e55cbaa10000_L1_2，当前最高分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG:    ✅ 添加到big chunk组 ce45e55cbaa10000_L1_2，当前最高分数: 0.015873
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/OAM/zh-CN/mml/1417969.txt', 'file_type': '.txt', 'filename': '1417969.txt', 'chunk_id': 'c9d7c74f8d23deae_L0_0', 'parent_id': None, 'root_id': 'c9d7c74f8d23deae', 'chunk_index': 0, 'total_chunks': 24, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical+text', 'chunk_level': 0, 'text_length': 4144}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/OAM/zh-CN/mml/1417969.txt', 'file_type': '.txt', 'filename': '1417969.txt', 'chunk_id': 'c9d7c74f8d23deae_L0_0', 'parent_id': None, 'root_id': 'c9d7c74f8d23deae', 'chunk_index': 0, 'total_chunks': 24, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical+text', 'chunk_level': 0, 'text_length': 4144}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,920 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773075828131_9bb2302f 本身就是big chunk，直接使用
2025-08-01 00:34:10,920 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773075828131_9bb2302f 本身就是big chunk，直接使用
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,920 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:34:10,920 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Nbsf/topics/22.txt', 'file_type': '.txt', 'filename': '22.txt', 'chunk_id': '817f8251e95f6ef7_L2_1', 'parent_id': None, 'root_id': '817f8251e95f6ef7', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 86}
2025-08-01 00:34:10,920 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Nbsf/topics/22.txt', 'file_type': '.txt', 'filename': '22.txt', 'chunk_id': '817f8251e95f6ef7_L2_1', 'parent_id': None, 'root_id': '817f8251e95f6ef7', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 86}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774374181476_9fc2e6c4 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,921 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774374181476_9fc2e6c4 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753772001962480_7ee793f7
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753772001962480_7ee793f7
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787217.txt', 'file_type': '.txt', 'filename': '1787217.txt', 'chunk_id': 'ce45e55cbaa10000_L2_4', 'parent_id': 'ce45e55cbaa10000_L1_0', 'root_id': 'ce45e55cbaa10000', 'chunk_index': 8, 'total_chunks': 25, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 116}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787217.txt', 'file_type': '.txt', 'filename': '1787217.txt', 'chunk_id': 'ce45e55cbaa10000_L2_4', 'parent_id': 'ce45e55cbaa10000_L1_0', 'root_id': 'ce45e55cbaa10000', 'chunk_index': 8, 'total_chunks': 25, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 116}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,921 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,921 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,921 rag.components.base DEBUG:    ✅ 添加到big chunk组 ce45e55cbaa10000_L1_0，当前最高分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG:    ✅ 添加到big chunk组 ce45e55cbaa10000_L1_0，当前最高分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_OAM/zh-CN/mml/1417969.txt', 'file_type': '.txt', 'filename': '1417969.txt', 'chunk_id': '2e1bf057d7b75a2e_L0_0', 'parent_id': None, 'root_id': '2e1bf057d7b75a2e', 'chunk_index': 0, 'total_chunks': 24, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical+text', 'chunk_level': 0, 'text_length': 4144}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_OAM/zh-CN/mml/1417969.txt', 'file_type': '.txt', 'filename': '1417969.txt', 'chunk_id': '2e1bf057d7b75a2e_L0_0', 'parent_id': None, 'root_id': '2e1bf057d7b75a2e', 'chunk_index': 0, 'total_chunks': 24, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical+text', 'chunk_level': 0, 'text_length': 4144}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772347170463_b78a08d7 本身就是big chunk，直接使用
2025-08-01 00:34:10,921 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772347170463_b78a08d7 本身就是big chunk，直接使用
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:34:10,921 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-01 移动性管理/topics/ZUF-78-01-004-1-特性描述.txt', 'file_type': '.txt', 'filename': 'ZUF-78-01-004-1-特性描述.txt', 'chunk_id': '4a7d1753eda421b5_L0_1', 'parent_id': None, 'root_id': '4a7d1753eda421b5', 'chunk_index': 1, 'total_chunks': 93, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1739}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-01 移动性管理/topics/ZUF-78-01-004-1-特性描述.txt', 'file_type': '.txt', 'filename': 'ZUF-78-01-004-1-特性描述.txt', 'chunk_id': '4a7d1753eda421b5_L0_1', 'parent_id': None, 'root_id': '4a7d1753eda421b5', 'chunk_index': 1, 'total_chunks': 93, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1739}
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,921 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773539799598_10c91b1f 本身就是big chunk，直接使用
2025-08-01 00:34:10,921 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773539799598_10c91b1f 本身就是big chunk，直接使用
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753772554271251_287ce7d9
2025-08-01 00:34:10,921 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753772554271251_287ce7d9
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1223083.txt', 'file_type': '.txt', 'filename': '1223083.txt', 'chunk_id': 'd068826814dd0183_L2_0', 'parent_id': 'd068826814dd0183_L1_0', 'root_id': 'd068826814dd0183', 'chunk_index': 3, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 122}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1223083.txt', 'file_type': '.txt', 'filename': '1223083.txt', 'chunk_id': 'd068826814dd0183_L2_0', 'parent_id': 'd068826814dd0183_L1_0', 'root_id': 'd068826814dd0183', 'chunk_index': 3, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 122}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 创建新的big chunk组: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 创建新的big chunk组: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 添加到big chunk组 d068826814dd0183_L1_0，当前最高分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 添加到big chunk组 d068826814dd0183_L1_0，当前最高分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753772554271290_31881668
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753772554271290_31881668
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1223083.txt', 'file_type': '.txt', 'filename': '1223083.txt', 'chunk_id': 'd068826814dd0183_L2_5', 'parent_id': 'd068826814dd0183_L1_0', 'root_id': 'd068826814dd0183', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 111}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1223083.txt', 'file_type': '.txt', 'filename': '1223083.txt', 'chunk_id': 'd068826814dd0183_L2_5', 'parent_id': 'd068826814dd0183_L1_0', 'root_id': 'd068826814dd0183', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 111}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: d068826814dd0183_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 添加到big chunk组 d068826814dd0183_L1_0，当前最高分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG:    ✅ 添加到big chunk组 d068826814dd0183_L1_0，当前最高分数: 0.015152
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/MMESGSN/zh-CN/tree/N_12616205.txt', 'file_type': '.txt', 'filename': 'N_12616205.txt', 'chunk_id': '873bfd7d1bcf52f6_L0_0', 'parent_id': None, 'root_id': '873bfd7d1bcf52f6', 'chunk_index': 0, 'total_chunks': 17, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1436}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/MMESGSN/zh-CN/tree/N_12616205.txt', 'file_type': '.txt', 'filename': 'N_12616205.txt', 'chunk_id': '873bfd7d1bcf52f6_L0_0', 'parent_id': None, 'root_id': '873bfd7d1bcf52f6', 'chunk_index': 0, 'total_chunks': 17, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1436}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,922 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773814820687_241a9b08 本身就是big chunk，直接使用
2025-08-01 00:34:10,922 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773814820687_241a9b08 本身就是big chunk，直接使用
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753772554274299_579ed600
2025-08-01 00:34:10,922 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753772554274299_579ed600
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:34:10,922 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1220210.txt', 'file_type': '.txt', 'filename': '1220210.txt', 'chunk_id': '284bb8d3b83e4c85_L2_1', 'parent_id': '284bb8d3b83e4c85_L1_0', 'root_id': '284bb8d3b83e4c85', 'chunk_index': 3, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 161}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1220210.txt', 'file_type': '.txt', 'filename': '1220210.txt', 'chunk_id': '284bb8d3b83e4c85_L2_1', 'parent_id': '284bb8d3b83e4c85_L1_0', 'root_id': '284bb8d3b83e4c85', 'chunk_index': 3, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 161}
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,922 rag.components.base DEBUG:    🔗 parent_id: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,923 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,923 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,923 rag.components.base DEBUG:    ✅ 添加到big chunk组 284bb8d3b83e4c85_L1_0，当前最高分数: 0.014706
2025-08-01 00:34:10,923 rag.components.base DEBUG:    ✅ 添加到big chunk组 284bb8d3b83e4c85_L1_0，当前最高分数: 0.014706
2025-08-01 00:34:10,923 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,923 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,923 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:34:10,923 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/MPLS/MPLS_TE配置命令/tunnel_mpls_traffic-eng_hot-standby_preferred-igp400100F1.txt', 'file_type': '.txt', 'filename': 'tunnel_mpls_traffic-eng_hot-standby_preferred-igp400100F1.txt', 'chunk_id': '4e738908a09ae3f8_L0_0', 'parent_id': None, 'root_id': '4e738908a09ae3f8', 'chunk_index': 0, 'total_chunks': 12, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1282}
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/MPLS/MPLS_TE配置命令/tunnel_mpls_traffic-eng_hot-standby_preferred-igp400100F1.txt', 'file_type': '.txt', 'filename': 'tunnel_mpls_traffic-eng_hot-standby_preferred-igp400100F1.txt', 'chunk_id': '4e738908a09ae3f8_L0_0', 'parent_id': None, 'root_id': '4e738908a09ae3f8', 'chunk_index': 0, 'total_chunks': 12, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1282}
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,923 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772680889496_5a797d4b 本身就是big chunk，直接使用
2025-08-01 00:34:10,923 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772680889496_5a797d4b 本身就是big chunk，直接使用
2025-08-01 00:34:10,923 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,923 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,923 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:34:10,923 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358525349.txt', 'file_type': '.txt', 'filename': '1561358525349.txt', 'chunk_id': '151c52a822782992_L0_4', 'parent_id': None, 'root_id': '151c52a822782992', 'chunk_index': 4, 'total_chunks': 122, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1983}
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358525349.txt', 'file_type': '.txt', 'filename': '1561358525349.txt', 'chunk_id': '151c52a822782992_L0_4', 'parent_id': None, 'root_id': '151c52a822782992', 'chunk_index': 4, 'total_chunks': 122, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1983}
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,923 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,923 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452174_7cf4f4b2 本身就是big chunk，直接使用
2025-08-01 00:34:10,923 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452174_7cf4f4b2 本身就是big chunk，直接使用
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772555564279_136f8304
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772555564279_136f8304
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1220014.txt', 'file_type': '.txt', 'filename': '1220014.txt', 'chunk_id': '93a6826ad75fe7da_L2_10', 'parent_id': '93a6826ad75fe7da_L1_1', 'root_id': '93a6826ad75fe7da', 'chunk_index': 13, 'total_chunks': 17, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 159}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/mml/1220014.txt', 'file_type': '.txt', 'filename': '1220014.txt', 'chunk_id': '93a6826ad75fe7da_L2_10', 'parent_id': '93a6826ad75fe7da_L1_1', 'root_id': '93a6826ad75fe7da', 'chunk_index': 13, 'total_chunks': 17, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 159}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,924 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,924 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,924 rag.components.base DEBUG:    ✅ 添加到big chunk组 93a6826ad75fe7da_L1_1，当前最高分数: 0.014493
2025-08-01 00:34:10,924 rag.components.base DEBUG:    ✅ 添加到big chunk组 93a6826ad75fe7da_L1_1，当前最高分数: 0.014493
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772301361176_270faeab
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772301361176_270faeab
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/ZUF-59-42-002 基于SPR签约的策略/topics/14-特性配置.txt', 'file_type': '.txt', 'filename': '14-特性配置.txt', 'chunk_id': '9e5c39717ee47f7e_L0_1', 'parent_id': None, 'root_id': '9e5c39717ee47f7e', 'chunk_index': 1, 'total_chunks': 124, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1651}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/ZUF-59-42-002 基于SPR签约的策略/topics/14-特性配置.txt', 'file_type': '.txt', 'filename': '14-特性配置.txt', 'chunk_id': '9e5c39717ee47f7e_L0_1', 'parent_id': None, 'root_id': '9e5c39717ee47f7e', 'chunk_index': 1, 'total_chunks': 124, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1651}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,924 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772301361176_270faeab 本身就是big chunk，直接使用
2025-08-01 00:34:10,924 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772301361176_270faeab 本身就是big chunk，直接使用
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,924 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:34:10,924 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/tree/101.txt', 'file_type': '.txt', 'filename': '101.txt', 'chunk_id': '1d582b2224041e15_L2_3', 'parent_id': None, 'root_id': '1d582b2224041e15', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/CommonS_HTTP_LB/zh-cn/tree/101.txt', 'file_type': '.txt', 'filename': '101.txt', 'chunk_id': '1d582b2224041e15_L2_3', 'parent_id': None, 'root_id': '1d582b2224041e15', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,924 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:34:10,925 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753772557471804_a0d5d936 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,925 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753772557471804_a0d5d936 缺少parent_id，降级使用small chunk
2025-08-01 00:34:10,925 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:34:10,925 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753772645724556_0e91bf6b: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753772645724556_0e91bf6b: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774432664375_30479dce: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774432664375_30479dce: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772249816965_3bf29d36: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772249816965_3bf29d36: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 dbe4e1c30ab2931e_L1_11: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 dbe4e1c30ab2931e_L1_11: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774357676094_d0e7e8f4: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774357676094_d0e7e8f4: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 ce45e55cbaa10000_L1_2: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 ce45e55cbaa10000_L1_2: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773075828131_9bb2302f: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773075828131_9bb2302f: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774374181476_9fc2e6c4: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774374181476_9fc2e6c4: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 ce45e55cbaa10000_L1_0: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 ce45e55cbaa10000_L1_0: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772347170463_b78a08d7: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772347170463_b78a08d7: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773539799598_10c91b1f: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773539799598_10c91b1f: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 d068826814dd0183_L1_0: 2 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 d068826814dd0183_L1_0: 2 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773814820687_241a9b08: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773814820687_241a9b08: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 284bb8d3b83e4c85_L1_0: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 284bb8d3b83e4c85_L1_0: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772680889496_5a797d4b: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772680889496_5a797d4b: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452174_7cf4f4b2: 1 个small chunks
2025-08-01 00:34:10,925 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452174_7cf4f4b2: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 93a6826ad75fe7da_L1_1: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 93a6826ad75fe7da_L1_1: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772301361176_270faeab: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772301361176_270faeab: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753772557471804_a0d5d936: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753772557471804_a0d5d936: 1 个small chunks
2025-08-01 00:34:10,926 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,926 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753772645724556_0e91bf6b
2025-08-01 00:34:10,930 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,930 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,930 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,930 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,930 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753772645724556_0e91bf6b 的内容，该组将被丢弃
2025-08-01 00:34:10,930 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753772645724556_0e91bf6b 的内容，该组将被丢弃
2025-08-01 00:34:10,930 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772645724556_0e91bf6b (分数: 0.016393)
2025-08-01 00:34:10,930 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772645724556_0e91bf6b (分数: 0.016393)
2025-08-01 00:34:10,930 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774432664375_30479dce
2025-08-01 00:34:10,930 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774432664375_30479dce
2025-08-01 00:34:10,932 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,932 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,932 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,932 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,932 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774432664375_30479dce 的内容，该组将被丢弃
2025-08-01 00:34:10,932 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774432664375_30479dce 的内容，该组将被丢弃
2025-08-01 00:34:10,932 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774432664375_30479dce (分数: 0.016393)
2025-08-01 00:34:10,932 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774432664375_30479dce (分数: 0.016393)
2025-08-01 00:34:10,932 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,932 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772249816965_3bf29d36
2025-08-01 00:34:10,935 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,935 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,935 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,935 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,935 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772249816965_3bf29d36 的内容，该组将被丢弃
2025-08-01 00:34:10,935 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772249816965_3bf29d36 的内容，该组将被丢弃
2025-08-01 00:34:10,936 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772249816965_3bf29d36 (分数: 0.016129)
2025-08-01 00:34:10,936 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772249816965_3bf29d36 (分数: 0.016129)
2025-08-01 00:34:10,936 rag.components.base DEBUG: 🔍 正在获取big chunk内容: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,936 rag.components.base DEBUG: 🔍 正在获取big chunk内容: dbe4e1c30ab2931e_L1_11
2025-08-01 00:34:10,940 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,940 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,941 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:34:10,941 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:34:10,941 rag.components.base DEBUG:    ✅ 成功获取big chunk dbe4e1c30ab2931e_L1_11，包含 1 个small chunks
2025-08-01 00:34:10,941 rag.components.base DEBUG:    ✅ 成功获取big chunk dbe4e1c30ab2931e_L1_11，包含 1 个small chunks
2025-08-01 00:34:10,941 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016129, 平均: 0.016129
2025-08-01 00:34:10,941 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016129, 平均: 0.016129
2025-08-01 00:34:10,941 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,941 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774357676094_d0e7e8f4
2025-08-01 00:34:10,944 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,944 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,944 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,944 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,944 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774357676094_d0e7e8f4 的内容，该组将被丢弃
2025-08-01 00:34:10,944 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774357676094_d0e7e8f4 的内容，该组将被丢弃
2025-08-01 00:34:10,944 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774357676094_d0e7e8f4 (分数: 0.015873)
2025-08-01 00:34:10,944 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774357676094_d0e7e8f4 (分数: 0.015873)
2025-08-01 00:34:10,944 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,944 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ce45e55cbaa10000_L1_2
2025-08-01 00:34:10,948 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,948 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,948 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,948 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,948 rag.components.base DEBUG:    ✅ 成功获取big chunk ce45e55cbaa10000_L1_2，包含 1 个small chunks
2025-08-01 00:34:10,948 rag.components.base DEBUG:    ✅ 成功获取big chunk ce45e55cbaa10000_L1_2，包含 1 个small chunks
2025-08-01 00:34:10,948 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015873, 平均: 0.015873
2025-08-01 00:34:10,948 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015873, 平均: 0.015873
2025-08-01 00:34:10,948 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,948 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773075828131_9bb2302f
2025-08-01 00:34:10,951 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,951 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,951 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,951 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,951 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773075828131_9bb2302f 的内容，该组将被丢弃
2025-08-01 00:34:10,951 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773075828131_9bb2302f 的内容，该组将被丢弃
2025-08-01 00:34:10,951 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773075828131_9bb2302f (分数: 0.015625)
2025-08-01 00:34:10,951 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773075828131_9bb2302f (分数: 0.015625)
2025-08-01 00:34:10,951 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,951 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774374181476_9fc2e6c4
2025-08-01 00:34:10,953 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,953 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,953 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,953 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,953 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774374181476_9fc2e6c4 的内容，该组将被丢弃
2025-08-01 00:34:10,953 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774374181476_9fc2e6c4 的内容，该组将被丢弃
2025-08-01 00:34:10,954 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774374181476_9fc2e6c4 (分数: 0.015625)
2025-08-01 00:34:10,954 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774374181476_9fc2e6c4 (分数: 0.015625)
2025-08-01 00:34:10,954 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,954 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ce45e55cbaa10000_L1_0
2025-08-01 00:34:10,955 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,955 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,955 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,955 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,956 rag.components.base DEBUG:    ✅ 成功获取big chunk ce45e55cbaa10000_L1_0，包含 1 个small chunks
2025-08-01 00:34:10,956 rag.components.base DEBUG:    ✅ 成功获取big chunk ce45e55cbaa10000_L1_0，包含 1 个small chunks
2025-08-01 00:34:10,956 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015385, 平均: 0.015385
2025-08-01 00:34:10,956 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015385, 平均: 0.015385
2025-08-01 00:34:10,956 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,956 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772347170463_b78a08d7
2025-08-01 00:34:10,960 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,960 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,960 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,960 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,960 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772347170463_b78a08d7 的内容，该组将被丢弃
2025-08-01 00:34:10,960 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772347170463_b78a08d7 的内容，该组将被丢弃
2025-08-01 00:34:10,960 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772347170463_b78a08d7 (分数: 0.015385)
2025-08-01 00:34:10,960 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772347170463_b78a08d7 (分数: 0.015385)
2025-08-01 00:34:10,960 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,960 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773539799598_10c91b1f
2025-08-01 00:34:10,962 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,962 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,962 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,962 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,962 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773539799598_10c91b1f 的内容，该组将被丢弃
2025-08-01 00:34:10,962 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773539799598_10c91b1f 的内容，该组将被丢弃
2025-08-01 00:34:10,962 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773539799598_10c91b1f (分数: 0.015152)
2025-08-01 00:34:10,962 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773539799598_10c91b1f (分数: 0.015152)
2025-08-01 00:34:10,962 rag.components.base DEBUG: 🔍 正在获取big chunk内容: d068826814dd0183_L1_0
2025-08-01 00:34:10,962 rag.components.base DEBUG: 🔍 正在获取big chunk内容: d068826814dd0183_L1_0
2025-08-01 00:34:10,964 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,964 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,964 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,964 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,964 rag.components.base DEBUG:    ✅ 成功获取big chunk d068826814dd0183_L1_0，包含 2 个small chunks
2025-08-01 00:34:10,964 rag.components.base DEBUG:    ✅ 成功获取big chunk d068826814dd0183_L1_0，包含 2 个small chunks
2025-08-01 00:34:10,964 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015152, 平均: 0.015038
2025-08-01 00:34:10,964 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015152, 平均: 0.015038
2025-08-01 00:34:10,964 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,964 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773814820687_241a9b08
2025-08-01 00:34:10,966 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,966 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,966 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,966 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:34:10,966 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773814820687_241a9b08 的内容，该组将被丢弃
2025-08-01 00:34:10,966 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773814820687_241a9b08 的内容，该组将被丢弃
2025-08-01 00:34:10,966 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773814820687_241a9b08 (分数: 0.014925)
2025-08-01 00:34:10,966 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773814820687_241a9b08 (分数: 0.014925)
2025-08-01 00:34:10,966 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,966 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 284bb8d3b83e4c85_L1_0
2025-08-01 00:34:10,971 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,971 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,971 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:34:10,971 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:34:10,971 rag.components.base DEBUG:    ✅ 成功获取big chunk 284bb8d3b83e4c85_L1_0，包含 1 个small chunks
2025-08-01 00:34:10,971 rag.components.base DEBUG:    ✅ 成功获取big chunk 284bb8d3b83e4c85_L1_0，包含 1 个small chunks
2025-08-01 00:34:10,972 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014706, 平均: 0.014706
2025-08-01 00:34:10,972 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014706, 平均: 0.014706
2025-08-01 00:34:10,972 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,972 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772680889496_5a797d4b
2025-08-01 00:34:10,974 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,974 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,975 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,975 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:34:10,975 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772680889496_5a797d4b 的内容，该组将被丢弃
2025-08-01 00:34:10,975 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772680889496_5a797d4b 的内容，该组将被丢弃
2025-08-01 00:34:10,975 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772680889496_5a797d4b (分数: 0.014706)
2025-08-01 00:34:10,975 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772680889496_5a797d4b (分数: 0.014706)
2025-08-01 00:34:10,975 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,975 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452174_7cf4f4b2
2025-08-01 00:34:10,976 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,976 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,976 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,976 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,976 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452174_7cf4f4b2 的内容，该组将被丢弃
2025-08-01 00:34:10,976 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452174_7cf4f4b2 的内容，该组将被丢弃
2025-08-01 00:34:10,976 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452174_7cf4f4b2 (分数: 0.014493)
2025-08-01 00:34:10,976 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452174_7cf4f4b2 (分数: 0.014493)
2025-08-01 00:34:10,976 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,976 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 93a6826ad75fe7da_L1_1
2025-08-01 00:34:10,981 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,981 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,981 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,981 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:34:10,981 rag.components.base DEBUG:    ✅ 成功获取big chunk 93a6826ad75fe7da_L1_1，包含 1 个small chunks
2025-08-01 00:34:10,981 rag.components.base DEBUG:    ✅ 成功获取big chunk 93a6826ad75fe7da_L1_1，包含 1 个small chunks
2025-08-01 00:34:10,981 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:34:10,981 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:34:10,981 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772301361176_270faeab
2025-08-01 00:34:10,981 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772301361176_270faeab
2025-08-01 00:34:10,983 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,983 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,983 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,983 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,983 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772301361176_270faeab 的内容，该组将被丢弃
2025-08-01 00:34:10,983 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772301361176_270faeab 的内容，该组将被丢弃
2025-08-01 00:34:10,983 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772301361176_270faeab (分数: 0.014286)
2025-08-01 00:34:10,983 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772301361176_270faeab (分数: 0.014286)
2025-08-01 00:34:10,983 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,983 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753772557471804_a0d5d936
2025-08-01 00:34:10,984 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,984 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:34:10,984 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,984 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:34:10,984 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753772557471804_a0d5d936 的内容，该组将被丢弃
2025-08-01 00:34:10,984 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753772557471804_a0d5d936 的内容，该组将被丢弃
2025-08-01 00:34:10,984 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772557471804_a0d5d936 (分数: 0.014286)
2025-08-01 00:34:10,984 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772557471804_a0d5d936 (分数: 0.014286)
2025-08-01 00:34:10,984 rag.components.base DEBUG: 🎯 扩展完成: 6/19 个big chunk组成功获取内容
2025-08-01 00:34:10,984 rag.components.base DEBUG: 🎯 扩展完成: 6/19 个big chunk组成功获取内容
2025-08-01 00:34:10,984 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:34:10,984 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:34:10,984 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:34:10,984 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:34:10,984 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:34:10,984 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 3 个结果
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #1 ID: fallback_doc_1753772645724556_0e91bf6b, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #1 ID: fallback_doc_1753772645724556_0e91bf6b, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #2 ID: doc_1753774432664375_30479dce, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #2 ID: doc_1753774432664375_30479dce, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #3 ID: doc_1753772249816965_3bf29d36, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:34:10,984 rag.components.base DEBUG:    #3 ID: doc_1753772249816965_3bf29d36, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:34:10,985 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:34:10,985 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:34:10,985 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:34:10,985 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:34:10,987 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:34:10,987 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:34:11,242 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 9200
2025-08-01 00:34:11,242 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 9200
2025-08-01 00:34:11,244 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:34:11,244 rag.components.reranker.base_reranker DEBUG: 重排完成: 3 -> 3
2025-08-01 00:34:11,244 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:34:11,244 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:34:11,244 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
# 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对使用率、CPU绝对使用率、CPU配额、内存使用量、内存使用率和内存配额等。
当查询的VRU没有进行CPU和内存资源配额时，该VRU的CPU相对使用率、CPU绝对使用率、内存使用量和内存使用率显示为"N/A"。
具体查询方式：
* 当指定VRU名称时，该命令查询指定VRU的CPU和内存资源配额和使用情况。
* 当指定VRU类型时，该命令查询指定类型下的所有VRU的CPU和内存资源配额和使用情况。
* 当不指定VRU名称和VRU类型时，该命令查询所有VRU的CPU和内存资源配额和使用情况。
## 注意事项
无。
## 输入参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-64 | 该参数用于查询特定VRU的CPU和内存资源配额使用情况，具体VRU名称可以通过SHOW VRU命令进行查询。
VRUTYPE | VRU类型 | 参数可选性: 任选
参数类型: 字符串
参数范围: 0-32 | 该参数用于查询指定VRU类型的CPU和内存资源配额使用情况，VRU类型可以通过SHOW VRU命令进行查询。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前查询到的VRU的名称。
VRUTYPE | VRU类型 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前查询到的VRU的类型。
CPURELATIVEUSEDRATIO | CPU相对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前查询到的VRU的CPU相对使用率，指容器的CPU使用量相对CPU配额的百分比。
CPUABSOLUTEUSEDRATIO | CPU绝对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的CPU绝对使用率，指容器的CPU使用量相对1 CORE的百分比。
CPULIMIT | CPU配额 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前NF中部署的该VRU使用的CPU限额，表示此容器最多使用的CPU量，不包含排他核。
MEMUSED | 内存使用量（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU已经使用的内存，以M为单位。
MEMUSEDRATIO | 内存使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的内存使用率，指容器的内存使用量相对内存配额的百分比。
MEMLIMIT | 内存配额（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU使用的内存限额，表示此容器最多使用的内存量，不包含巨页，以M为单位。
## 命令举例
这个示例查询了名称为"vru-ips-0"的容器CPU和内存资源配额和使用情况。
SHOW VRUSTAT
(No.3) : SHOW VRUSTAT:VRUNAME="vru-ips-0"
VRU名称     VRU类型  CPU相对使用率（%）   CPU绝对使用率（%）  CPU配额  内存使用量（MB）  内存使用率（%）  内存配额（MB）
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
vru-ips-0   vru-ips         12                14                 2.5        800             78            1024
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
记录数：1
执行成功开始时间:2020-07-23 17:44:58 耗时: 1.261 秒

文档2 - 文档2:
# 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对使用率、CPU绝对使用率、CPU配额、内存使用量、内存使用率、内存配额和内存CPU限额标记是否生效等信息。
当查询的VRU没有进行CPU和内存资源配额时，该VRU的CPU相对使用率、CPU绝对使用率、内存使用量和内存使用率显示为"N/A"。
具体查询方式：
* 当指定VRU名称时，该命令查询指定VRU的CPU和内存资源配额和使用情况。
* 当指定VRU类型时，该命令查询指定类型下的所有VRU的CPU和内存资源配额和使用情况。
* 当不指定VRU名称和VRU类型时，该命令查询所有VRU的CPU和内存资源配额和使用情况。
## 注意事项
无。
## 输入参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-64 | 该参数用于查询特定VRU的CPU和内存资源配额使用情况，具体VRU名称可以通过SHOW VRU命令进行查询。
VRUTYPE | VRU类型 | 参数可选性: 任选
参数类型: 字符串
参数范围: 0-32 | 该参数用于查询指定VRU类型的CPU和内存资源配额使用情况，VRU类型可以通过SHOW VRU命令进行查询。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前查询到的VRU的名称。
VRUTYPE | VRU类型 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前查询到的VRU的类型。
CPURELATIVEUSEDRATIO | CPU相对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前查询到的VRU的CPU相对使用率，指容器的CPU使用量相对CPU配额的百分比。
CPUABSOLUTEUSEDRATIO | CPU绝对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的CPU绝对使用率，指容器的CPU使用量相对1 CORE的百分比。
CPULIMIT | CPU配额 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前NF中部署的该VRU使用的CPU限额，表示此容器最多使用的CPU量，不包含排他核。
MEMUSED | 内存使用量（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU已经使用的内存，以M为单位。
MEMUSEDRATIO | 内存使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的内存使用率，指容器的内存使用量相对内存配额的百分比。
MEMLIMIT | 内存配额（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU使用的内存限额，表示此容器最多使用的内存量，不包含巨页，以M为单位。
LIMITENABLEFLAG | 内存CPU限额生效标记 | 参数可选性: 必选
参数类型: 枚举，参见枚举定义
参数范围: 0-2 | 该参数用于显示当前NF中部署的该VRU的“CPU配额”和“内存配额”是否生效。
* 否：表示该VRU的“CPU配额”和“内存配额”未生效。
* 是：表示该VRU的“CPU配额”和“内存配额”生效。
* 未配置：表示运维人员未配置过该VRU的“CPU配额”和“内存配额”的生效标记。
## 命令举例
这个示例查询了名称为"vru-ips-0"的容器CPU和内存资源配额和使用情况。
SHOW VRUSTAT
(No.3) : SHOW VRUSTAT:VRUNAME="vru-ips-0"
VRU名称     VRU类型  CPU相对使用率（%）   CPU绝对使用率（%）  CPU配额  内存使用量（MB）  内存使用率（%）  内存配额（MB）    内存CPU限额生效标记
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
vru-ips-0   vru-ips         12                14                 2.5        800             78            1024                        是
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
记录数：1
执行成功开始时间:2020-07-23 17:44:58 耗时: 1.261 秒

文档3 - 文档3:
参数范围:1-50
＜ _since-id_ ＞ | 显示自配置回退点ID之后的所有配置回退点信息。参数范围：1000000001-1999999999
＜ _at-id_ ＞ | 显示某配置回退点信息。
---
---
用户问题：使用的entry_point
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:34:11,244 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
# 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对使用率、CPU绝对使用率、CPU配额、内存使用量、内存使用率和内存配额等。
当查询的VRU没有进行CPU和内存资源配额时，该VRU的CPU相对使用率、CPU绝对使用率、内存使用量和内存使用率显示为"N/A"。
具体查询方式：
* 当指定VRU名称时，该命令查询指定VRU的CPU和内存资源配额和使用情况。
* 当指定VRU类型时，该命令查询指定类型下的所有VRU的CPU和内存资源配额和使用情况。
* 当不指定VRU名称和VRU类型时，该命令查询所有VRU的CPU和内存资源配额和使用情况。
## 注意事项
无。
## 输入参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-64 | 该参数用于查询特定VRU的CPU和内存资源配额使用情况，具体VRU名称可以通过SHOW VRU命令进行查询。
VRUTYPE | VRU类型 | 参数可选性: 任选
参数类型: 字符串
参数范围: 0-32 | 该参数用于查询指定VRU类型的CPU和内存资源配额使用情况，VRU类型可以通过SHOW VRU命令进行查询。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前查询到的VRU的名称。
VRUTYPE | VRU类型 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前查询到的VRU的类型。
CPURELATIVEUSEDRATIO | CPU相对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前查询到的VRU的CPU相对使用率，指容器的CPU使用量相对CPU配额的百分比。
CPUABSOLUTEUSEDRATIO | CPU绝对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的CPU绝对使用率，指容器的CPU使用量相对1 CORE的百分比。
CPULIMIT | CPU配额 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前NF中部署的该VRU使用的CPU限额，表示此容器最多使用的CPU量，不包含排他核。
MEMUSED | 内存使用量（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU已经使用的内存，以M为单位。
MEMUSEDRATIO | 内存使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的内存使用率，指容器的内存使用量相对内存配额的百分比。
MEMLIMIT | 内存配额（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU使用的内存限额，表示此容器最多使用的内存量，不包含巨页，以M为单位。
## 命令举例
这个示例查询了名称为"vru-ips-0"的容器CPU和内存资源配额和使用情况。
SHOW VRUSTAT
(No.3) : SHOW VRUSTAT:VRUNAME="vru-ips-0"
VRU名称     VRU类型  CPU相对使用率（%）   CPU绝对使用率（%）  CPU配额  内存使用量（MB）  内存使用率（%）  内存配额（MB）
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
vru-ips-0   vru-ips         12                14                 2.5        800             78            1024
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
记录数：1
执行成功开始时间:2020-07-23 17:44:58 耗时: 1.261 秒

文档2 - 文档2:
# 查询容器CPU和内存限额(SHOW VRUSTAT)
## 功能说明
该命令用于查询VRU（Virtual Running Unit，虚拟运行单元）的CPU和内存资源配额和使用情况，包括CPU相对使用率、CPU绝对使用率、CPU配额、内存使用量、内存使用率、内存配额和内存CPU限额标记是否生效等信息。
当查询的VRU没有进行CPU和内存资源配额时，该VRU的CPU相对使用率、CPU绝对使用率、内存使用量和内存使用率显示为"N/A"。
具体查询方式：
* 当指定VRU名称时，该命令查询指定VRU的CPU和内存资源配额和使用情况。
* 当指定VRU类型时，该命令查询指定类型下的所有VRU的CPU和内存资源配额和使用情况。
* 当不指定VRU名称和VRU类型时，该命令查询所有VRU的CPU和内存资源配额和使用情况。
## 注意事项
无。
## 输入参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-64 | 该参数用于查询特定VRU的CPU和内存资源配额使用情况，具体VRU名称可以通过SHOW VRU命令进行查询。
VRUTYPE | VRU类型 | 参数可选性: 任选
参数类型: 字符串
参数范围: 0-32 | 该参数用于查询指定VRU类型的CPU和内存资源配额使用情况，VRU类型可以通过SHOW VRU命令进行查询。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
VRUNAME | VRU名称 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前查询到的VRU的名称。
VRUTYPE | VRU类型 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前查询到的VRU的类型。
CPURELATIVEUSEDRATIO | CPU相对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前查询到的VRU的CPU相对使用率，指容器的CPU使用量相对CPU配额的百分比。
CPUABSOLUTEUSEDRATIO | CPU绝对使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的CPU绝对使用率，指容器的CPU使用量相对1 CORE的百分比。
CPULIMIT | CPU配额 | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-32 | 该参数用于显示当前NF中部署的该VRU使用的CPU限额，表示此容器最多使用的CPU量，不包含排他核。
MEMUSED | 内存使用量（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU已经使用的内存，以M为单位。
MEMUSEDRATIO | 内存使用率（%） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-8 | 该参数用于显示当前NF中部署的该VRU的内存使用率，指容器的内存使用量相对内存配额的百分比。
MEMLIMIT | 内存配额（MB） | 参数可选性: 必选
参数类型: 字符串
参数范围: 0-64 | 该参数用于显示当前NF中部署的该VRU使用的内存限额，表示此容器最多使用的内存量，不包含巨页，以M为单位。
LIMITENABLEFLAG | 内存CPU限额生效标记 | 参数可选性: 必选
参数类型: 枚举，参见枚举定义
参数范围: 0-2 | 该参数用于显示当前NF中部署的该VRU的“CPU配额”和“内存配额”是否生效。
* 否：表示该VRU的“CPU配额”和“内存配额”未生效。
* 是：表示该VRU的“CPU配额”和“内存配额”生效。
* 未配置：表示运维人员未配置过该VRU的“CPU配额”和“内存配额”的生效标记。
## 命令举例
这个示例查询了名称为"vru-ips-0"的容器CPU和内存资源配额和使用情况。
SHOW VRUSTAT
(No.3) : SHOW VRUSTAT:VRUNAME="vru-ips-0"
VRU名称     VRU类型  CPU相对使用率（%）   CPU绝对使用率（%）  CPU配额  内存使用量（MB）  内存使用率（%）  内存配额（MB）    内存CPU限额生效标记
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
vru-ips-0   vru-ips         12                14                 2.5        800             78            1024                        是
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
记录数：1
执行成功开始时间:2020-07-23 17:44:58 耗时: 1.261 秒

文档3 - 文档3:
参数范围:1-50
＜ _since-id_ ＞ | 显示自配置回退点ID之后的所有配置回退点信息。参数范围：1000000001-1999999999
＜ _at-id_ ＞ | 显示某配置回退点信息。
---
---
用户问题：使用的entry_point
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:34:11,247 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:34:11,247 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:34:12,388 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:34:12,388 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:34:12,393 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:34:12,393 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:36:36,820 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:36:36,821 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:36:36,821 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:36:36,822 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:36:36,822 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:36:36,822 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:36:36,822 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:36:36,822 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:36:36,822 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:36:36,823 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:36:36,823 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:36:36,823 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:36:36,846 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:36:36,882 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:36:36,882 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.036s]
2025-08-01 00:36:36,882 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:36:36,984 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:36:36,984 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:36:36,984 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:36:36,984 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:36:36,984 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:36:36,984 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:36:36,984 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:36:36,984 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:36:36,984 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:36:36,984 __main__ INFO: Pipeline初始化完成
2025-08-01 00:36:42,162 __main__ INFO: 🎯 流式搜索使用的entry_point: query_rewriter
2025-08-01 00:36:42,162 __main__ INFO: 🎯 流式搜索使用的entry_point: query_rewriter
2025-08-01 00:36:42,664 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: query_rewriter
2025-08-01 00:36:42,664 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: query_rewriter
2025-08-01 00:36:42,665 rag.components.base DEBUG: 组件 query_rewriter 开始处理数据
2025-08-01 00:36:42,665 rag.components.base DEBUG: 组件 query_rewriter 开始处理数据
2025-08-01 00:36:42,666 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 请将下列用户查询改写为更适合检索的表达，直接输出改写内容，格式为<output>改写内容</output>：
原始查询：发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:36:42,666 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 请将下列用户查询改写为更适合检索的表达，直接输出改写内容，格式为<output>改写内容</output>：
原始查询：发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:36:42,673 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:36:42,673 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:36:43,607 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:36:43,607 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:36:43,609 rag.components.base DEBUG: 查询优化结果: {'expanded_queries': ['发布虚机时最多可以为虚机分配几块网卡？', '虚拟机最多支持多少块网卡'], 'rewritten_query': '虚拟机最多支持多少块网卡', 'expansion_type': 'rewrite', 'original_query': '发布虚机时最多可以为虚机分配几块网卡？'}
2025-08-01 00:36:43,609 rag.components.base DEBUG: 查询优化结果: {'expanded_queries': ['发布虚机时最多可以为虚机分配几块网卡？', '虚拟机最多支持多少块网卡'], 'rewritten_query': '虚拟机最多支持多少块网卡', 'expansion_type': 'rewrite', 'original_query': '发布虚机时最多可以为虚机分配几块网卡？'}
2025-08-01 00:36:43,610 rag.components.base DEBUG: 组件 query_rewriter 处理完成
2025-08-01 00:36:43,610 rag.components.base DEBUG: 组件 query_rewriter 处理完成
2025-08-01 00:36:43,610 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:36:43,610 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:36:43,610 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:36:43,610 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:36:43,610 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:36:43,610 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:36:43,610 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:36:43,610 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:36:43,629 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,629 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,629 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.018s]
2025-08-01 00:36:43,629 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.018s]
2025-08-01 00:36:43,639 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,639 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,640 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:36:43,640 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:36:43,651 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,651 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:43,651 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.011s]
2025-08-01 00:36:43,651 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.011s]
2025-08-01 00:36:43,651 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:36:43,651 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:36:43,651 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:36:43,651 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:36:43,651 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:36:43,651 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:36:43,749 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f624acd2-1dd7-4c85-839a-61898a69e81e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x172d89fc0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:36:43,749 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f624acd2-1dd7-4c85-839a-61898a69e81e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x172d89fc0>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:36:43,762 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:36:43,762 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:36:43,763 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:36:43,763 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:36:43,763 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17333e590>
2025-08-01 00:36:43,763 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17333e590>
2025-08-01 00:36:43,763 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:36:43,763 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:36:43,764 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:36:43,906 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:36:43 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:36:43,906 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:36:43 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:36:43,906 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:36:43,906 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:36:43,907 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:36:43,907 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:36:43 GMT', 'server': 'uvicorn'})
2025-08-01 00:36:43,907 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:36:43 GMT', 'server': 'uvicorn'})
2025-08-01 00:36:43,907 openai._base_client DEBUG: request_id: None
2025-08-01 00:36:43,907 openai._base_client DEBUG: request_id: None
2025-08-01 00:36:43,909 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:36:43,909 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:36:43,909 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:36:43,909 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:36:43,909 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:36:43,909 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:36:43,909 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:36:43,909 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:36:43,910 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:36:43,910 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:36:44,068 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,068 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,069 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.157s]
2025-08-01 00:36:44,069 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.157s]
2025-08-01 00:36:44,163 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,163 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,164 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.074s]
2025-08-01 00:36:44,164 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.074s]
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:36:44,184 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:36:44,184 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:36:44,184 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:36:44,184 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:36:44,184 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:36:44,184 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:36:44,184 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:36:44,185 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:36:44,185 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:36:44,186 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:36:44,187 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,187 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,187 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,188 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,188 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,188 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:36:44,189 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:36:44,190 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:36:44,191 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:36:44,192 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:36:44,193 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:36:44,193 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:36:44,193 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:36:44,194 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:36:44,195 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,196 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:36:44,197 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:36:44,198 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:36:44,198 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:36:44,198 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:36:44,198 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395012542_222ef640, 排名: 9, 分数: 0.8538
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395012542_222ef640, 排名: 9, 分数: 0.8538
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 10, 分数: 0.8494
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 10, 分数: 0.8494
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 11, 分数: 0.8488
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 11, 分数: 0.8488
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394864786_6b5532b8, 排名: 12, 分数: 0.8487
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394864786_6b5532b8, 排名: 12, 分数: 0.8487
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 13, 分数: 0.8482
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 13, 分数: 0.8482
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 14, 分数: 0.8480
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 14, 分数: 0.8480
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 15, 分数: 0.8455
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 15, 分数: 0.8455
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 16, 分数: 0.8455
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 16, 分数: 0.8455
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975255_a91eab64, 排名: 17, 分数: 0.8453
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975255_a91eab64, 排名: 17, 分数: 0.8453
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011787_8dfbe71e, 排名: 18, 分数: 0.8447
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011787_8dfbe71e, 排名: 18, 分数: 0.8447
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394864025_2ed1697c, 排名: 19, 分数: 0.8437
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394864025_2ed1697c, 排名: 19, 分数: 0.8437
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 20, 分数: 0.8415
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 20, 分数: 0.8415
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 21, 分数: 0.8414
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 21, 分数: 0.8414
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772249811013_b6b97286, 排名: 22, 分数: 0.8399
2025-08-01 00:36:44,199 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772249811013_b6b97286, 排名: 22, 分数: 0.8399
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 23, 分数: 0.8395
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 23, 分数: 0.8395
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 24, 分数: 0.8392
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 24, 分数: 0.8392
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863524_77733593, 排名: 25, 分数: 0.8389
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863524_77733593, 排名: 25, 分数: 0.8389
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395012555_316c5000, 排名: 26, 分数: 0.8377
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395012555_316c5000, 排名: 26, 分数: 0.8377
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975237_91de800e, 排名: 27, 分数: 0.8367
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975237_91de800e, 排名: 27, 分数: 0.8367
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 28, 分数: 0.8358
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 28, 分数: 0.8358
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 29, 分数: 0.8358
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 29, 分数: 0.8358
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 30, 分数: 0.8355
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 30, 分数: 0.8355
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863401_152ca999, 排名: 31, 分数: 0.8354
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863401_152ca999, 排名: 31, 分数: 0.8354
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866372_46491623, 排名: 32, 分数: 0.8350
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866372_46491623, 排名: 32, 分数: 0.8350
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 33, 分数: 0.8348
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 33, 分数: 0.8348
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975180_b42c425a, 排名: 34, 分数: 0.8346
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975180_b42c425a, 排名: 34, 分数: 0.8346
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975020_442366e7, 排名: 35, 分数: 0.8343
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975020_442366e7, 排名: 35, 分数: 0.8343
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 36, 分数: 0.8341
2025-08-01 00:36:44,200 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 36, 分数: 0.8341
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975117_0a67320f, 排名: 37, 分数: 0.8333
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975117_0a67320f, 排名: 37, 分数: 0.8333
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717452119_65a44862, 排名: 38, 分数: 0.8332
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717452119_65a44862, 排名: 38, 分数: 0.8332
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 39, 分数: 0.8331
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 39, 分数: 0.8331
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866351_4e88de80, 排名: 40, 分数: 0.8330
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866351_4e88de80, 排名: 40, 分数: 0.8330
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:36:44,201 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,201 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:36:44,201 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,201 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:36:44,201 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:36:44,202 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,202 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:36:44,203 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753773395012542_222ef640: RRF分数=0.014493
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753773395012542_222ef640: RRF分数=0.014493
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753773395012542_222ef640 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753773395012542_222ef640 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774832930662_a4136c85: RRF分数=0.014286
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774832930662_a4136c85: RRF分数=0.014286
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:36:44,204 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,204 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,205 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,205 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:36:44,205 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,206 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:36:44,206 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:36:44,206 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:36:44,207 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:36:44,207 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:36:44,207 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,208 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,208 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,209 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,209 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,209 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753773395012542_222ef640
2025-08-01 00:36:44,210 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753773395012542_222ef640
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8538
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8538
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,210 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: （可选）如果在TT3超时前，UE继续发送Attach Request消息。MME丢弃该用户的附着请求信令，对这部分丢弃的信令单独统计，黑名单TT3超时后，再将用户从黑名单移除。
2025-08-01 00:36:44,210 rag.components.base DEBUG:    📝 内容: （可选）如果在TT3超时前，UE继续发送Attach Request消息。MME丢弃该用户的附着请求信令，对这部分丢弃的信令单独统计，黑名单TT3超时后，再将用户从黑名单移除。
2025-08-01 00:36:44,211 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:36:44,211 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:36:44,211 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:36:44,211 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,211 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,211 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:36:44,212 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:36:44,212 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:36:44,212 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:36:44,212 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:36:44,212 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:36:44,212 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774906491998_2effca61
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,212 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,212 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,212 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,212 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:36:44,212 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,212 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:36:44,212 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:36:44,213 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,213 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,213 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:36:44,213 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:36:44,213 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,213 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753774906491979_2c991d11
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,214 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,214 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,214 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:36:44,214 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774929569506_5decf883
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:36:44,214 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,214 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:36:44,214 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,215 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753774906492004_7180119e
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,215 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,215 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:36:44,215 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:36:44,215 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:36:44,215 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,216 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:36:44,216 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,216 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:36:44,216 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,216 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:36:44,216 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:36:44,216 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:36:44,216 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,216 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,217 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,217 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,217 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:36:44,217 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753773395012542_222ef640
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753773395012542_222ef640
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-20 拥塞及过负荷控制/topics/1604566644449.txt', 'file_type': '.txt', 'filename': '1604566644449.txt', 'chunk_id': '19932e691a02634b_L2_71', 'parent_id': '19932e691a02634b_L1_10', 'root_id': '19932e691a02634b', 'chunk_index': 88, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 88}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-20 拥塞及过负荷控制/topics/1604566644449.txt', 'file_type': '.txt', 'filename': '1604566644449.txt', 'chunk_id': '19932e691a02634b_L2_71', 'parent_id': '19932e691a02634b_L1_10', 'root_id': '19932e691a02634b', 'chunk_index': 88, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 88}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: 19932e691a02634b_L1_10
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: 19932e691a02634b_L1_10
2025-08-01 00:36:44,217 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 19932e691a02634b_L1_10
2025-08-01 00:36:44,217 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 19932e691a02634b_L1_10
2025-08-01 00:36:44,217 rag.components.base DEBUG:    ✅ 添加到big chunk组 19932e691a02634b_L1_10，当前最高分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG:    ✅ 添加到big chunk组 19932e691a02634b_L1_10，当前最高分数: 0.014493
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774832930662_a4136c85
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774832930662_a4136c85
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:36:44,217 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,217 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,217 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,217 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:36:44,217 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753772058228412_3395779e
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:36:44,218 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:36:44,218 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:36:44,218 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,218 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:36:44,218 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:36:44,218 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:36:44,218 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:36:44,218 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:36:44,218 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 19932e691a02634b_L1_10: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 19932e691a02634b_L1_10: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:36:44,219 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:36:44,219 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:36:44,224 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,224 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,224 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:36:44,224 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:36:44,224 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:36:44,224 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:36:44,224 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:36:44,224 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:36:44,224 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,224 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:36:44,227 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,227 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,227 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,227 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,227 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:36:44,227 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:36:44,227 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:36:44,227 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:36:44,227 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,227 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:36:44,230 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,230 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,230 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:36:44,230 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:36:44,230 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:36:44,230 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:36:44,230 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:36:44,230 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:36:44,230 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,230 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:36:44,231 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,231 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,231 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,231 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,231 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:36:44,231 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:36:44,231 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:36:44,231 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:36:44,232 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,232 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:36:44,234 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,234 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,234 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,234 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,234 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:36:44,234 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:36:44,234 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:36:44,234 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:36:44,234 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:36:44,234 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:36:44,235 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,235 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,235 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,235 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,235 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:36:44,235 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:36:44,235 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:36:44,235 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:36:44,235 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,235 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:36:44,237 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,237 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,238 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,238 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,238 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:36:44,238 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:36:44,238 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:36:44,238 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:36:44,238 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,238 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:36:44,239 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,239 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,239 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,239 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,239 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:36:44,239 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:36:44,240 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:36:44,240 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:36:44,240 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:36:44,240 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:36:44,241 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,241 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,241 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,241 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,241 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:36:44,241 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:36:44,241 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:36:44,241 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:36:44,241 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,241 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:36:44,242 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,242 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,242 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,242 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,243 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:36:44,243 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:36:44,243 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:36:44,243 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:36:44,243 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:36:44,243 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:36:44,244 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,244 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,244 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,244 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,244 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:36:44,244 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:36:44,244 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:36:44,244 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:36:44,244 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,244 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:36:44,246 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,246 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,246 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,246 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,246 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:36:44,246 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:36:44,246 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:36:44,246 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:36:44,246 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,246 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:36:44,248 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,248 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,248 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,248 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,248 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:36:44,248 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:36:44,248 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:36:44,248 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:36:44,248 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,248 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:36:44,250 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,250 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,250 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,250 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,250 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:36:44,250 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:36:44,250 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:36:44,250 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:36:44,250 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:36:44,250 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:36:44,252 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,252 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,252 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,252 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,252 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:36:44,252 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:36:44,252 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:36:44,252 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:36:44,252 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,252 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:36:44,254 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,254 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,254 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,254 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:36:44,254 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:36:44,254 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:36:44,254 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:36:44,254 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:36:44,254 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 19932e691a02634b_L1_10
2025-08-01 00:36:44,254 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 19932e691a02634b_L1_10
2025-08-01 00:36:44,259 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,259 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,259 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:36:44,259 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:36:44,259 rag.components.base DEBUG:    ✅ 成功获取big chunk 19932e691a02634b_L1_10，包含 1 个small chunks
2025-08-01 00:36:44,259 rag.components.base DEBUG:    ✅ 成功获取big chunk 19932e691a02634b_L1_10，包含 1 个small chunks
2025-08-01 00:36:44,259 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:36:44,259 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:36:44,259 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:36:44,259 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:36:44,261 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,261 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,261 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,261 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,261 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:36:44,261 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:36:44,261 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014286)
2025-08-01 00:36:44,261 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014286)
2025-08-01 00:36:44,261 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:36:44,261 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:36:44,263 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,263 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:36:44,263 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,263 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:36:44,263 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:36:44,263 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:36:44,263 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:36:44,263 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:36:44,263 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:36:44,263 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:36:44,263 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:36:44,263 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:36:44,263 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:36:44,263 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:36:44,263 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:36:44,263 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #1 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #2 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #3 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #3 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #4 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:36:44,263 rag.components.base DEBUG:    #4 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:36:44,264 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:36:44,264 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:36:44,264 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:36:44,264 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:36:44,264 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:36:44,264 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:36:44,265 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:36:44,265 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:36:44,732 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 22382
2025-08-01 00:36:44,732 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 22382
2025-08-01 00:36:44,778 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:36:44,778 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:36:44,779 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:36:44,779 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:36:44,780 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档7 - 文档7:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档8 - 文档8:
VPN
基本信息
* 产品大类：云基础计算
* 产品小类：网络
* 产品名称：虚拟专用网络
* 产品ID：zte-vpn-connection
* 产品标题：虚拟专用网络
* 产品描述：虚拟专用网络（Virtual Private Network）用于搭建用户本地数据中心与云管平台VPC之间便捷、灵活，即开即用的IPsec加密连接通道，实现灵活一体，可伸缩的混合云计算环境。
* 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_list/connection_create
* 产品资源详情页面URL：-
* 产品控制台页面URL：/network-portal/networkResource/services/zte-vpn/connection_list
* 产品管理门户页面URL：-
资源实施接口信息
* 微服务名：network
* 版本号：-
* 资源申请接口URL：/api/v1.0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-order
* 资源管理接口URL：-
配额项
key| 名称| 单位
---|---|---
vpn-connection| 虚拟专用网络| 个

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:36:44,780 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机类型的规格及虚机数量信息。
以商用大规格场景为例，GSU各个虚机类型配置的规格和默认虚机个数参见下表。
虚机类型| 虚机规格| 虚机初始个数| 虚机最大个数
---|---|---|---
GSU (HTTP LB)| GSU-Common-C8| 2| 16
GSU (Policy Control)| GSU-Common-C8M32 | 2| 128
GSU (SIG LB)| GSU-C8-N | 2| 16
GSU (GW)| GSU-CGW-C8 | 0| 16
虚机配置
虚机配置如图1所示。
图1 虚机配置
亲和策略参数配置参见表1。
表1 亲和策略参数配置参数名称| 参数含义
---|---
虚机配置| 虚机逻辑类型| GSU虚机的逻辑类型固定设置为GSU。
虚机规格数量信息| 虚机规格| 配置**GSU (HTTP LB)** 虚机类型对应的虚机规格。虚机规格与“快速创建VNF部署包”的步骤2中选择的**场景** 关联，建议保持默认值。
虚机初始个数|
* 虚机初始个数决定实例化ZXUN RCP时，系统生成的初始GSU虚机个数。
* 虚机最大个数决定实例化ZXUN RCP时，系统生成的最大可弹性伸缩的GSU虚机个数。
建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (PolicyControl)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (SIG LB)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
虚机规格数量信息| 虚机规格| 配置**GSU (GW)** 虚机类型对应的虚机规格。建议保持默认值。
虚机初始个数| 建议保持默认值。如果运营商有热备容灾功能，且内置UDSF，则需要参见“激活预埋服务（可选）”，在实例化后激活预埋的Ncudr_Access服务。
虚机最大个数
亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。
反亲和组个数：该参数建议设置为**1** 。
其余参数说明参见“OMU虚机配置”。
虚机网卡配置
虚机网卡配置如图2所示。
图2 虚机网卡配置
虚机网卡配置参数说明参见表2。
表2 虚机网卡配置参数说明参数名称| 参数含义
---|---
关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)虚机关联的网络平面名称，GSU虚机需要关联的网络平面如下。
* ZTE_PCF_x_MGT_NET
* ZTE_PCF_x_SERVICE_NET
其他参数说明参见“OMU虚机配置”。
虚机参数配置
参数说明参见“OMU虚机配置”。

文档4 - 文档4:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档5 - 文档5:
物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网卡异常连接时长
* C100030037 物理机网卡链路异常传输时长
* C100010001 虚机vCPU个数
* C100010002 虚机vCPU个数最大值
* C100010003 虚机vCPU个数最小值
* C100010008 虚机vCPU使用个数
* C100010009 虚机vCPU使用个数最大值
* C100010010 虚机vCPU使用个数最小值
* C100011001 虚机内存总量
* C100011002 虚机内存总量峰值
* C100011003 虚机内存总量谷值
* C100011004 虚机内存使用量
* C100011005 虚机内存使用量峰值
* C100011006 虚机内存使用量谷值
* C100011007 虚机内存可用量
* C100011008 虚机内存可用量峰值
* C100011009 虚机内存可用量谷值
* C100011010 虚机自启动以来内存换入
* C100011011 虚机内存换入
* C100011012 虚机自启动以来内存换出
* C100011013 虚机内存换出
* C100012001 虚机磁盘总容量
* C100012002 虚机磁盘总容量峰值
* C100012003 虚机磁盘总容量谷值
* C100012004 虚机磁盘使用量
* C100012005 虚机磁盘使用量峰值
* C100012006 虚机磁盘使用量谷值
* C100012007 虚机磁盘可用容量
* C100012008 虚机磁盘可用容量峰值
* C100012009 虚机磁盘可用容量谷值
* C100012010 虚机磁盘读取速率
* C100012011 虚机磁盘读取速率峰值
* C100012012 虚机磁盘读取速率谷值
* C100012013 虚机磁盘写入速率
* C100012014 虚机磁盘写入速率峰值
* C100012015 虚机磁盘写入速率谷值
* C100012016 虚机自启动以来磁盘读取字节数
* C100012017 虚机自启动以来磁盘写入字节数
* C100012018 虚机磁盘读取字节数
* C100012019 虚机磁盘写入字节数
* C100012020 虚机磁盘读IOPS
* C100012021 虚机最大磁盘读IOPS
* C100012022 虚机最小磁盘读IOPS
* C100012023 虚机磁盘写IOPS
* C100012024 虚机最大磁盘写IOPS
* C100012025 虚机最小磁盘写IOPS
* C100012026 虚机磁盘总分配空间
* C100012027 虚机磁盘总分配空间峰值
* C100012028 虚机磁盘总分配空间谷值
* C100012032 虚机本地盘总空间
* C100012033 虚机自启动以来磁盘读时延
* C100012034 虚机磁盘读时延
* C100012035 虚机自启动以来磁盘写时延
* C100012036 虚机磁盘写时延
* C100013005 虚机运行时长
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013019 虚机平均调度延迟
* C100020001 主机vCPU个数
* C100020002 主机vCPU个数最大值
* C100020003 主机vCPU个数最小值
* C100020004 主机空闲vCPU个数
* C100020005 主机空闲vCPU个数最大值
* C100020006 主机空闲vCPU个数最小值
* C100020007 主机CPU平均使用率
* C100020008 主机CPU使用率峰值
* C100020009 主机CPU使用率谷值
* C100020010 主机CPU频率
* C100020011 主机CPU频率峰值
* C100020012 主机CPU频率谷值
* C100020013 主机物理CPU数目
* C100020014 主机物理CPU最大数目
* C100020015 主机物理CPU最小数目
* C100020016 主机CPU核数
* C100020017 主机CPU最大核数
* C100020018 主机CPU最小核数
* C100020019 主机vCPU使用个数
* C100020020

文档6 - 文档6:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档7 - 文档7:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档8 - 文档8:
VPN
基本信息
* 产品大类：云基础计算
* 产品小类：网络
* 产品名称：虚拟专用网络
* 产品ID：zte-vpn-connection
* 产品标题：虚拟专用网络
* 产品描述：虚拟专用网络（Virtual Private Network）用于搭建用户本地数据中心与云管平台VPC之间便捷、灵活，即开即用的IPsec加密连接通道，实现灵活一体，可伸缩的混合云计算环境。
* 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_list/connection_create
* 产品资源详情页面URL：-
* 产品控制台页面URL：/network-portal/networkResource/services/zte-vpn/connection_list
* 产品管理门户页面URL：-
资源实施接口信息
* 微服务名：network
* 版本号：-
* 资源申请接口URL：/api/v1.0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-order
* 资源管理接口URL：-
配额项
key| 名称| 单位
---|---|---
vpn-connection| 虚拟专用网络| 个

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:36:44,786 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:36:44,786 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:36:46,216 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:36:46,216 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:36:46,219 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:36:46,219 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:39:47,472 __main__ INFO: 初始化ES搜索Pipeline...
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_search_pipeline
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_search_pipeline
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: query_rewriter (query.expansion)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: hyde_expander (query.expansion)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: multi_query_expander (query.expansion)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: es_retriever (retriever.elasticsearch)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: openai_reranker (reranker.openai)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 创建组件: openai_generator (generator.llm)
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 连接组件: query_rewriter -> es_retriever
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 连接组件: es_retriever -> openai_reranker
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 连接组件: openai_reranker -> openai_generator
2025-08-01 00:39:47,473 rag.components.base DEBUG: 初始化组件: query_rewriter
2025-08-01 00:39:47,473 rag.components.base INFO: 查询组件 query_rewriter 初始化成功
2025-08-01 00:39:47,473 rag.pipeline.builder DEBUG: 初始化组件: query_rewriter
2025-08-01 00:39:47,473 rag.components.base DEBUG: 初始化组件: hyde_expander
2025-08-01 00:39:47,474 rag.components.base INFO: 查询组件 hyde_expander 初始化成功
2025-08-01 00:39:47,474 rag.pipeline.builder DEBUG: 初始化组件: hyde_expander
2025-08-01 00:39:47,474 rag.components.base DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:39:47,474 rag.components.base INFO: 查询组件 multi_query_expander 初始化成功
2025-08-01 00:39:47,474 rag.pipeline.builder DEBUG: 初始化组件: multi_query_expander
2025-08-01 00:39:47,474 rag.components.base DEBUG: 初始化组件: es_retriever
2025-08-01 00:39:47,502 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-08-01 00:39:47,578 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-08-01 00:39:47,578 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.076s]
2025-08-01 00:39:47,579 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-08-01 00:39:47,677 rag.components.base DEBUG: Embedding客户端初始化完成: openai
2025-08-01 00:39:47,677 rag.components.base DEBUG: ES检索器初始化完成，检索类型: hybrid, 融合方法: rrf
2025-08-01 00:39:47,677 rag.pipeline.builder DEBUG: 初始化组件: es_retriever
2025-08-01 00:39:47,677 rag.components.reranker.base_reranker DEBUG: 初始化组件: openai_reranker
2025-08-01 00:39:47,677 rag.components.reranker.base_reranker INFO: OpenAI重排组件 openai_reranker 初始化成功
2025-08-01 00:39:47,677 rag.pipeline.builder DEBUG: 初始化组件: openai_reranker
2025-08-01 00:39:47,677 rag.pipeline.builder DEBUG: 初始化组件: openai_generator
2025-08-01 00:39:47,677 rag.pipeline.builder INFO: Pipeline构建完成: es_search_pipeline
2025-08-01 00:39:47,677 rag.pipeline.factory INFO: 成功创建Pipeline: es_search_pipeline
2025-08-01 00:39:47,677 __main__ INFO: Pipeline初始化完成
2025-08-01 00:39:58,121 __main__ INFO: 🎯 流式搜索使用的entry_point: query_rewriter
2025-08-01 00:39:58,121 __main__ INFO: 🎯 流式搜索使用的entry_point: query_rewriter
2025-08-01 00:39:58,121 __main__ INFO: 🎯 流式搜索使用的entry_point: query_rewriter
2025-08-01 00:39:58,628 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: query_rewriter
2025-08-01 00:39:58,628 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: query_rewriter
2025-08-01 00:39:58,628 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: query_rewriter
2025-08-01 00:39:58,630 rag.components.base DEBUG: 组件 query_rewriter 开始处理数据
2025-08-01 00:39:58,630 rag.components.base DEBUG: 组件 query_rewriter 开始处理数据
2025-08-01 00:39:58,630 rag.components.base DEBUG: 组件 query_rewriter 开始处理数据
2025-08-01 00:39:58,630 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 请将下列用户查询改写为更适合检索的表达，直接输出改写内容，格式为<output>改写内容</output>：
原始查询：发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:58,630 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 请将下列用户查询改写为更适合检索的表达，直接输出改写内容，格式为<output>改写内容</output>：
原始查询：发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:58,630 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 请将下列用户查询改写为更适合检索的表达，直接输出改写内容，格式为<output>改写内容</output>：
原始查询：发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:58,639 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:39:58,639 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:39:58,639 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:39:59,288 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:39:59,288 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:39:59,288 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:39:59,290 rag.components.base DEBUG: 查询优化结果: {'expanded_queries': ['发布虚机时最多可以为虚机分配几块网卡？', '虚拟机最多支持多少块网卡'], 'rewritten_query': '虚拟机最多支持多少块网卡', 'expansion_type': 'rewrite', 'original_query': '发布虚机时最多可以为虚机分配几块网卡？'}
2025-08-01 00:39:59,290 rag.components.base DEBUG: 查询优化结果: {'expanded_queries': ['发布虚机时最多可以为虚机分配几块网卡？', '虚拟机最多支持多少块网卡'], 'rewritten_query': '虚拟机最多支持多少块网卡', 'expansion_type': 'rewrite', 'original_query': '发布虚机时最多可以为虚机分配几块网卡？'}
2025-08-01 00:39:59,290 rag.components.base DEBUG: 查询优化结果: {'expanded_queries': ['发布虚机时最多可以为虚机分配几块网卡？', '虚拟机最多支持多少块网卡'], 'rewritten_query': '虚拟机最多支持多少块网卡', 'expansion_type': 'rewrite', 'original_query': '发布虚机时最多可以为虚机分配几块网卡？'}
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 query_rewriter 处理完成
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 query_rewriter 处理完成
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 query_rewriter 处理完成
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:39:59,291 rag.components.base DEBUG: 组件 es_retriever 开始处理数据
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行多查询检索，共 2 个查询
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行多查询检索，共 2 个查询
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行多查询检索，共 2 个查询
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 1: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 1: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 1: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 2: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 2: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,291 rag.components.base INFO:    查询 2: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行第 1 个查询: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行第 1 个查询: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,291 rag.components.base INFO: 🔍 执行第 1 个查询: 发布虚机时最多可以为虚机分配几块网卡？
2025-08-01 00:39:59,292 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,292 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,292 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,292 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:39:59,292 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:39:59,292 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '发布虚机时最多可以为虚机分配几块网卡？'
2025-08-01 00:39:59,292 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,292 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,292 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,311 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,311 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,311 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,311 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.019s]
2025-08-01 00:39:59,311 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.019s]
2025-08-01 00:39:59,311 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.019s]
2025-08-01 00:39:59,320 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,320 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,320 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,320 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.008s]
2025-08-01 00:39:59,320 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.008s]
2025-08-01 00:39:59,320 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.008s]
2025-08-01 00:39:59,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,330 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:39:59,330 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:39:59,330 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.010s]
2025-08-01 00:39:59,330 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,330 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,330 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '发布虚机时最多可以为虚机分配几块网卡？...' (长度: 19)
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,330 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,425 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b79edc02-d440-4412-91ff-3324d68e5a0f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x104d17880>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,425 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b79edc02-d440-4412-91ff-3324d68e5a0f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x104d17880>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,425 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b79edc02-d440-4412-91ff-3324d68e5a0f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x104d17880>, 'json_data': {'input': '发布虚机时最多可以为虚机分配几块网卡？', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,442 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,442 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,442 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f4760>
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f4760>
2025-08-01 00:39:59,443 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f4760>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,443 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,444 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,591 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:39:59,591 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:39:59,591 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:39:59,592 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:39:59,592 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:39:59,592 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:39:59,593 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:39:59,593 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:39:59,593 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:39:59,593 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:39:59,594 openai._base_client DEBUG: request_id: None
2025-08-01 00:39:59,594 openai._base_client DEBUG: request_id: None
2025-08-01 00:39:59,594 openai._base_client DEBUG: request_id: None
2025-08-01 00:39:59,595 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:39:59,595 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:39:59,595 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:39:59,595 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:39:59,595 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:39:59,595 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:39:59,595 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '发布虚机时最多可以为虚机分配几块网卡？', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:39:59,596 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:39:59,596 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:39:59,596 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.031179005280137062, -0.03751514479517937, -0.00384627771563828, 0.018776152282953262, -0.009039681404829025, 0.024768542498350143, 0.04180736839771271, 0.003836987307295203, 0.0005536573007702827, 0.00442461296916008, -0.00021600472973659635, 0.03716210275888443, 0.015617374330759048, -0.019472941756248474, -0.002487538382411003, -0.03179217875003815, -0.019101321697235107, -0.010117382742464542, -0.01962159015238285, 0.034467849880456924, 0.004062282387167215, -0.0012251881416887045, 0.008338247425854206, 0.054851267486810684, 0.045709386467933655, 0.017326831817626953, -0.030956033617258072, 0.004803202114999294, 0.052101269364356995, 0.018869059160351753, 0.012653696350753307, -0.03634453937411308, 0.004357256926596165, -0.030714478343725204, -0.0031611016020178795, -0.06990192085504532, -0.011399475857615471, -0.04433438926935196, -0.03249825909733772, -0.033557381480932236, -0.014028694480657578, -0.005091208498924971, 0.007376677822321653, -0.04225331172347069, 0.007204803172498941, -0.0067588575184345245, 0.020810779184103012, -0.021758412942290306, -0.041956014931201935, 0.023895233869552612, -0.048570871353149414, -0.0015596470329910517, 0.025827663019299507, -0.04949992150068283, 0.012467886321246624, 0.055854640901088715, -0.01984456367790699, -0.0008454378694295883, -0.029172251001000404, -0.031699273735284805, -0.024396920576691628, 0.053736403584480286, -0.031234748661518097, -0.03861142694950104, 0.016741527244448662, 0.014195923693478107, 0.04693573713302612, -0.011325151659548283, 0.02380232699215412, -0.06198639050126076, -0.018153687939047813, 0.022074289619922638, 0.012142717838287354, -0.027704348787665367, -0.06287828087806702, -0.01372210681438446, 0.05931071937084198, 0.017382575199007988, -0.011445928364992142, -0.022743208333849907, 0.048793841153383255, -0.03430062159895897, -0.016453521326184273, 0.0010161512764170766, 0.041510071605443954, 0.0412127748131752, 0.0009755052160471678, 0.045932359993457794, -0.0075810691341757774, -0.01461399719119072, -0.025270231068134308, 0.013146094046533108, 0.002059012884274125, -0.04362830892205238, -0.024545568972826004, 0.021015169098973274, -0.06629719585180283, 0.013610620982944965, 0.04440871626138687, 0.012523628771305084, 0.025864824652671814, 0.0060806493274867535, 0.016007576137781143, 0.011343732476234436, -0.034653663635253906, 0.028949279338121414, 0.005555734504014254, -0.016787979751825333, -0.0473816841840744, -0.02699826844036579, 0.008161727339029312, 0.05708099156618118, 0.03286988288164139, -0.01025674119591713, -0.05083775892853737, -0.018023621290922165, -0.02382090874016285, 0.0048775263130664825, 0.023969557136297226, -0.040952637791633606, 0.012793054804205894, -0.020420575514435768, 0.031606368720531464, -0.04076682776212692, -0.03483947366476059, -0.022650303319096565, -0.012848797254264355, 0.09558093547821045, -0.02534455433487892, 0.004173768684267998, -0.0028754177037626505, 0.0400979109108448, -0.02181415446102619, 0.0026547678280621767, -0.032461099326610565, 0.009559951722621918, -0.009717890061438084, -0.03660467267036438, -0.05730396509170532, -0.06941881030797958, 0.03188508376479149, 0.004220221657305956, 0.014623288065195084, -0.037533726543188095, -0.005829805042594671, -0.02448982745409012, 0.03680906444787979, -0.025325974449515343, 0.029135089367628098, -0.00044942920794710517, 0.0092858811840415, 0.03311143442988396, 0.018961964175105095, 0.0021217239554971457, 0.015152848325669765, 0.00871451385319233, 0.02844759076833725, 0.012923121452331543, 0.004236479755491018, 0.04069250449538231, -0.04578371345996857, 0.022631721571087837, -0.07398974895477295, -0.013034608215093613, -0.0036093692760914564, -6.82635945850052e-05, -0.020476318895816803, -0.005616122856736183, -0.035322580486536026, -0.004854300059378147, 0.031234748661518097, 0.020309090614318848, 0.006145683117210865, -0.0174568984657526, -0.02746279537677765, 0.021999966353178024, -0.0014028694713488221, 0.00333762145601213, -0.02460131235420704, -0.045932359993457794, -0.022111451253294945, -0.0067635029554367065, 0.024415502324700356, -0.01400082278996706, -0.02127530425786972, -0.0011531865457072854, 0.0694931373000145, -0.030602993443608284, 0.0034189135767519474, 0.016193386167287827, 0.0005289793480187654, 0.011418056674301624, -0.004705651663243771, -0.020030373707413673, 0.018664667382836342, 0.010897787287831306, -0.017559094354510307, 0.029135089367628098, 0.012077683582901955, -0.023207733407616615, -0.018562471494078636, -0.006257169414311647, 0.0602397695183754, 0.027611443772912025, -0.020011793822050095, -0.026942525058984756, 0.07796609401702881, -0.005839095450937748, 0.0014388702111318707, -0.034244880080223083, -0.00474978145211935, 0.018599633127450943, -0.0005356568726710975, 0.0030310340225696564, -0.037979669868946075, 0.001363384653814137, 0.0037069199606776237, 0.018673958256840706, -0.00689357053488493, -0.04418574273586273, -0.028503334149718285, 0.07209448516368866, -0.014307410456240177, 0.024304015561938286, 0.026738133281469345, 0.0025409588124603033, 0.03931750729680061, -0.0066427262499928474, 0.003518786747008562, -0.06206071376800537, -0.041844528168439865, -0.02125672437250614, -0.016462812200188637, -0.016304872930049896, 0.04589520022273064, 0.010869915597140789, -0.044371552765369415, 0.028280360624194145, 0.00018363304843660444, 0.017001662403345108, -0.04596952348947525, 0.03846277669072151, -0.04214182496070862, -0.04080399125814438, -0.03378035128116608, 0.08510121703147888, 0.02790874056518078, 0.029729682952165604, -0.023783747106790543, -0.005541798658668995, -0.009188330732285976, -0.03890872374176979, 0.004078540951013565, -0.010331065393984318, 0.033445894718170166, 0.017038824036717415, 0.04054385423660278, 0.00840328074991703, 0.05399653688073158, -0.014316700398921967, 0.012978864833712578, -0.03463508188724518, 0.027927320450544357, -0.00173036043997854, 0.012031231075525284, 0.012440014630556107, 0.0021170785184949636, -0.03350163623690605, -0.01664862222969532, 0.019565848633646965, -0.046675603836774826, 0.017345411702990532, 0.008459024131298065, 0.018627503886818886, -0.026719553396105766, -0.005857676733285189, -0.03143914043903351, -0.032795555889606476, 0.04938843846321106, 0.021962802857160568, -0.015338658355176449, 0.0353039987385273, -0.012170589528977871, 0.005862322170287371, 0.006633435841649771, 0.03244251757860184, -0.023003341630101204, -0.006628790404647589, 0.018246592953801155, -0.055408697575330734, -0.02746279537677765, -0.015310786664485931, 0.08703365176916122, -0.003674403065815568, -0.003967054653912783, -0.0015642923535779119, -0.03415197506546974, -0.14701329171657562, 0.032702650874853134, -0.025084421038627625, -0.0019475264707580209, -0.01196619775146246, -0.024842867627739906, -0.004043701570481062, 0.0030844546854496002, -0.04957424849271774, 0.03928034380078316, 0.007460292428731918, -0.05533437430858612, 0.010284611955285072, -0.05403370037674904, 0.015877509489655495, -0.021126655861735344, -0.006545175798237324, -0.02116381749510765, -0.004064605105668306, -0.023003341630101204, -0.0020508836023509502, -0.022743208333849907, 0.020253347232937813, 0.01196619775146246, -0.04091547802090645, -0.0206063874065876, 0.08123636245727539, 0.022353006526827812, -0.032702650874853134, -0.007330224849283695, 0.06265530735254288, 0.03231244906783104, 0.0018139751628041267, -0.018738990649580956, 0.026961106806993484, -0.044260066002607346, 0.04727019742131233, -0.02632935158908367, -0.013564168475568295, 0.003240071004256606, 0.00573690002784133, 0.02380232699215412, 0.018516018986701965, 0.02666381001472473, 0.04043237119913101, 0.006285041105002165, 0.018070073798298836, -0.05020600184798241, -0.03890872374176979, 0.00023298896849155426, 0.024954352527856827, 0.008793482556939125, -0.04329385235905647, -0.04916546493768692, -0.019491523504257202, 0.017995748668909073, -0.031364817172288895, 0.05867896229028702, -0.011817549355328083, -0.006354719866067171, -0.0014040307141840458, 0.02162834443151951, -0.002870772499591112, 0.01973307691514492, -0.048570871353149414, 0.014669740572571754, 0.04225331172347069, 0.011538833379745483, -0.021033750846982002, -0.048905327916145325, 0.02933948114514351, 0.037756696343421936, 0.00037133070873096585, -0.028949279338121414, 0.020309090614318848, -0.006359365303069353, -0.04782762750983238, -0.017010953277349472, -0.004143574740737677, -0.14939166605472565, 0.04489182308316231, 0.011594576761126518, 0.015236462466418743, -0.007260546088218689, 0.002225080970674753, -0.03327866271138191, -0.05488842725753784, -0.01339693833142519, 0.029265157878398895, 0.2079591304063797, 0.0267752967774868, -0.005416376516222954, -0.018934091553092003, 0.06269247084856033, -0.012207751162350178, 0.021758412942290306, 0.029915494844317436, 0.0074928090907633305, -0.01631416380405426, 0.014307410456240177, 0.031494881957769394, 0.01461399719119072, 0.017577676102519035, 0.013276161625981331, 0.005402441136538982, -0.021219560876488686, 0.015403692610561848, 0.06518232822418213, -0.024452663958072662, -0.019454361870884895, -0.008180308155715466, 0.016184097155928612, 0.02965535968542099, -0.06120598688721657, -0.03272123262286186, 0.0030380019452422857, 0.07354380190372467, -0.04942559823393822, 0.05366208031773567, -0.018627503886818886, 0.029729682952165604, 0.006345429457724094, -0.0043154493905603886, -0.030677316710352898, 0.01278376393020153, 0.023950975388288498, -0.02095942758023739, -0.005119079723954201, -0.004849654622375965, -0.009160459041595459, -0.02125672437250614, 0.037217848002910614, -0.011910454370081425, -0.027852997183799744, -0.048682358115911484, 0.03459791839122772, 0.05641207471489906, 0.0014423541724681854, -0.04032088443636894, -0.02909792773425579, -0.012477176263928413, 0.005267728120088577, -0.008686642162501812, -0.024118205532431602, -0.0597195029258728, -0.007701846305280924, 0.006944668013602495, -0.013322614133358002, 0.03220096230506897, 0.0023923104163259268, 0.0016850691754370928, -0.07250326871871948, 0.008793482556939125, 0.002302889246493578, 0.02294760011136532, -0.050428975373506546, -0.001205445732921362, -0.008305730298161507, -0.005026174709200859, -0.043479662388563156, -0.023393545299768448, 0.01861821487545967, -0.005671866238117218, 0.048459384590387344, -0.0005379795329645276, 0.006243233568966389, 0.04006074741482735, 0.0010289257625117898, -0.024545568972826004, -0.01803291030228138, 0.03197799250483513, -0.03177360072731972, 0.019435780122876167, -0.007539262063801289, -0.01814439706504345, 0.013638492673635483, 0.004849654622375965, -0.030695898458361626, -0.0465269535779953, -0.010693395510315895, -0.0021728218998759985, -0.007855139672756195, -0.0028638045769184828, -0.01993746869266033, 0.009838666766881943, 0.025288812816143036, 0.011055725626647472, -0.019026996567845345, -0.005481410305947065, -0.020030373707413673, -0.01230065617710352, -0.020885102450847626, 0.013313324190676212, 0.06882421672344208, 0.014836969785392284, 0.0006062068277969956, -0.006266459822654724, -0.008440443314611912, 0.019380036741495132, -0.01593325287103653, 0.022074289619922638, -0.009490272030234337, -0.04054385423660278, 0.002378374570980668, -0.02723982185125351, -0.025418879464268684, -0.0013180933892726898, 0.00864947959780693, 0.055185724049806595, -0.049908705055713654, -0.04544925317168236, -0.008616962470114231, -0.0016026156954467297, -0.01102785486727953, -0.05637491121888161, 0.012393562123179436, 0.05206410959362984, 0.036121565848588943, 0.0007484679808840156, 0.0019289454212412238, -0.02016044221818447, -0.016211967915296555, -0.01689017564058304, -0.029413806274533272, 0.03138339892029762, 0.0063082673586905, -0.030733060091733932, 0.02579049952328205, 0.04693573713302612, -0.003658144734799862, -0.019695915281772614, 0.0035907882265746593, 0.024657055735588074, 0.055966127663850784, -0.05124654248356819, 0.01847885549068451, 0.03175501897931099, 0.013025317341089249, 0.03509960696101189, -0.005866967141628265, 0.04440871626138687, -0.019918888807296753, -0.03905737027525902, 0.006977185141295195, 0.0034700115211308002, -0.008254632353782654, 0.0610945001244545, 0.04299655556678772, -0.019138483330607414, 0.007734362967312336, -0.006898215506225824, 0.042290475219488144, 0.04838506132364273, 0.011483089998364449, 0.034560758620500565, -0.04355398565530777, -0.013424810022115707, 0.007018992677330971, -0.052212756127119064, 0.044594526290893555, -0.033910419791936874, -0.05778707191348076, 0.020699292421340942, 0.07042218744754791, -0.03905737027525902, -0.04544925317168236, 0.023783747106790543, 0.01687159575521946, -0.01615622453391552, 0.04191885516047478, 0.017735613510012627, -0.039614804089069366, -0.038983047008514404, 0.017233924940228462, -0.011771096847951412, -0.02733272686600685, -0.009290525689721107, 0.0013006736990064383, 0.02162834443151951, -0.042624931782484055, 0.0801214948296547, -0.014028694480657578, -0.020457739010453224, 0.007994498126208782, 0.05447964370250702, -0.0053466977551579475, 0.03482089191675186, 0.002315663732588291, -0.00888174306601286, 0.043925605714321136, -0.04530060663819313, -0.01809794455766678, -0.04065534099936485, 0.006703114602714777, -0.0001826169027481228, 0.01680656149983406, 0.02160976454615593, 0.0007188544259406626, 0.0026268961373716593, -0.045820873230695724, -0.0064615607261657715, 0.007153705228120089, -0.0021124333143234253, 0.026868201792240143, -0.002034625271335244, 0.030026979744434357, 0.03207089751958847, 0.009792214259505272, -0.05091208219528198, -0.051209378987550735, 0.01136231329292059, 0.07019921392202377, -0.03439352661371231, 0.02820603735744953, -0.027072593569755554, -0.02095942758023739, -0.08324311673641205, 0.05986814945936203, 0.021907061338424683, 0.007209448143839836, -0.02733272686600685, 0.06354720145463943, 0.002118239877745509, 0.027165498584508896, -0.04251344874501228, 0.04466884955763817, -0.012282075360417366, -0.010674814693629742, 0.0062014260329306126, -0.017819229513406754, 0.02820603735744953, 0.03088170848786831, 0.029172251001000404, -0.01344339083880186, 0.057712748646736145, 0.0066938241943717, 0.013489844277501106, 0.040841151028871536, 0.0221486147493124, -0.033668868243694305, -0.003254006849601865, -0.03671615943312645, -0.037199266254901886, -0.004910042975097895, -0.03426346182823181, 0.01870182901620865, 0.004443194251507521, -0.03513677045702934, -0.05949652940034866, 0.011278698220849037, -0.02205570973455906, -0.047121547162532806, -0.01917564496397972, -0.006582337897270918, -0.029692521318793297, 0.028466172516345978, -0.0007380161550827324, -0.005402441136538982, 0.015124976634979248, 0.0047521041706204414, 0.009755052626132965, -0.052212756127119064, -0.013991531915962696, 0.05024316534399986, -0.003809115616604686, -0.000133260982693173, -0.0445573627948761, 0.05280734971165657, 0.010879206471145153, -0.026533743366599083, -0.02216719463467598, -0.008022368885576725, 0.062246523797512054, -0.018023621290922165, 0.0496114082634449, -0.007859785109758377, 0.007251255679875612, -0.014651159755885601, -0.04136142134666443, -0.029246576130390167, 0.017354702576994896, -0.012728020548820496, 0.033557381480932236, -0.08420933037996292, 0.02911650948226452, 0.023988138884305954, -0.045374929904937744, -0.0013076415052637458, 0.007046863902360201, -0.03781244158744812, -0.00238302000798285, -0.04946276172995567, -0.030454345047473907, -0.01803291030228138, -0.013461972586810589, -0.025846242904663086, 0.014251667074859142, -0.006800665054470301, 0.009151168167591095, -0.008180308155715466, 0.013629201799631119, -0.025994891300797462, 0.06715191900730133, -0.02954387292265892, -0.017614837735891342, 0.07878366112709045, -0.011297279968857765, -0.0075810691341757774, -0.008965357206761837, 0.027481375262141228, 0.009002519771456718, 0.004166800994426012, -0.031141843646764755, 0.03738507628440857, 0.003974022343754768, -0.03693913295865059, -0.01505994237959385, 0.011557414196431637, 0.0717228576540947, -0.034560758620500565, 0.010293902829289436, 0.02116381749510765, 0.01521788164973259, 0.018934091553092003, -0.03706919774413109, 0.026979688555002213, -0.035043865442276, 0.017131730914115906, -0.012932412326335907, 0.036102984100580215, -0.06573976576328278, 0.04418574273586273, -0.050428975373506546, 7.385242497548461e-05, -0.008031659759581089, 0.010581908747553825, 0.01885976828634739, 0.026738133281469345, 0.023114828392863274, 0.020309090614318848, 0.018980544060468674, -0.040729667991399765, -0.05228707939386368, 0.027704348787665367, -0.056709371507167816, -0.05106073245406151, 0.003056582994759083, 0.01488342322409153, 0.04366547241806984, -0.01676010899245739, 0.019565848633646965, 0.030844546854496002, 0.03606582060456276, 0.02049490064382553, -0.011891873553395271, 0.01774490438401699, 0.026310769841074944, 0.004854300059378147, 0.02391381375491619, 0.006577692460268736, -0.017447607591748238, -0.022761788219213486, -0.004052991978824139, 0.022557396441698074, 0.01796787790954113, 0.003446785267442465, -0.05644923821091652, 0.007924818433821201, -0.05511140078306198, -0.011232245713472366, -0.023616516962647438, -0.00650801369920373, -0.00276857684366405, 0.017614837735891342, 0.02337496355175972, -0.016499973833560944, -0.020086117088794708, 0.023876652121543884, -0.006442979909479618, -0.021126655861735344, -0.051989782601594925, -0.037645213305950165, 0.04500330984592438, -0.15994569659233093, 0.016797270625829697, 0.005643994547426701, 0.009875829331576824, -0.03227528929710388, -0.018162978813052177, -0.009690018370747566, -0.015608083456754684, 0.035211093723773956, -0.016462812200188637, 0.007567133288830519, -0.05020600184798241, 0.06960462033748627, -0.021962802857160568, 0.03420771658420563, -0.0007095639011822641, 0.05106073245406151, 0.05711815506219864, 0.019918888807296753, -0.029190832749009132, 0.004213253501802683, -0.011984778568148613, 0.010498294606804848, -0.009996606037020683, -0.0012728021247312427, -0.008328956551849842, 0.005165532696992159, 0.005945936776697636, -0.030472924932837486, 0.012514338828623295, -0.003202908905223012, 0.020532062277197838, 0.01962159015238285, 0.05191545933485031, -0.03138339892029762, -0.03781244158744812, -0.003516464028507471, -0.047233033925294876, -0.013266871683299541, 0.00039804098196327686, -0.05942220613360405, 0.03420771658420563, 0.019695915281772614, -0.004378160461783409, 0.02107091248035431, 0.057601261883974075, 0.007520680781453848, 0.0050540463998913765, -0.022780369967222214, 0.05217559263110161, 0.0047521041706204414, 0.018228013068437576, -0.050317488610744476, -0.0031285847071558237, 0.033130016177892685, 0.04065534099936485, -0.03409622982144356, 0.012644406408071518, 0.03905737027525902, 0.02645941823720932, -0.024935772642493248, -0.0014226117637008429, -0.03561987727880478, 0.0035048509016633034, -0.05511140078306198, -0.03827696666121483, -0.010860624723136425, 0.0019428812665864825, 0.008398635312914848, 0.027927320450544357, -0.032479677349328995, -0.012003359384834766, 0.010897787287831306, -0.05247288942337036, -0.009578532539308071, -0.0033678156323730946, 0.00010284902964485809, 0.009894410148262978, -0.04087831452488899, -0.032944206148386, 0.0024062462616711855, -0.01971449702978134, -0.016416359692811966, -0.010777010582387447, -0.00022515009914059192, 0.006387236528098583, -0.023077666759490967, 0.00883993599563837, 0.016239838674664497, 0.013480553403496742, -0.045374929904937744, -0.010554037988185883, 0.02359793707728386, 0.04897965490818024, 0.005769416689872742, 0.007153705228120089, -0.001898751244880259, 0.0036651124246418476, -0.01689017564058304, 0.002677994081750512, -0.004854300059378147, -0.015673117712140083, 0.03823980689048767, -0.008756320923566818, -0.016657913103699684, 0.03129049018025398, 0.02426685392856598, -0.024564150720834732, 0.01908273994922638, 0.008013078942894936, 0.009025746025145054, -0.01335048582404852, 0.004619713872671127, 0.02933948114514351, -0.019119903445243835, -0.0058158691972494125, 0.04169588163495064, -0.01344339083880186, -0.014762645587325096, -0.03398474305868149, -0.048124924302101135, 0.03184792399406433, -0.01213342696428299, -0.039094533771276474, -0.053513430058956146, 0.0033329762518405914, -0.016453521326184273, 0.010581908747553825, 0.025084421038627625, -0.0236908420920372, 0.021442534402012825, 0.007543907035142183, -0.021646926179528236, 0.024062462151050568, -0.0054349577985703945, -0.06659448891878128, -0.03472798690199852, 0.06648300588130951, 0.01124153658747673, -0.02800164557993412, 0.03805399313569069, -0.007906237617135048, 0.006206071469932795, -0.00537921441718936, 0.005834450479596853, 0.00686105340719223, -0.014948456548154354, -0.00031674886122345924, -0.030491506680846214, -0.0602397695183754, 0.022966179996728897, 0.020197603851556778, 0.03729217126965523, -0.01586821861565113, -0.03849994018673897, 0.018358079716563225, -0.013211128301918507, 0.028614820912480354, 0.029265157878398895, 0.05224991962313652, 0.010498294606804848, 0.014706903137266636, -0.020792197436094284, -0.01421450451016426, 0.03285130113363266, 0.026533743366599083, -0.008472959510982037, 0.012848797254264355, -0.010972111485898495, 0.008171017281711102, 0.01928713172674179, 0.03857426345348358, -0.04020939767360687, 0.05035465210676193, 0.017661290243268013, -0.019491523504257202, 0.010451842099428177, -0.02787157893180847, 0.05273302644491196, -0.021795574575662613, 0.006182845216244459, 0.015143557451665401, -0.0029358062893152237, -0.006819246336817741, -0.006103875581175089, 0.023207733407616615, 0.05377356335520744, 0.06793233007192612, 0.016973791643977165, 0.046675603836774826, 0.0133876483887434, 0.019361456856131554, 0.0077111367136240005, -0.028596239164471626, 0.041733041405677795, -0.001224026782438159, 0.016462812200188637, 0.023746585473418236, 0.00877025630325079, 0.023356381803750992, -0.022650303319096565, -0.031457722187042236, -0.014307410456240177, 0.012551500461995602, -0.0381283201277256, -0.040841151028871536, 0.03251684084534645, 0.03428203985095024, -0.0423276349902153, 0.03305569291114807, -0.02556752786040306, -0.013907917775213718, 0.00397866778075695, 0.008231406100094318, 0.02679387666285038, 0.001167702954262495, 0.042401961982250214, -0.016955209895968437, -0.04518911987543106, 0.009597113355994225, 0.009425238706171513, -0.008008433505892754, -0.011436637490987778, -0.02250165492296219, -0.0149298757314682, -0.028075970709323883, 0.002340051345527172, 0.012003359384834766, -0.0012681568041443825, -0.0050122388638556, 0.0040181525982916355, -0.008505476638674736, -0.012718730606138706, 0.055854640901088715, 0.020792197436094284, -0.041621558368206024, 0.032461099326610565, -0.014651159755885601, -0.010823463089764118, -0.01847885549068451, 0.06826678663492203, -0.03387325629591942, 0.0030914226081222296, -0.014985618181526661], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:39:59,742 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,742 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,742 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,742 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.145s]
2025-08-01 00:39:59,742 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.145s]
2025-08-01 00:39:59,742 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.145s]
2025-08-01 00:39:59,802 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,802 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,802 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,802 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.052s]
2025-08-01 00:39:59,802 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.052s]
2025-08-01 00:39:59,802 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.052s]
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=3385, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:39:59,810 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:39:59,810 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   1. ID=doc_1753774932902234_40c83eeb, Score=61.9948, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   2. ID=doc_1753774907723466_bcf393f7, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG:   3. ID=doc_1753774907723504_da84c278, Score=57.1160, chunk_level=0
2025-08-01 00:39:59,810 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:39:59,810 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:39:59,810 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:39:59,811 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   1. ID=doc_1753774906491998_2effca61, Score=0.8692, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   2. ID=doc_1753774906491009_606bfdf5, Score=0.8690, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG:   3. ID=doc_1753774906490988_eb9ca35f, Score=0.8676, chunk_level=2
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774932902234_40c83eeb 的高亮信息: {'content': ['C100012062 <em>虚</em><em>机</em>磁盘写时延峰值\n* C100012064 <em>虚</em><em>机</em>磁盘平均读时延\n* C100012065 <em>虚</em><em>机</em>磁盘平均写时延\n* C100012066 <em>虚</em><em>机</em>磁盘使用率\n* C100012067 <em>虚</em><em>机</em>磁盘IO时延\n* C100013001 <em>虚</em><em>机</em><em>网卡</em>数目\n* C100013002 <em>虚</em><em>机</em>最大<em>网卡</em>数目\n* C100013003 <em>虚</em><em>机</em>最小<em>网卡</em>数目\n* C100013004 <em>虚</em><em>机</em>自启动以来<em>虚</em>机运行时长', '* C100013014 <em>虚</em><em>机</em>调度延迟\n* C100013015 <em>虚</em><em>机时</em>钟差异\n* C100013016 <em>虚</em><em>机时</em>钟差异最大值\n* C100013017 <em>虚</em><em>机时</em>钟差异最小值\n* C100013018 <em>虚</em><em>机</em>状态\n* C100013019 <em>虚</em><em>机</em>平均调度延迟\n* C100013021 <em>虚</em><em>机</em>下电时长\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774932902234_40c83eeb 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902234_40c83eeb, 排名: 1, 分数: 61.9948, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723466_bcf393f7 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🎯 文档 doc_1753774907723466_bcf393f7 提取的匹配词: {}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723466_bcf393f7, 排名: 2, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,811 rag.components.base DEBUG: 🔍 文档 doc_1753774907723504_da84c278 的高亮信息: {'content': ['图1 虚拟<em>机</em>页面\n3. 单击+<em>发布</em><em>虚</em><em>机</em>按钮，打开<em>发布</em><em>虚</em><em>机</em>-基本信息页面，根据规划填写相应参数，如图2所示。\n图2 <em>发布</em><em>虚</em><em>机</em>-基本信息\n说明：\n组织管理员批量创建<em>虚</em><em>机</em>的个数上限为50。\n选择不同的部署策略需设置不同的参数。\n如果…| 那么…\n---|---\n按云环境部署| 根据需求选择云环境和<em>虚</em><em>机</em>规格。\n按VDC部署| 根据需求选择VDC和<em>虚</em><em>机</em>规格。\n4.', '单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-启动源页面，为<em>虚</em><em>机</em>选择启动源，如图3所示。\n图3 <em>发布</em><em>虚</em><em>机</em>-启动源\n5. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-云硬盘页面，为<em>虚</em><em>机</em>选择是否增加云硬盘，如图4所示。\n图4 <em>发布</em><em>虚</em><em>机</em>-云硬盘\n6. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-网络页面，为<em>虚</em><em>机</em>增加<em>网卡</em>，如图5所示。\n图5 <em>发布</em><em>虚</em><em>机</em>-网络\n7. 单击下一步按钮，打开<em>发布</em><em>虚</em><em>机</em>-高级配置页面，如图6所示。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774907723504_da84c278 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774907723504_da84c278, 排名: 3, 分数: 57.1160, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771717452109_5bd66d71 的高亮信息: {'content': ['<em>虚</em><em>机</em>最大个数\n亲和策略| 亲和类型：该参数建议设置为**软反亲和** 。\n反亲和组个数：该参数建议设置为**1** 。\n其余参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置如图2所示。\n图2 <em>虚</em><em>机</em><em>网卡</em>配置\n<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。', '表2 <em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示GSU(General Service Unit, 通用业务单元)<em>虚</em>机关联的网络平面名称，GSU<em>虚</em><em>机</em>需要关联的网络平面如下。\n* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n其他参数说明参见“OMU<em>虚</em><em>机</em>配置”。\n<em>虚</em><em>机</em>参数配置\n参数说明参见“OMU<em>虚</em><em>机</em>配置”。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771717452109_5bd66d71 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452109_5bd66d71, 排名: 4, 分数: 53.1728, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753774929569506_5decf883 的高亮信息: {'content': ['物理<em>机</em>端口入向丢包数\n* C100030032 物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU', '* C100012020 <em>虚</em><em>机</em>磁盘读IOPS\n* C100012021 <em>虚</em><em>机</em>最大磁盘读IOPS\n* C100012022 <em>虚</em><em>机</em>最小磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>最大磁盘写IOPS\n* C100012025 <em>虚</em><em>机</em>最小磁盘写IOPS\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753774929569506_5decf883 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569506_5decf883, 排名: 5, 分数: 51.5788, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254149_1ce091fc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254149_1ce091fc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254149_1ce091fc, 排名: 6, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771925254191_1e9f95dc 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🎯 文档 doc_1753771925254191_1e9f95dc 提取的匹配词: {}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254191_1e9f95dc, 排名: 7, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,812 rag.components.base DEBUG: 🔍 文档 doc_1753771970433686_1f77a338 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753771970433686_1f77a338 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433686_1f77a338, 排名: 8, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228402_c3d6cd6c 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228402_c3d6cd6c 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228402_c3d6cd6c, 排名: 9, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753772058228412_3395779e 的高亮信息: {'content': ['当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID2NOSPR | SPR宕<em>机时</em>默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号2。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', 'PKGID3NOSPR | SPR宕<em>机时</em>默认套餐3 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SPR宕<em>机时</em>，系统默认为用户指定的套餐编号3。 当SPR宕<em>机时</em>，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753772058228412_3395779e 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228412_3395779e, 排名: 10, 分数: 51.3795, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['在<em>虚</em><em>机</em>摘要页签的虚拟<em>机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到<em>虚</em><em>机</em>节点，执行ifconfig -a，可查看<em>虚</em><em>机</em><em>网卡</em>的mac地址，如图26所示。\n图26 查看<em>虚</em><em>机</em><em>网卡</em>的mac地址\n通过mac地址就可以确定<em>虚</em><em>机</em><em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.', '设置<em>虚</em><em>机</em>所有<em>网卡</em>文件中BOOTPROTO的值为static，不启用dhcp。\n4. 复位网络。执行service network restart，执行ifconfig查看<em>网卡</em>上ip地址已经生效，如图27所示。\n图27 查看<em>网卡</em>上ip地址\n创建<em>虚</em><em>机</em>快照\n说明：\n<em>虚</em><em>机</em>快照可在Director部署失败后快速恢复<em>虚</em><em>机</em>到初始未安装状态。\n1.']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 11, 分数: 49.6540, 命中词: 无
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:39:59,813 rag.components.base DEBUG: 🔍 文档 doc_1753774937695043_d04c5cc6 的高亮信息: {'content': ['<em>虚</em><em>机</em>磁盘读IOPS\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100171001 <em>虚</em><em>机</em>个数\n* C100171002 <em>虚</em><em>机</em>个数最大值\n* C100171003 <em>虚</em><em>机</em>个数最小值\n* C100171004 未安装VMTools<em>虚</em><em>机</em>数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172010 <em>分配</em>的云盘总空间\n* C100395001', '* C100396001 云硬盘容量配额\n* C100396002 云硬盘已<em>分配</em>的容量\n* C100396003 云硬盘已使用的容量\n* C100396004 云硬盘申请中的容量\n* C100396005 云硬盘实例配额\n* C100396006 云硬盘已<em>分配</em>的实例\n* C100396007 云硬盘已使用的实例\n* C100396008 云硬盘申请中的实例\n* C100395001']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753774937695043_d04c5cc6 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774937695043_d04c5cc6, 排名: 12, 分数: 48.9554, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* null：表示不使用该参数功能。', '* 节点描述：<em>可</em>自定义节点描述，用于区分不同的网络组。\n网络组名称| 网络组是指两个逻辑网络平面的集合，一个网络组中包括有两个逻辑网络平面，这两个网络平面可以相同也可以不同，可以归属相同的物理网络，也可以归属于不同的物理网络。此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 13, 分数: 48.4939, 命中词: 无
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:39:59,814 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['图2 <em>虚</em><em>机</em><em>网卡</em>配置\nOMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参见表2。\n表2 OMU<em>虚</em><em>机</em><em>网卡</em>配置参数说明参数名称| 参数含义\n---|---\n关联网络名称| 此参数表示OMU<em>虚</em>机关联的网络平面，不同类型的<em>虚</em>机关联的逻辑网络平面不相同，可以设置为逻辑网络平面的名称，也可以设置为网络组的名称，当OMU<em>虚</em>机关联单个平面时，需要关联的网络平面如下。', '* ZTE_PCF_x_MGT_NET\n* ZTE_PCF_x_SERVICE_NET\n* ZTE_EMS_NET\n若某个<em>虚</em><em>机</em><em>网卡</em>关联了一个网络组，则实例化后，生成的两个虚拟<em>网卡</em>，这两个<em>虚</em><em>机</em><em>网卡</em>之间可以通过双端口工作模式设置两者之间的关系。']}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 14, 分数: 47.2904, 命中词: 无
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🔍 文档 doc_1753774932902226_b3900767 的高亮信息: {'content': ['<em>虚</em><em>机</em>\n子主题：\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010004 <em>虚</em><em>机</em>CPU平均使用率\n* C100010005 <em>虚</em><em>机</em>CPU使用率峰值\n* C100010006 <em>虚</em><em>机</em>CPU使用率谷值\n* C100010008 <em>虚</em><em>机</em>vCPU使用个数\n* C100010009 <em>虚</em><em>机</em>vCPU使用个数最大值', 'C100012022 <em>虚</em><em>机</em>磁盘读IOPS最小值\n* C100012023 <em>虚</em><em>机</em>磁盘写IOPS\n* C100012024 <em>虚</em><em>机</em>磁盘写IOPS最大值\n* C100012025 <em>虚</em><em>机</em>磁盘写IOPS最小值\n* C100012026 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033']}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 🎯 文档 doc_1753774932902226_b3900767 提取的匹配词: {}
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:39:59,815 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774932902226_b3900767, 排名: 15, 分数: 47.2619, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753774921638248_47ec2fb7 的高亮信息: {'content': ['C100171009 活动虚拟<em>机</em>最小数\n* C100171010 <em>虚</em><em>机</em>总个数\n* C100172002 <em>分配</em>给<em>虚</em><em>机</em>的本地盘总空间\n* C100172004 <em>虚</em><em>机</em>已使用的存储空间\n* C100172005 <em>分配</em>给<em>虚</em><em>机</em>的存储总空间(未去重)\n* C100172006 存储配额\n* C100172010 <em>分配</em>的云盘总空间\n* C100172011 云盘总个数\n* C100172012 云盘已使用个数\n*', '<em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009 <em>虚</em><em>机</em>端口入向带宽谷值\n* C100040010 <em>虚</em><em>机</em>端口出向带宽\n* C100040011 <em>虚</em><em>机</em>端口出向带宽峰值\n* C100040012 <em>虚</em><em>机</em>端口出向带宽谷值\n* C100040013 <em>虚</em><em>机</em>端口流入包速率\n* C100040014 <em>虚</em><em>机</em>端口流入包最大速率\n* C100040015 <em>虚</em><em>机</em>端口流入包最小速率\n* C100040016 <em>虚</em><em>机</em>端口流出包速率']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753774921638248_47ec2fb7 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774921638248_47ec2fb7, 排名: 16, 分数: 46.7235, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的<em>虚</em><em>机</em>的最大个数，即如果该参数设置为1，则单个主机上只能部署一个<em>虚</em><em>机</em>，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个<em>虚</em><em>机</em>。\n* 该参数设置为1，表示所有的<em>虚</em><em>机</em>都在一个互斥组中，即这个互斥组中的每个<em>虚</em><em>机</em>都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于<em>虚</em><em>机</em>的个数，否则就会部署失败，实例化不成功。', '<em>虚</em><em>机</em><em>网卡</em>配置\nAMF的各种类型的<em>虚</em><em>机</em>需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:39:59,816 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 17, 分数: 46.5344, 命中词: 无
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🔍 文档 doc_1753774929569489_4c16bbb4 的高亮信息: {'content': ['云环境\n子主题：\n* C100050001 物理<em>机</em>总量\n* C100050002 物理<em>机</em>总量最大值\n* C100050003 物理<em>机</em>总量最小值\n* C100050004 <em>虚</em><em>机</em>个数\n* C100050005 <em>虚</em><em>机</em>个数最大值\n* C100050006 <em>虚</em><em>机</em>个数最小值\n* C100050007 <em>虚</em><em>机</em>CPU平均使用率\n* C100050008 <em>虚</em><em>机</em>CPU平均使用率峰值\n* C100050009 <em>虚</em><em>机</em>CPU平均使用率谷值', 'C100050067 <em>虚</em><em>机</em>冷迁移失败次数\n* C100051001 FC存储总量\n* C100051002 FC存储总量峰值\n* C100051003 FC存储总量谷值\n* C100051004 FC存储<em>分配</em>量\n* C100051005 FC存储<em>分配</em>量峰值\n* C100051006 FC存储<em>分配</em>量谷值\n* C100051007 FC存储使用量\n* C100051008 FC存储使用量峰值\n* C100051009']}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 🎯 文档 doc_1753774929569489_4c16bbb4 提取的匹配词: {}
2025-08-01 00:39:59,817 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:39:59,817 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:39:59,817 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774929569489_4c16bbb4, 排名: 18, 分数: 46.3069, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753773539798351_e8204796 的高亮信息: {'content': ['描述\n定义\nuMAC运行过程中，由于硬件、云平台、人为等原因，导致部分<em>虚</em><em>机</em>有可能处于异常状态(包括被挂起、休眠、错误）。针对这种状态异常的<em>虚</em><em>机</em>，uMAC提供了及时恢复吊死<em>虚</em><em>机</em>的能力，称为<em>虚</em><em>机</em>自愈。\n背景知识\n<em>虚</em><em>机</em>自愈是uMAC本身的一种异常保护机制，当检测到云平台上<em>虚</em><em>机</em>的状态和本地的状态不一致时，会先触发虚<em>机</em>状态不一致告警，之后触发虚<em>机</em>自愈的过程。', '可获得性\n版本要求及变更记录\n特性版本| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>\nLicense要求\n该特性为ZXUN uMAC的基本特性，无需License支持。\n对其他网元的要求\nNFVO| VNFM| VIM\n---|---|---\n√| √| √\n说明：\n表中“√”表示本功能对网元有要求，“-”表示本功能对网元无要求。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753773539798351_e8204796 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798351_e8204796, 排名: 19, 分数: 46.1683, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753774922882052_0121adb3 的高亮信息: {'content': ['数据中心\n子主题：\n* C100040001 <em>虚</em><em>机</em>端口流入速率\n* C100040002 <em>虚</em><em>机</em>端口流入速率峰值\n* C100040003 <em>虚</em><em>机</em>端口流入速率谷值\n* C100040004 <em>虚</em><em>机</em>端口流出速率\n* C100040005 <em>虚</em><em>机</em>端口流出速率峰值\n* C100040006 <em>虚</em><em>机</em>端口流出速率谷值\n* C100040007 <em>虚</em><em>机</em>端口入向带宽\n* C100040008 <em>虚</em><em>机</em>端口入向带宽峰值\n* C100040009', '物理<em>机</em>端口出向丢包数\n* C100030033 物理<em>机</em>端口入向错包数\n* C100030034 物理<em>机</em>端口出向错包数\n* C100030036 物理<em>机</em><em>网卡</em>异常连接时长\n* C100030037 物理<em>机</em><em>网卡</em>链路异常传输时长\n* C100010001 <em>虚</em><em>机</em>vCPU个数\n* C100010002 <em>虚</em><em>机</em>vCPU个数最大值\n* C100010003 <em>虚</em><em>机</em>vCPU个数最小值\n* C100010008 <em>虚</em><em>机</em>vCPU']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753774922882052_0121adb3 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882052_0121adb3, 排名: 20, 分数: 45.7985, 命中词: 无
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双端口工作模式| 当某个<em>虚</em>机关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，则会按照网络组中的两个逻辑网络平面，分别创建对应的vNIC（虚拟<em>网卡</em>）。即一个<em>虚</em>机会创建两个vNIC。这两个vNIC可以通过本参数设置两者之间的关系，包括以下类型：\n* 单网口表示这两个vNIC不启用SR-IOV bond。', '* 若该<em>网卡</em>关联的网络是预定义网络，可直接引用在该平台云管理→网络→网络QoS中已配置的策略名称。\n* 若该<em>网卡</em>关联的网络不是预定义网络，则此处<em>可</em>指定策略名称，也可以由系统自动生成策略名称。\n<em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置如图3所示。\n图3 <em>虚</em><em>机</em>参数配置\n<em>虚</em><em>机</em>参数配置参数说明参见表3。']}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:39:59,818 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 21, 分数: 44.9847, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774893107123_37f69365 的高亮信息: {'content': ['说明：\n* 端口IP可以创建（增加<em>虚</em><em>机</em>的时候指定<em>分配</em>某个端口IP），也可以不创建（增加<em>虚</em><em>机</em>的时候随机<em>分配</em>端口ip）。\n* 若创建网络时需要指定VLANID，需要以admin用户登录进行创建网络，创建时可以指定VLANID。\n上传镜像\n1. 选择项目管理→镜像，打开镜像页面。\n2. 单击上传镜像按钮，打开上传镜像页面，如图5所示。\n图5 上传镜像页面\n3.', '在此页面上传daisyseed<em>虚</em><em>机</em>镜像和节点<em>虚</em><em>机</em>OS镜像（daisyseed<em>虚</em><em>机</em>和节点<em>虚</em><em>机</em>使用相同镜像文件）。\n说明：\n<em>虚</em><em>机</em>需要的OS镜像必须为qcow2格式，所以要将制品库中的iso镜像下载至本地win机器，使用7z工具解压，解压后找到qcow2格式镜像文件。\n创建云盘\n说明：\n本地盘部署时<em>可</em>跳过该步骤。\n1. 选择项目管理→存储→云硬盘，打开云硬盘页面。\n2.']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774893107123_37f69365 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774893107123_37f69365, 排名: 22, 分数: 44.8663, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753774922882058_ea986b50 的高亮信息: {'content': ['<em>虚</em>机内存换出\n* C100012001 <em>虚</em><em>机</em>磁盘总容量\n* C100012002 <em>虚</em><em>机</em>磁盘总容量峰值\n* C100012003 <em>虚</em><em>机</em>磁盘总容量谷值\n* C100012004 <em>虚</em><em>机</em>磁盘使用量\n* C100012005 <em>虚</em><em>机</em>磁盘使用量峰值\n* C100012006 <em>虚</em><em>机</em>磁盘使用量谷值\n* C100012007 <em>虚</em><em>机</em>磁盘可用容量\n* C100012008 <em>虚</em><em>机</em>磁盘可用容量峰值\n* C100012009', '<em>虚</em><em>机</em>磁盘总<em>分配</em>空间\n* C100012027 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间峰值\n* C100012028 <em>虚</em><em>机</em>磁盘总<em>分配</em>空间谷值\n* C100012032 <em>虚</em><em>机</em>本地盘总空间\n* C100012033 <em>虚</em><em>机</em>自启动以来磁盘读时延\n* C100012034 <em>虚</em><em>机</em>磁盘读时延\n* C100012035 <em>虚</em><em>机</em>自启动以来磁盘写时延\n* C100012036 <em>虚</em><em>机</em>磁盘写时延\n* C100013005 <em>虚</em>机运行时长\n* C100013009']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🎯 文档 doc_1753774922882058_ea986b50 提取的匹配词: {}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774922882058_ea986b50, 排名: 23, 分数: 44.7289, 命中词: 无
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:39:59,819 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['OMU<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置如图1所示。\n图1 <em>虚</em><em>机</em>配置\n<em>虚</em><em>机</em>配置参数说明参见表1。\n表1 <em>虚</em><em>机</em>配置参数说明参数名称| 参数含义\n---|---\n<em>虚</em><em>机</em>配置| <em>虚</em><em>机</em>逻辑类型| OMU(Operation & Management Unit, 操作管理单元)<em>虚</em><em>机</em>的逻辑类型固定设置为**OMU** 。\n<em>虚</em><em>机</em>优先级| 保持默认值。\n<em>虚</em><em>机</em>启动优先级| 该参数用于设置虚拟<em>机</em>启动上电的优先级。', '该参数用于设置OMU<em>虚</em><em>机</em><em>网卡</em>的QoS策略名称列表，与<em>虚</em><em>机</em><em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的<em>虚</em><em>机</em>数/比例| 该参数用于设置同一批次允许下电的OMU<em>虚</em><em>机</em>个数或者<em>虚</em><em>机</em>比例。若该参数配置为比例值，则取值为单批次允许下电的OMU<em>虚</em><em>机</em>数占用当前OMU<em>虚</em><em>机</em>数的比例。\n内存回收水线(KB)| 保持默认值。\n<em>虚</em><em>机</em>最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:39:59,820 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:39:59,820 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 24, 分数: 44.6976, 命中词: 无
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:39:59,820 rag.components.base DEBUG: 🔍 文档 doc_1753771817148891_09734c6b 的高亮信息: {'content': ['VNF<em>虚</em><em>机</em>迁移分为<em>虚</em><em>机</em>冷迁移和<em>虚</em><em>机</em>热迁移两种方式。冷迁移与热迁移相比，在迁移过程中需要将被迁移的<em>虚</em>机关机。是否因此影响业务，取决于该<em>虚</em><em>机</em>所对应业务层模块采用的备份方式。\n说明：\n当目标主机的资源不够，会导致<em>虚</em><em>机</em>热迁移失败，系统会自动进行回滚操作，该<em>虚</em><em>机</em>仍可正常运行。\nVNF迁移操作支持优雅终止和强制终止。\n* 优雅终止方式：<em>虚</em>层在进行资源操作前会与VNF交互，由VNF进行校验和准备。', '* 强制终止方式：直接终止现有<em>虚</em><em>机</em>，在目的节点重新生成当前<em>虚</em><em>机</em>。\n* 启动/停止VNF<em>虚</em><em>机</em>\n对<em>虚</em><em>机</em>进行启动或停止操作，是对该VNF下的<em>虚</em><em>机</em>资源进行启动/停止。停止<em>虚</em><em>机</em>后，该<em>虚</em><em>机</em>的资源仍然被占用，可以随时再执行启动。\n小心！\n停止<em>虚</em><em>机</em>操作时，会停止该<em>虚</em>机上所提供的所有业务。\n* 删除<em>虚</em><em>机</em>\n当不再需要某<em>虚</em><em>机时</em>，可以删除该<em>虚</em><em>机</em>，并释放其所占用的虚拟资源。\n业务流程\n<em>虚</em><em>机</em>管理流程如下图所示。']}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🎯 文档 doc_1753771817148891_09734c6b 提取的匹配词: {}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:39:59,821 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:39:59,821 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148891_09734c6b, 排名: 25, 分数: 44.5721, 命中词: 无
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:39:59,821 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['启用<em>虚</em><em>机</em>别名| 该参数用于设置ZXUN RCP是否启用<em>虚</em><em>机</em>别名，需要根据实际情况设置。\n* 启用：<em>虚</em><em>机</em>类型使用info文件相应<em>虚</em><em>机</em>配置中设置的**<em>虚</em><em>机</em>外部类型** 。\n* 不启用：直接使用info文件相应<em>虚</em><em>机</em>的<em>虚</em><em>机</em>逻辑类型名。\n启用子接口VLAN Trunk| VLAN trunk是OpenStack社区<em>发布</em>的功能，标准叫法是VLAN-aware-VMs。', '该参数设置为**启用** 时，TECS OpnenStack平台可<em>以为</em>ZXUN RCP<em>虚</em><em>机</em>提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。该参数设置为**启用** 时，TECS OpnenStack平台以QoS和流表为基础，生成不同<em>虚</em><em>机</em>规格的弹性资源策略配置。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 26, 分数: 44.5246, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['表4 网络QoS配置参数说明参数名称| 参数含义\n---|---\n网络QoS策略名| 该参数用于设置网络QoS策略的名称，网络QoS策略用于配置对硬件服务器的<em>网卡</em>进行限速的策略。运营商可以定义多个网络QoS策略模板，每个网络QoS策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的网络QoS策略模板，该网络QoS策略可以对<em>虚</em><em>机</em>中的各个<em>网卡</em>进行限制。', '此处创建的网络组，用于被<em>虚</em><em>机</em>的vNIC（虚拟<em>网卡</em>）关联使用。当某个<em>虚</em><em>机</em>的虚拟<em>网卡</em>关联了一个网络组后，在此<em>虚</em><em>机</em>实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个<em>虚</em>机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 27, 分数: 44.4382, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753771683798749_1755ad57 的高亮信息: {'content': ['* 如果自愈策略设置为<em>虚</em><em>机</em>重启或<em>虚</em><em>机</em>重建，则发起<em>虚</em><em>机</em>重启或重建流程。相关流程如图2和图3所示。\n图2 <em>虚</em><em>机</em>重启流程\n1. VNF(Virtualized Network Function, 虚拟化网络功能)向VNFM(Virtualized Network Function Manager, 虚拟化网络功能管理器)发起<em>虚</em><em>机</em>重启请求。\n2.', '可获得性\n版本要求及变更记录\n序号| <em>发布</em>版本| <em>发布</em>说明\n---|---|---\n01| V7.19.10| 首次<em>发布</em>。\nLicense要求\n该特性为ZXUN RCP的基本特性，无需License支持。\n对其他网元的要求\n该特性对其他网元无特殊要求。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753771683798749_1755ad57 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771683798749_1755ad57, 排名: 28, 分数: 43.8207, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为<em>虚</em>机构建一套逻辑隔离的虚拟网络环境，<em>可</em>自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。\n支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持<em>虚</em><em>机</em>访问外部网络。', '* 镜像管理\nTECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟<em>机时</em>使用。\n镜像管理功能包括镜像仓库管理和云环境镜像管理。\n镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。\n云环境镜像管理包括镜像的<em>发布</em>、查阅、删除，支时向多个云环境<em>发布</em>镜像，<em>发布</em>的镜像文件来源于镜像仓库。']}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:39:59,822 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 29, 分数: 43.7182, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753774968216542_ab75bd32 的高亮信息: {'content': ['云环境\n子主题：\n* P100050001 <em>虚</em><em>机</em>部署平均成功率\n* P100050002 <em>虚</em><em>机</em>不可用时长平均比率\n* P100050003 <em>虚</em><em>机</em>释放失败平均比率\n* P100050004 <em>虚</em><em>机</em>提前释放平均比率\n* P100050005 <em>虚</em><em>机</em>提前释放平均比率（每秒提前释放<em>虚</em><em>机</em>数）\n* P100050006 <em>虚</em><em>机</em>部署成功但不可用平均比率\n* P100050007 虚拟网络部署平均成功率\n* P100050008', '已承载虚拟<em>机</em>的主机比率\n* P100050009 <em>虚</em><em>机</em>重生平均成功率\n* P100050010 <em>虚</em><em>机</em>总迁移成功率\n* P100051001 平均FC存储<em>分配</em>率\n* P100051002 最大FC存储<em>分配</em>率\n* P100051003 最小FC存储<em>分配</em>率\n* P100051004 平均FC存储使用率\n* P100051005 最大FC存储使用率\n* P100051006 最小FC存储使用率\n* P100051007']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753774968216542_ab75bd32 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774968216542_ab75bd32, 排名: 30, 分数: 43.5154, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['* 节点描述：<em>可</em>自定义节点描述，用于区分不同的加速资源策略。\n加速资源策略1| 该参数用于设置加速资源策略的名称，加速资源策略用于配置对<em>虚</em><em>机</em>处理性能进行提升的策略。运营商可以定义多个加速资源策略模板，每个加速资源策略模板都设置一个对应的名称，每个<em>虚</em><em>机</em>都可以配置一个对应的加速资源策略模板，该加速资源策略可以提高<em>虚</em><em>机</em>处理性能。', '该参数用于指定要创建的虚拟<em>机</em>所使用的具体的CPU型号。通常应用于异地迁移虚拟<em>机</em>的场景，比如把虚拟<em>机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定虚拟<em>机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署<em>虚</em><em>机</em>的场景才涉及到该参数的配置。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 31, 分数: 43.1481, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254208_bfa94ed0 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753771925254208_bfa94ed0 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254208_bfa94ed0, 排名: 32, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753772058228415_9eeb3408 的高亮信息: {'content': ['当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\nPKGID5NOCFG | 未配置SPR时默认套餐5 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当未配置SPR时，系统默认为用户指定的套餐编号5。 当未配置SPR时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🎯 文档 doc_1753772058228415_9eeb3408 提取的匹配词: {}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228415_9eeb3408, 排名: 33, 分数: 42.7021, 命中词: 无
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,823 rag.components.base DEBUG: 🔍 文档 doc_1753771925254174_e39da950 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771925254174_e39da950 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771925254174_e39da950, 排名: 34, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771970433693_d4688bd2 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。\n## 命令举例\n查询编号1-9的默认签约信息。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771970433693_d4688bd2 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771970433693_d4688bd2, 排名: 35, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753772058228406_576ac9ac 的高亮信息: {'content': ['| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号1。 该参数可<em>以为</em>正常签约的号码段用户统一签约一些套餐。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。', '| 本参数用于指定当SPR<em>可</em>正常签约时（SPR中签约了套餐，且套餐是可用的），系统默认为用户指定的套餐编号5。 当SPR<em>可</em>正常签约时，系统默认可<em>以为</em>用户指定<em>最多</em>5个套餐，5个套餐同时<em>分配</em>给用户。 默认套餐ID等于空时表示套餐ID不存在。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753772058228406_576ac9ac 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772058228406_576ac9ac, 排名: 36, 分数: 41.6030, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263402_fc53278f 的高亮信息: {'content': ['单击待操作的VNF名称，在**<em>虚</em><em>机</em>管理** 页，可以查看该VNF的所有<em>虚</em><em>机</em>信息。选择待操作的<em>虚</em><em>机</em>进行管理操作。\n3. 可以选择“**优雅** ”、“**强制** ”不同的方式操作<em>虚</em><em>机</em>。\n配置实例\n删除<em>虚</em><em>机</em>\n1.', '指定目标主机| 如果需要手工指定<em>虚</em><em>机</em>迁移的目标主机，<em>可</em>勾选该项，并在下方目标主机列表中选择目标主机。注意：如果VNF中对<em>虚</em><em>机</em>有亲和性/互斥性的要求，则手工指定的目标主机应符合这些要求，否则会导致迁移失败。\n6.']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263402_fc53278f 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263402_fc53278f, 排名: 37, 分数: 41.1322, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🔍 文档 doc_1753771811263408_e3860fa6 的高亮信息: {'content': ['通过准则| <em>虚</em><em>机</em>创建成功\n测试项目| <em>虚</em><em>机</em>停止\n---|---\n测试目的| 验证<em>虚</em><em>机</em>停止功能\n预置条件| ZXUN RCP实例化完成。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**停止** 按钮。\n3. 分别选择**优雅** 、**强制** 停止操作。\n通过准则| <em>虚</em><em>机</em>停止操作成功。', '测试项目| <em>虚</em><em>机</em>启动\n---|---\n测试目的| 验证<em>虚</em><em>机</em>启动功能\n预置条件| ZXUN RCP实例化完成，待操作<em>虚</em><em>机</em>已成功停止。\n测试过程|\n1. 在NFVO客户端的VNF列表中单击待操作VNF，进入**<em>虚</em><em>机</em>管理** 页面。\n2. 选择待操作<em>虚</em><em>机</em>，单击**启动** 按钮。\n3. 分别选择**优雅** 、**强制** 启动操作。\n通过准则| <em>虚</em><em>机</em>启动操作成功。']}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 🎯 文档 doc_1753771811263408_e3860fa6 提取的匹配词: {}
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:39:59,824 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771811263408_e3860fa6, 排名: 38, 分数: 40.7666, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771817148882_606519b6 的高亮信息: {'content': ['背景知识\n云计算和虚拟化技术的发展，对运营商的运维提出了新的挑战，原来管理的固定、静止的物理设备，变成了虚拟的、<em>可</em>动态迁移的逻辑对象，从而对系统设备的运维提出了更高的要求。\n虚拟化ZXUN RCP支持手工操作<em>虚</em><em>机</em>后，运营商可以对<em>虚</em><em>机</em>实现更多个性化的操作，如创建、查询、启动、停止、终止、删除、迁移。这些操作在不影响业务的情况下，使得设备的运维更加高效便捷。', '主要查询VNF实例当前的所有<em>虚</em><em>机</em>列表及状态等信息。\n* 迁移VNF<em>虚</em><em>机</em>\nVNF<em>虚</em><em>机</em>迁移操作是对VNF内<em>虚</em><em>机</em>进行批量手动迁移处理。将VNF中的<em>虚</em><em>机</em>从当前所在的物理主机迁移至其它的物理主机上。<em>虚</em><em>机</em>迁移通常是对<em>虚</em><em>机</em>资源<em>分配</em>进行优化，例如某物理主机上的资源占用较多，就可以将该主机上的<em>虚</em><em>机</em>迁移一些到资源占用较少的物理主机上去。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771817148882_606519b6 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771817148882_606519b6, 排名: 39, 分数: 40.6046, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['* hw:numa_nodes取值为2：表示<em>虚</em><em>机</em>使用的CPU及内存<em>分配</em>在2个不同的NUMA节点上。\nhw:mem_page_size| 该参数建议采用默认值。该参数用于设置<em>虚</em><em>机</em>使用的巨页内存的内存页大小，使用巨页内存的后，由于内存连续，不存在碎片，<em>虚</em><em>机</em>使用时，会在性能上有所提高。\n* null：表示不使用该参数功能。', '使用SR-IOV<em>网卡</em>的<em>虚</em>机会默认使用物理服务器的PCI设备，且在这个<em>虚</em><em>机</em>中配置NUMA亲和功能时，默认要求使用的PCI设备需要和CPU及内存在同一NUMA节点上。此时可以根据实际需求，通过hw:numa_pci的值决定PCI设备是否与CPU及内存<em>分配</em>在同一NUMA节点，包括如下选项。\n* 取值为null：表示不使用该参数功能。']}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 40, 分数: 40.3488, 命中词: 无
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491998_2effca61, 排名: 1, 分数: 0.8692
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491009_606bfdf5, 排名: 2, 分数: 0.8690
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490988_eb9ca35f, 排名: 3, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491979_2c991d11, 排名: 4, 分数: 0.8676
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:39:59,825 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491014_4763f6e6, 排名: 5, 分数: 0.8572
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492004_7180119e, 排名: 6, 分数: 0.8572
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491973_ec175f44, 排名: 7, 分数: 0.8559
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490981_754b24fa, 排名: 8, 分数: 0.8558
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930662_a4136c85, 排名: 9, 分数: 0.8494
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490938_9d59e8c5, 排名: 10, 分数: 0.8488
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906491912_13037c6e, 排名: 11, 分数: 0.8482
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490931_9fece7ec, 排名: 12, 分数: 0.8480
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 13, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 14, 分数: 0.8455
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832931043_af1fee17, 排名: 15, 分数: 0.8415
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906490925_c37f46c2, 排名: 16, 分数: 0.8414
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774414077479_4185eb3d, 排名: 17, 分数: 0.8395
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930655_adca0d50, 排名: 18, 分数: 0.8392
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:39:59,826 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576273_7baba33a, 排名: 19, 分数: 0.8358
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576248_3892f66b, 排名: 20, 分数: 0.8358
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576177_6907ab5e, 排名: 21, 分数: 0.8355
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930408_bdee834c, 排名: 22, 分数: 0.8348
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554224_05b70504, 排名: 23, 分数: 0.8341
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774845554149_e77aa10e, 排名: 24, 分数: 0.8331
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894093726_1d3636b5, 排名: 25, 分数: 0.8330
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774907759488_c5dfc180, 排名: 26, 分数: 0.8328
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576243_95fff067, 排名: 27, 分数: 0.8316
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844568973_7005da6d, 排名: 28, 分数: 0.8313
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592234790_a83f4e21, 排名: 29, 分数: 0.8311
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575536_8008692e, 排名: 30, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298575538_5a4f6c1d, 排名: 31, 分数: 0.8299
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774832930638_c517ee03, 排名: 32, 分数: 0.8298
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774922881797_464bd981, 排名: 33, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774924704258_0f95a271, 排名: 34, 分数: 0.8294
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:39:59,827 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774822516285_f22aa03b, 排名: 35, 分数: 0.8288
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774432662609_f4d2e439, 排名: 36, 分数: 0.8273
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774049834265_f240225f, 排名: 37, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774049834265_f240225f, 排名: 37, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774049834265_f240225f, 排名: 37, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774058494144_b0467b1c, 排名: 38, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774058494144_b0467b1c, 排名: 38, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774058494144_b0467b1c, 排名: 38, 分数: 0.8272
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 39, 分数: 0.8270
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 39, 分数: 0.8270
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774906492255_65b3510b, 排名: 39, 分数: 0.8270
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 40, 分数: 0.8268
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 40, 分数: 0.8268
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298574600_946d4851, 排名: 40, 分数: 0.8268
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:39:59,828 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774932902234_40c83eeb: RRF分数=0.016393
2025-08-01 00:39:59,828 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,828 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,828 rag.components.base DEBUG: ✅ 文档 doc_1753774932902234_40c83eeb 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774906491998_2effca61: RRF分数=0.016393
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491998_2effca61 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753774906491009_606bfdf5: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906491009_606bfdf5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753774907723466_bcf393f7: RRF分数=0.016129
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723466_bcf393f7 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774906490988_eb9ca35f: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774906490988_eb9ca35f 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774907723504_da84c278: RRF分数=0.015873
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753774907723504_da84c278 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:39:59,829 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717452109_5bd66d71: RRF分数=0.015625
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,829 rag.components.base DEBUG: ✅ 文档 doc_1753771717452109_5bd66d71 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753774906491979_2c991d11: RRF分数=0.015625
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491979_2c991d11 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753774906491014_4763f6e6: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774906491014_4763f6e6 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774929569506_5decf883: RRF分数=0.015385
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753774929569506_5decf883 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753771925254149_1ce091fc: RRF分数=0.015152
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: ✅ 文档 doc_1753771925254149_1ce091fc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:39:59,830 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753774906492004_7180119e: RRF分数=0.015152
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906492004_7180119e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774906491973_ec175f44: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906491973_ec175f44 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753771925254191_1e9f95dc: RRF分数=0.014925
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771925254191_1e9f95dc 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753771970433686_1f77a338: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753771970433686_1f77a338 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753774906490981_754b24fa: RRF分数=0.014706
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490981_754b24fa 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753774832930662_a4136c85: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774832930662_a4136c85 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753772058228402_c3d6cd6c: RRF分数=0.014493
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228402_c3d6cd6c 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753772058228412_3395779e: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753772058228412_3395779e 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774906490938_9d59e8c5: RRF分数=0.014286
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,831 rag.components.base DEBUG: ✅ 文档 doc_1753774906490938_9d59e8c5 通过RRF过滤，加入最终结果
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 文本: 61.9948
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067...
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774906491998_2effca61
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8692
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,832 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:39:59,832 rag.components.base DEBUG:    📝 内容: 订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 ...
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,832 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8690
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,833 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:39:59,833 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774907723504_da84c278
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:39:59,833 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 57.1160
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS D...
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 文本: 53.1728
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: GSU虚机配置
概述
GSU虚机需要分别配置**GSU (HTTP LB)** 、**GSU (Policy Control)** 、**GSU (SIG LB)** 和**GSU (GW)** 虚机...
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8676
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,834 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:39:59,834 rag.components.base DEBUG:    📝 内容: 0/neutronsvc/v2.0/network-order
* 资源变配接口URL：-
* 资源释放接口URL：POST /api/v1.0/neutronsvc/v2.0/network-ord...
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,834 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可...
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774929569506_5decf883
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.5788
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: 物理机端口入向丢包数
* C100030032 物理机端口出向丢包数
* C100030033 物理机端口入向错包数
* C100030034 物理机端口出向错包数
* C100030036 物理机网...
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,835 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:39:59,835 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认为用户指定的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐I...
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753774906492004_7180119e
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8572
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 单击立即购买按钮，根据需要依次设置基础配置、网络配置、节点组配置和容器后端存储配置，如图2、图3、图4、图5所示。
图2 基础配置页面图3 网络配置页面图4 节点组配置页面图5 容器后端存储配置页面
...
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8559
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: * 云环境类型：openstack
页面路由信息
* 产品申请页面URL：/network-portal/networkResource/services/zte-vpn/connection_lis...
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,836 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,836 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,836 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID2NOPKG | SPR中未签约套餐时默认套餐2 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8558
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Di...
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8494
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:39:59,837 rag.components.base DEBUG:    📝 内容: 应用限制
该特性不涉及应用限制。
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,837 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:39:59,837 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: | 本参数用于指定当SPR返回的用户签约信息中无套餐时，系统默认的套餐编号2。 当SPR返回的用户签约信息中无套餐时，系统默认可以为用户指定最多5个套餐，5个套餐同时分配给用户。 默认套餐ID等于空时...
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753772058228412_3395779e
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 文本: 51.3795
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 默认套餐ID等于空时表示套餐ID不存在。
PKGID4NOPKG | SPR中未签约套餐时默认套餐4 | 参数可选性:任选参数；参数类型:字符型；参数范围为:0~32个字符。 | 本参数用于指定当SP...
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,838 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8488
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,838 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:39:59,838 rag.components.base DEBUG:    📝 内容: 在SDNC页签中单击+添加SDNC按钮，打开添加SDNC页面，如图2所示。
图2 添加SDNC
3.
2025-08-01 00:39:59,839 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:39:59,839 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:39:59,839 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:39:59,839 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:39:59,839 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:39:59,839 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:39:59,839 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:39:59,839 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:39:59,839 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1626748224563.txt', 'file_type': '.txt', 'filename': '1626748224563.txt', 'chunk_id': 'ee09aedcfbafb74b_L0_1', 'parent_id': None, 'root_id': 'ee09aedcfbafb74b', 'chunk_index': 1, 'total_chunks': 44, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1387}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:39:59,839 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:39:59,839 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774932902234_40c83eeb 本身就是big chunk，直接使用
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774906491998_2effca61
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774906491998_2effca61
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774906491998_2effca61
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_2', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 108}
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,839 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,839 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,839 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491998_2effca61 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,839 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_0', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 0, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,840 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,840 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491009_606bfdf5 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': 'b813e57c862ca8b7_L0_0', 'parent_id': None, 'root_id': 'b813e57c862ca8b7', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:39:59,840 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:39:59,840 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723466_bcf393f7 本身就是big chunk，直接使用
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,840 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,840 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_2', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 2, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 112}
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,840 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,841 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,841 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,841 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490988_eb9ca35f 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774907723504_da84c278
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/租户操作指南/topics/44-发布虚机.txt', 'file_type': '.txt', 'filename': '44-发布虚机.txt', 'chunk_id': '8aea6220c36d8f0a_L0_0', 'parent_id': None, 'root_id': '8aea6220c36d8f0a', 'chunk_index': 0, 'total_chunks': 31, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1659}
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,841 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:39:59,841 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:39:59,841 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774907723504_da84c278 本身就是big chunk，直接使用
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,841 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,841 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:39:59,841 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/1561358526722.txt', 'file_type': '.txt', 'filename': '1561358526722.txt', 'chunk_id': 'e960d1d4565dbe60_L0_0', 'parent_id': None, 'root_id': 'e960d1d4565dbe60', 'chunk_index': 0, 'total_chunks': 18, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1419}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:39:59,842 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:39:59,842 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771717452109_5bd66d71 本身就是big chunk，直接使用
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753774906491979_2c991d11
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_3', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 5, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 170}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1610613816675.txt', 'file_type': '.txt', 'filename': '1610613816675.txt', 'chunk_id': '7e7594aa5a40af0b_L2_1', 'parent_id': None, 'root_id': '7e7594aa5a40af0b', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 379}
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,842 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,842 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,842 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906491014_4763f6e6 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:39:59,842 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774929569506_5decf883
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,842 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能计数器参考/topics/1665712075729.txt', 'file_type': '.txt', 'filename': '1665712075729.txt', 'chunk_id': '8404f115e3b5385e_L0_2', 'parent_id': None, 'root_id': '8404f115e3b5385e', 'chunk_index': 2, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1996}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774929569506_5decf883 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_1', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 1, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1708}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254149_1ce091fc 本身就是big chunk，直接使用
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753774906492004_7180119e
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1673352008778.txt', 'file_type': '.txt', 'filename': '1673352008778.txt', 'chunk_id': '0b79cc2f54552974_L2_3', 'parent_id': None, 'root_id': '0b79cc2f54552974', 'chunk_index': 3, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 102}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,843 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,843 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,843 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906492004_7180119e 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,843 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774906491973_ec175f44
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,843 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:39:59,843 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/中兴云操作指南/topics/1634611800670.txt', 'file_type': '.txt', 'filename': '1634611800670.txt', 'chunk_id': 'ee7d188829b784a3_L2_2', 'parent_id': 'ee7d188829b784a3_L1_0', 'root_id': 'ee7d188829b784a3', 'chunk_index': 4, 'total_chunks': 6, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 282}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,844 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,844 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,844 rag.components.base DEBUG:    ✅ 添加到big chunk组 ee7d188829b784a3_L1_0，当前最高分数: 0.015625
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787337.txt', 'file_type': '.txt', 'filename': '1787337.txt', 'chunk_id': 'af2f405ae0ee960c_L0_4', 'parent_id': None, 'root_id': 'af2f405ae0ee960c', 'chunk_index': 4, 'total_chunks': 147, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771925254191_1e9f95dc 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787340.txt', 'file_type': '.txt', 'filename': '1787340.txt', 'chunk_id': 'fe7cd0a425f70914_L0_1', 'parent_id': None, 'root_id': 'fe7cd0a425f70914', 'chunk_index': 1, 'total_chunks': 91, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1697}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753771970433686_1f77a338 本身就是big chunk，直接使用
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,844 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753774906490981_754b24fa
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/1579413245630.txt', 'file_type': '.txt', 'filename': '1579413245630.txt', 'chunk_id': '627e1b1834a0265e_L2_1', 'parent_id': None, 'root_id': '627e1b1834a0265e', 'chunk_index': 1, 'total_chunks': 5, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 292}
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,844 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774906490981_754b24fa 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753774832930662_a4136c85
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/emsplus/安全管理功能/topics/d0e499.txt', 'file_type': '.txt', 'filename': 'd0e499.txt', 'chunk_id': '75b829e24f66b8c4_L2_1', 'parent_id': None, 'root_id': '75b829e24f66b8c4', 'chunk_index': 1, 'total_chunks': 3, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 16}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base WARNING: ⚠️ Level 2 chunk doc_1753774832930662_a4136c85 缺少parent_id，降级使用small chunk
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_1', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 1, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1703}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:39:59,845 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:39:59,845 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228402_c3d6cd6c 本身就是big chunk，直接使用
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:39:59,845 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753772058228412_3395779e
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,845 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Npcf_PolicyManagement/zh-CN/mml/1787338.txt', 'file_type': '.txt', 'filename': '1787338.txt', 'chunk_id': '9e99a9122c935ef3_L0_4', 'parent_id': None, 'root_id': '9e99a9122c935ef3', 'chunk_index': 4, 'total_chunks': 145, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1750}
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,845 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:39:59,846 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:39:59,846 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:39:59,846 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772058228412_3395779e 本身就是big chunk，直接使用
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774906490938_9d59e8c5
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/配置指南/topics/13-添加SDNC.txt', 'file_type': '.txt', 'filename': '13-添加SDNC.txt', 'chunk_id': '3396b189a08c6682_L2_5', 'parent_id': '3396b189a08c6682_L1_0', 'root_id': '3396b189a08c6682', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 50}
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    🔗 parent_id: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG:    ✅ 添加到big chunk组 3396b189a08c6682_L1_0，当前最高分数: 0.014286
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:39:59,846 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774932902234_40c83eeb: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491998_2effca61: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491009_606bfdf5: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723466_bcf393f7: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490988_eb9ca35f: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774907723504_da84c278: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771717452109_5bd66d71: 1 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:39:59,846 rag.components.base DEBUG:    📦 Big chunk组 ee7d188829b784a3_L1_0: 2 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906491014_4763f6e6: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774929569506_5decf883: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254149_1ce091fc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906492004_7180119e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771925254191_1e9f95dc: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753771970433686_1f77a338: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774906490981_754b24fa: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 fallback_doc_1753774832930662_a4136c85: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228402_c3d6cd6c: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772058228412_3395779e: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG:    📦 Big chunk组 3396b189a08c6682_L1_0: 1 个small chunks
2025-08-01 00:39:59,847 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,847 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,847 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774932902234_40c83eeb
2025-08-01 00:39:59,850 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,850 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,850 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,850 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,850 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,850 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,850 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:39:59,850 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:39:59,850 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774932902234_40c83eeb 的内容，该组将被丢弃
2025-08-01 00:39:59,850 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:39:59,850 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:39:59,850 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774932902234_40c83eeb (分数: 0.016393)
2025-08-01 00:39:59,850 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:39:59,850 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:39:59,850 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491998_2effca61
2025-08-01 00:39:59,852 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,852 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,852 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,852 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,852 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,852 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,852 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:39:59,852 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:39:59,852 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491998_2effca61 的内容，该组将被丢弃
2025-08-01 00:39:59,853 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:39:59,853 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:39:59,853 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491998_2effca61 (分数: 0.016393)
2025-08-01 00:39:59,853 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,853 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,853 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491009_606bfdf5
2025-08-01 00:39:59,855 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,855 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,855 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,855 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,855 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,855 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,855 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:39:59,855 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:39:59,855 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491009_606bfdf5 的内容，该组将被丢弃
2025-08-01 00:39:59,855 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:39:59,855 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:39:59,855 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491009_606bfdf5 (分数: 0.016129)
2025-08-01 00:39:59,855 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,855 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,855 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723466_bcf393f7
2025-08-01 00:39:59,857 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,857 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,857 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,857 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,857 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,857 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,857 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:39:59,857 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:39:59,857 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723466_bcf393f7 的内容，该组将被丢弃
2025-08-01 00:39:59,857 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:39:59,857 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:39:59,857 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723466_bcf393f7 (分数: 0.016129)
2025-08-01 00:39:59,857 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,857 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,857 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490988_eb9ca35f
2025-08-01 00:39:59,859 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,859 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,859 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,859 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,859 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,859 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,859 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:39:59,859 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:39:59,859 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490988_eb9ca35f 的内容，该组将被丢弃
2025-08-01 00:39:59,859 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:39:59,859 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:39:59,859 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490988_eb9ca35f (分数: 0.015873)
2025-08-01 00:39:59,859 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:39:59,859 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:39:59,859 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774907723504_da84c278
2025-08-01 00:39:59,861 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,861 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,861 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,861 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,861 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,861 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,861 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:39:59,861 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:39:59,861 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774907723504_da84c278 的内容，该组将被丢弃
2025-08-01 00:39:59,861 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:39:59,861 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:39:59,861 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774907723504_da84c278 (分数: 0.015873)
2025-08-01 00:39:59,861 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,861 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,861 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771717452109_5bd66d71
2025-08-01 00:39:59,863 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,863 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,863 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,863 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,863 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,863 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,863 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:39:59,863 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:39:59,863 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771717452109_5bd66d71 的内容，该组将被丢弃
2025-08-01 00:39:59,863 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:39:59,863 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:39:59,863 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771717452109_5bd66d71 (分数: 0.015625)
2025-08-01 00:39:59,863 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,863 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,863 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ee7d188829b784a3_L1_0
2025-08-01 00:39:59,866 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,866 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,866 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,866 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,866 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,866 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,867 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:39:59,867 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:39:59,867 rag.components.base DEBUG:    ✅ 成功获取big chunk ee7d188829b784a3_L1_0，包含 2 个small chunks
2025-08-01 00:39:59,867 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:39:59,867 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:39:59,867 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015275
2025-08-01 00:39:59,867 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,867 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,867 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906491014_4763f6e6
2025-08-01 00:39:59,868 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,868 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,868 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,868 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,868 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,868 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,868 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:39:59,868 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:39:59,868 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906491014_4763f6e6 的内容，该组将被丢弃
2025-08-01 00:39:59,868 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:39:59,868 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:39:59,868 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906491014_4763f6e6 (分数: 0.015385)
2025-08-01 00:39:59,868 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:39:59,868 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:39:59,868 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774929569506_5decf883
2025-08-01 00:39:59,870 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,870 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,870 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,870 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,870 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,870 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,870 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:39:59,870 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:39:59,870 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774929569506_5decf883 的内容，该组将被丢弃
2025-08-01 00:39:59,870 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:39:59,870 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:39:59,870 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774929569506_5decf883 (分数: 0.015385)
2025-08-01 00:39:59,870 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,870 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,870 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254149_1ce091fc
2025-08-01 00:39:59,871 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,871 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,871 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,871 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,871 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,871 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,871 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:39:59,871 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:39:59,871 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254149_1ce091fc 的内容，该组将被丢弃
2025-08-01 00:39:59,871 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:39:59,871 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:39:59,871 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254149_1ce091fc (分数: 0.015152)
2025-08-01 00:39:59,871 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:39:59,871 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:39:59,871 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906492004_7180119e
2025-08-01 00:39:59,872 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,872 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,872 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,872 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,872 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,872 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,872 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:39:59,872 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:39:59,872 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906492004_7180119e 的内容，该组将被丢弃
2025-08-01 00:39:59,873 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:39:59,873 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:39:59,873 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906492004_7180119e (分数: 0.015152)
2025-08-01 00:39:59,873 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,873 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,873 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771925254191_1e9f95dc
2025-08-01 00:39:59,874 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,874 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,874 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,875 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,875 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,875 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,875 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:39:59,875 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:39:59,875 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771925254191_1e9f95dc 的内容，该组将被丢弃
2025-08-01 00:39:59,875 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:39:59,875 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:39:59,875 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771925254191_1e9f95dc (分数: 0.014925)
2025-08-01 00:39:59,875 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,875 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,875 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753771970433686_1f77a338
2025-08-01 00:39:59,877 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,877 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,877 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,877 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,877 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,877 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,877 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:39:59,877 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:39:59,877 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753771970433686_1f77a338 的内容，该组将被丢弃
2025-08-01 00:39:59,877 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:39:59,877 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:39:59,877 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753771970433686_1f77a338 (分数: 0.014706)
2025-08-01 00:39:59,877 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:39:59,877 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:39:59,877 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774906490981_754b24fa
2025-08-01 00:39:59,880 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,880 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,880 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,880 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,880 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,880 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:39:59,880 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:39:59,880 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:39:59,880 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774906490981_754b24fa 的内容，该组将被丢弃
2025-08-01 00:39:59,880 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:39:59,880 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:39:59,880 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774906490981_754b24fa (分数: 0.014706)
2025-08-01 00:39:59,880 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:39:59,880 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:39:59,880 rag.components.base DEBUG: 🔍 正在获取big chunk内容: fallback_doc_1753774832930662_a4136c85
2025-08-01 00:39:59,882 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,882 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,882 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,882 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,882 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,882 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,882 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:39:59,882 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:39:59,882 rag.components.base WARNING:    ❌ 无法获取big chunk fallback_doc_1753774832930662_a4136c85 的内容，该组将被丢弃
2025-08-01 00:39:59,882 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:39:59,882 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:39:59,882 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774832930662_a4136c85 (分数: 0.014493)
2025-08-01 00:39:59,882 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,882 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,882 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228402_c3d6cd6c
2025-08-01 00:39:59,885 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,885 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,885 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,885 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,885 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,885 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,885 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:39:59,885 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:39:59,885 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228402_c3d6cd6c 的内容，该组将被丢弃
2025-08-01 00:39:59,885 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:39:59,885 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:39:59,885 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228402_c3d6cd6c (分数: 0.014493)
2025-08-01 00:39:59,885 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:39:59,885 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:39:59,885 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772058228412_3395779e
2025-08-01 00:39:59,886 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,886 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,886 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,886 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,886 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,886 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,886 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:39:59,886 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:39:59,886 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772058228412_3395779e 的内容，该组将被丢弃
2025-08-01 00:39:59,886 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:39:59,886 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:39:59,886 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772058228412_3395779e (分数: 0.014286)
2025-08-01 00:39:59,886 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,886 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,886 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 3396b189a08c6682_L1_0
2025-08-01 00:39:59,887 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,887 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,887 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,888 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,888 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,888 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,888 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:39:59,888 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:39:59,888 rag.components.base DEBUG:    ✅ 成功获取big chunk 3396b189a08c6682_L1_0，包含 1 个small chunks
2025-08-01 00:39:59,888 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:39:59,888 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:39:59,888 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:39:59,888 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:39:59,888 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:39:59,888 rag.components.base DEBUG: 🎯 扩展完成: 2/19 个big chunk组成功获取内容
2025-08-01 00:39:59,888 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:39:59,888 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:39:59,888 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:39:59,888 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:39:59,888 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:39:59,888 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:39:59,888 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:39:59,888 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:39:59,888 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #1 ID: doc_1753774932902234_40c83eeb, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #2 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #2 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #2 ID: fallback_doc_1753774906491998_2effca61, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,888 rag.components.base DEBUG:    #3 ID: fallback_doc_1753774906491009_606bfdf5, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #4 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #4 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #4 ID: doc_1753774907723466_bcf393f7, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base DEBUG:    #5 ID: fallback_doc_1753774906490988_eb9ca35f, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:39:59,889 rag.components.base INFO:    ✅ 查询 1 返回 10 个结果
2025-08-01 00:39:59,889 rag.components.base INFO:    ✅ 查询 1 返回 10 个结果
2025-08-01 00:39:59,889 rag.components.base INFO:    ✅ 查询 1 返回 10 个结果
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 执行第 2 个查询: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 执行第 2 个查询: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 执行第 2 个查询: 虚拟机最多支持多少块网卡
2025-08-01 00:39:59,889 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '虚拟机最多支持多少块网卡', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,889 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '虚拟机最多支持多少块网卡', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,889 rag.components.base DEBUG: 🔍 开始ES检索 - 查询: '虚拟机最多支持多少块网卡', 检索类型: hybrid, Top-K: 10
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '虚拟机最多支持多少块网卡'
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '虚拟机最多支持多少块网卡'
2025-08-01 00:39:59,889 rag.components.base INFO: 🔍 开始Small2Big检索 - 查询: '虚拟机最多支持多少块网卡'
2025-08-01 00:39:59,889 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,889 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,889 rag.components.base INFO:    第一阶段: 检索Small Chunk (目标数量: 20)
2025-08-01 00:39:59,890 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,890 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,890 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,890 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,890 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,890 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,892 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,892 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,892 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,892 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,892 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,892 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:39:59,894 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,894 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,894 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:39:59,894 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,894 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,894 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:39:59,894 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,894 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,894 rag.components.base DEBUG: 🔍 Small Chunk过滤条件: {'term': {'metadata.chunk_level': 2}}
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '虚拟机最多支持多少块网卡...' (长度: 12)
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '虚拟机最多支持多少块网卡...' (长度: 12)
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 正在向量化文本: '虚拟机最多支持多少块网卡...' (长度: 12)
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,894 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 使用模型: models/bge-m3, API基础URL: http://workspace.featurize.cn:54253/v1
2025-08-01 00:39:59,894 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f43eb8d0-c8ab-437a-b4cb-c2f91430f38c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31bbcfa30>, 'json_data': {'input': '虚拟机最多支持多少块网卡', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,894 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f43eb8d0-c8ab-437a-b4cb-c2f91430f38c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31bbcfa30>, 'json_data': {'input': '虚拟机最多支持多少块网卡', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,894 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f43eb8d0-c8ab-437a-b4cb-c2f91430f38c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x31bbcfa30>, 'json_data': {'input': '虚拟机最多支持多少块网卡', 'model': 'models/bge-m3', 'encoding_format': 'base64'}}
2025-08-01 00:39:59,894 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,894 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,894 openai._base_client DEBUG: Sending HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=30 socket_options=None
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f5a80>
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f5a80>
2025-08-01 00:39:59,895 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16e9f5a80>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_headers.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: send_request_body.complete
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:39:59,895 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-08-01 00:40:00,022 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:40:00,022 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:40:00,022 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Content-Length', b'5726'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 31 Jul 2025 16:39:59 GMT'), (b'Server', b'uvicorn')])
2025-08-01 00:40:00,022 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:40:00,022 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:40:00,022 httpx INFO: HTTP Request: POST http://workspace.featurize.cn:54253/v1/embeddings "HTTP/1.1 200 OK"
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: receive_response_body.complete
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:40:00,023 httpcore.http11 DEBUG: response_closed.started
2025-08-01 00:40:00,024 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:40:00,024 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:40:00,024 httpcore.http11 DEBUG: response_closed.complete
2025-08-01 00:40:00,024 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:40:00,024 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:40:00,024 openai._base_client DEBUG: HTTP Response: POST http://workspace.featurize.cn:54253/v1/embeddings "200 OK" Headers({'connection': 'close', 'content-length': '5726', 'content-type': 'application/json', 'date': 'Thu, 31 Jul 2025 16:39:59 GMT', 'server': 'uvicorn'})
2025-08-01 00:40:00,024 openai._base_client DEBUG: request_id: None
2025-08-01 00:40:00,024 openai._base_client DEBUG: request_id: None
2025-08-01 00:40:00,024 openai._base_client DEBUG: request_id: None
2025-08-01 00:40:00,024 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:40:00,024 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:40:00,024 rag.components.embedding.openai_embedding.OpenAIEmbedding DEBUG: 成功获取向量，维度: 1024
2025-08-01 00:40:00,025 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:40:00,025 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:40:00,025 rag.components.base INFO: 🔄 差异化检索策略：向量检索chunk_level=2，文本检索chunk_level=0
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🎨 构建的高亮字段配置: {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '虚拟机最多支持多少块网卡', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '虚拟机最多支持多少块网卡', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:40:00,025 rag.components.base DEBUG: 🔍 执行文本检索查询体: {'query': {'bool': {'should': [{'match': {'content': {'query': '虚拟机最多支持多少块网卡', 'boost': 2.0, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.file_path': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.2, 'analyzer': 'ik_search_analyzer'}}}, {'match': {'metadata.title': {'query': '虚拟机最多支持多少块网卡', 'boost': 1.5, 'analyzer': 'ik_search_analyzer'}}}], 'filter': [{'term': {'metadata.chunk_level': 0}}], 'minimum_should_match': 1}}, 'highlight': {'fields': {'content': {'fragment_size': 200, 'number_of_fragments': 2}, 'metadata.file_path': {'fragment_size': 100, 'number_of_fragments': 1}, 'metadata.title': {'fragment_size': 150, 'number_of_fragments': 3, 'pre_tags': ['<mark>'], 'post_tags': ['</mark>']}}, 'require_field_match': False}, 'size': 40}
2025-08-01 00:40:00,026 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.005070595536381006, -0.012001026421785355, -0.02363193780183792, 0.027962299063801765, -0.03734475374221802, 0.04371075704693794, 0.01839478872716427, 0.005417579784989357, 0.029128165915608406, -0.023298831656575203, 0.011001712642610073, 0.04200822114944458, 0.041638102382421494, -0.02986839972436428, 0.00829060934484005, -0.02105962671339512, -0.04844824597239494, -0.02313227951526642, 0.008970698341727257, -0.024427687749266624, 0.004427518229931593, -0.005348183214664459, -0.04030568525195122, 0.05144619196653366, 0.08853185921907425, 0.0024265761021524668, 0.0018320765811949968, -0.014018161222338676, 0.04626455903053284, 0.046338584274053574, 0.013148387894034386, -0.036549001932144165, 0.05244550481438637, -0.02690746821463108, 0.009354693815112114, -0.0621795691549778, -0.00858207605779171, -0.03133035823702812, -0.04415489733219147, -0.008059286512434483, -0.017543520778417587, -0.018727893009781837, 0.0007292451336979866, -0.0034328303299844265, -0.027888275682926178, -0.047745026648044586, 0.0219108946621418, -0.019116515293717384, -0.057590123265981674, 0.006620458327233791, -0.02133721485733986, -0.005889478605240583, 0.02337285503745079, -0.04892939701676369, 0.001662054331973195, 0.06880465149879456, -0.029128165915608406, 0.01745099201798439, -0.0355311818420887, -0.0373077392578125, 0.0017800289206206799, 0.03569773584604263, -0.03677107021212578, -0.02189238928258419, 0.02601918764412403, 0.028795061632990837, 0.026851950213313103, 0.03430979698896408, -0.009040094912052155, -0.028017817065119743, -0.019893759861588478, -0.0042771585285663605, 0.01199177373200655, 0.006416894495487213, -0.06303083896636963, 0.0028198249638080597, 0.041527070105075836, 0.06976695358753204, -0.009424090385437012, -0.04696778208017349, 0.05174228176474571, -0.024335158988833427, -0.00784184318035841, 0.028776556253433228, 0.016692252829670906, 0.0811295285820961, -0.013879368081688881, 0.06654693931341171, 0.011788209900259972, 0.023928029462695122, -0.06058806553483009, 0.026222752407193184, -0.02365044318139553, -0.05229745805263519, -0.029461272060871124, 0.04755996912717819, -0.055813565850257874, -0.000763365242164582, 0.061402324587106705, 0.028258392587304115, 0.012176832184195518, 0.033032894134521484, 0.0010987833375111222, 0.027407124638557434, 0.0016019103350117803, 0.03423577547073364, 0.05659081041812897, -0.003398131811991334, -0.07802055031061172, -0.00885041058063507, 0.014989716932177544, 0.0342542789876461, 0.014166207984089851, -0.019042491912841797, -0.029997941106557846, -0.0325702503323555, -0.03427278622984886, -0.016775529831647873, 0.03867717087268829, -0.009104865603148937, 0.06062508001923561, -0.004503855016082525, 0.03767785802483559, -0.05029882863163948, -0.052260447293519974, 0.006925804540514946, -0.009419464506208897, 0.08653323352336884, 0.0006685229018330574, 0.02540849708020687, -0.008161067962646484, 0.016729265451431274, -0.008068539202213287, 0.005607264582067728, -0.012250855565071106, -0.003981065470725298, -0.0049132960848510265, -0.0031228577718138695, -0.030127480626106262, -0.07302398234605789, 0.033291976898908615, 0.042785465717315674, 0.030238516628742218, -0.05747908726334572, -0.003171435557305813, -0.029054144397377968, 0.028036322444677353, -0.02988690510392189, 0.0343468077480793, -0.016146332025527954, -0.011122000403702259, 0.015822479501366615, -0.0108074015006423, -0.016960587352514267, -0.004177689552307129, -0.0180616844445467, 0.030886219814419746, -0.0018043178133666515, -0.005838587414473295, 0.04149005562067032, -0.04330362752079964, -0.005047463346272707, -0.03945441544055939, -0.054333098232746124, 0.0032894101459532976, 0.006287353578954935, -0.024483205750584602, 0.008674604818224907, -0.04256339371204376, -0.007050719112157822, 0.02128169685602188, 0.017599038779735565, -0.0015359834069386125, 0.003236206015571952, -0.02039341814815998, 0.02157779037952423, 0.022040436044335365, -0.011177517473697662, 0.028906097635626793, -0.03793694078922272, -0.012519190087914467, 0.003502227133139968, 0.021984918043017387, 0.015100752003490925, -0.013944137841463089, -0.01978272572159767, 0.06532555818557739, -0.018441053107380867, 0.011603151448071003, 0.03440232574939728, 0.020948592573404312, 0.057553112506866455, 0.03523508831858635, -0.04404386132955551, 0.040934883058071136, -0.0009495801059529185, -0.03640095517039299, -0.006097668781876564, -0.0032870969735085964, 0.027684712782502174, -0.07054419815540314, -0.011168264783918858, 0.032718297094106674, 0.0045107947662472725, -0.0225030817091465, 0.01632213592529297, 0.010872171260416508, -0.03430979698896408, -0.02342837303876877, -0.022725151851773262, -0.01507299393415451, -0.00030274371965788305, -0.00887354277074337, 0.0005456326762214303, -0.03142289072275162, -0.015526385977864265, 0.029165178537368774, -0.019449621438980103, -0.009104865603148937, -0.0304975975304842, -0.027980806306004524, 0.05189032852649689, 0.0003091050893999636, 0.02576010674238205, -0.009678546339273453, -0.01862611249089241, 0.018413294106721878, -0.0048809112049639225, -0.019708702340722084, -0.059329669922590256, -0.02868402749300003, 0.013009593822062016, -0.011593898758292198, -0.004867031704634428, 0.05573954060673714, -0.01406442653387785, -0.051964353770017624, 0.024335158988833427, 0.00280825886875391, -0.017710072919726372, -0.015295063145458698, 0.03643796592950821, -0.012232349254190922, -0.04741192236542702, -0.024501711130142212, 0.07853871583938599, 0.01540609821677208, 0.03529060631990433, -0.050483886152505875, 0.005750684998929501, -0.009576763957738876, -0.034198760986328125, -0.009734063409268856, -0.02128169685602188, 0.004862405359745026, 0.0266483873128891, 0.04171212762594223, 0.004409012384712696, 0.014758394099771976, -0.0079945158213377, 0.02072652243077755, -0.0003646225668489933, 0.048041120171546936, 0.020596981048583984, -0.01111274678260088, -0.015461616218090057, -0.006282727234065533, -0.029794376343488693, -0.016109319403767586, 0.03412473946809769, -0.04389581456780434, 0.04108292981982231, 0.024205617606639862, 0.017090128734707832, -0.010761136189103127, 0.04174913838505745, -0.04878135025501251, -0.017256680876016617, 0.024631250649690628, 0.03371760994195938, -0.008193453773856163, 0.020522959530353546, -0.022632623091340065, -0.010446537286043167, 0.02422412298619747, 0.023298831656575203, -0.0180154200643301, 0.011603151448071003, -0.010104179382324219, -0.023150784894824028, -0.011908497661352158, 0.0035646844189614058, 0.07091432064771652, -0.018431801348924637, 0.023761477321386337, 0.0069998279213905334, -0.02724057249724865, -0.14301300048828125, 0.05063193291425705, 0.008646845817565918, 0.012380396015942097, -0.01802467182278633, -0.03406922146677971, -0.008989203721284866, 0.022854693233966827, -0.06280876696109772, 0.05918162316083908, -0.002389564411714673, -0.05115009844303131, 0.004596383776515722, -0.06014392897486687, -0.003913981840014458, -0.028202876448631287, 0.011501369997859001, -0.06739821285009384, 0.01170493382960558, -0.01199177373200655, 0.011630910448729992, -0.04859629273414612, 0.03184852376580238, -0.02925770729780197, 0.0070599718019366264, -0.03371760994195938, 0.08905002474784851, -0.0062410891987383366, -0.02007881924510002, -0.022854693233966827, 0.022891703993082047, 0.049299515783786774, 0.005727552343159914, 0.0062318360432982445, 0.007911239750683308, -0.05562850832939148, 0.04063878953456879, -0.03342151641845703, -0.0026509591843932867, 0.010150444693863392, -0.0018725580302998424, 0.01066860742866993, 0.01833927072584629, 0.010983206331729889, 0.05892254412174225, -0.009104865603148937, 0.009669292718172073, -0.0331624373793602, 0.009257538244128227, -0.020948592573404312, 0.011371828615665436, 0.008554317057132721, -0.0033079159911721945, -0.03571623936295509, -0.02218848280608654, 0.013509251177310944, -0.035309113562107086, 0.04104591906070709, 0.03938039392232895, -0.006014392711222172, -0.007138621527701616, 0.010400272905826569, 0.010566825047135353, 0.025519531220197678, -0.03886222839355469, 0.026981491595506668, 0.08964221179485321, -0.012657983228564262, -0.026278270408511162, -0.03762234002351761, 0.023021245375275612, 0.03201507404446602, -0.006703734863549471, -0.01509149931371212, -0.0042332070879638195, -0.002298191888257861, -0.04844824597239494, -0.013139135204255581, 0.0003860199067275971, -0.1575215756893158, 0.05140917748212814, 0.010242973454296589, 0.017062369734048843, 0.044858116656541824, -0.006847154814749956, 0.013231663964688778, -0.05407401919364929, -0.021707331761717796, 0.05185331776738167, 0.2173323929309845, 0.025223437696695328, 0.005227895453572273, -0.008855036459863186, 0.03736325725913048, 0.008845783770084381, 0.019727207720279694, 0.018478065729141235, -0.00798988901078701, -0.01477690041065216, 0.015350581146776676, 0.032089099287986755, 0.009724810719490051, 0.007527243811637163, -0.006995201576501131, 0.05381493642926216, -0.03986154496669769, 0.01625736616551876, 0.04004660248756409, -0.014564082957804203, -0.012435914017260075, -0.018746400251984596, -0.008373885415494442, 0.029960928484797478, -0.04596846550703049, -0.06817545741796494, -0.013111376203596592, 0.07594790309667587, -0.022299516946077347, 0.043044544756412506, -0.024057570844888687, 0.034827958792448044, 0.0035716239362955093, -0.044488001614809036, -0.02933173067867756, 0.0044830357655882835, 0.03377312794327736, -0.029368743300437927, 0.0010739160934463143, 0.015535639598965645, -0.0028267644811421633, -0.041638102382421494, -0.004272532183676958, -0.005875599104911089, -0.009687799029052258, -0.053703900426626205, 0.04289649799466133, 0.037104178220033646, -0.011575392447412014, -0.004018077161163092, -0.06647291779518127, -0.02866552211344242, -0.003606322454288602, -0.00029869555146433413, -0.0336620919406414, -0.038010962307453156, -0.0020703389309346676, -0.016507195308804512, 0.0007361848256550729, 0.028036322444677353, -0.016405412927269936, -0.000813099613878876, -0.09053049236536026, 0.012435914017260075, 0.027999311685562134, 0.006014392711222172, -0.04471006989479065, -0.01775633729994297, 0.0004282363224774599, 0.0063613769598305225, -0.036271415650844574, -0.0159890316426754, -0.01082590688019991, -0.056627821177244186, 0.04911445826292038, -0.010687113739550114, -0.01687731221318245, 0.02903563715517521, 0.010446537286043167, 0.002019447972998023, -0.0013971896842122078, 0.01746024563908577, -0.03549417108297348, 0.0029956302605569363, -0.009090986102819443, -0.03706716373562813, 0.027999311685562134, -0.00266252551227808, -0.03275530785322189, -0.037104178220033646, 0.003296349896118045, 0.0002598044229671359, -0.011862233281135559, -0.023224808275699615, 0.022725151851773262, -0.00585246691480279, 0.006037524901330471, 0.014702877029776573, -0.018163466826081276, 0.01318539958447218, -0.01066860742866993, -0.027980806306004524, -0.023150784894824028, 0.016747770830988884, 0.0019708701875060797, -0.024631250649690628, -0.00024534674594178796, -0.00606065709143877, -0.005995886866003275, 0.02607470564544201, 0.0006430773646570742, 0.023594925180077553, -0.007157127372920513, -0.02368745394051075, -0.002133952919393778, -0.014869429171085358, -0.039787519723176956, 0.0180154200643301, 0.025056885555386543, 0.04589444398880005, -0.050705958157777786, -0.02577861212193966, 0.017080875113606453, 0.00680551677942276, 0.007217271253466606, -0.03462439775466919, -0.0343468077480793, 0.047152839601039886, 0.005315797869116068, -0.0011016748612746596, 0.022891703993082047, -0.031496912240982056, -0.031219324097037315, -0.007402329705655575, -0.03225564956665039, 0.009678546339273453, 0.01860760524868965, -0.025223437696695328, 0.024094583466649055, 0.026500340551137924, 0.004004197660833597, -0.031237831339240074, -0.0017881252570077777, 0.038640160113573074, 0.03693762421607971, -0.03077518567442894, -0.021392732858657837, 0.025612059980630875, 0.02986839972436428, 0.0036178885493427515, -0.03160794824361801, 0.07509663701057434, -6.936069257790223e-05, -0.03371760994195938, 0.005315797869116068, -0.004328049719333649, -0.02872103825211525, 0.047856058925390244, 0.04293351247906685, -0.026185741648077965, 0.009872857481241226, 0.017016105353832245, 0.032681286334991455, 0.040416717529296875, 0.03788142278790474, 0.03614187240600586, -0.036511991173028946, 0.010400272905826569, -0.01082590688019991, -0.07095132768154144, 0.03960246220231056, -0.03588279336690903, -0.039787519723176956, 0.01655345968902111, 0.01685880497097969, -0.0527045875787735, -0.01601679064333439, 0.008410897105932236, 0.011621657758951187, 0.01271350122988224, 0.06880465149879456, 0.010927689261734486, -0.03841809183359146, -0.03290335461497307, 0.013231663964688778, 0.03516106680035591, 0.0034952873829752207, -0.013574021868407726, -0.008540437556803226, 0.008753255009651184, -0.020337900146842003, 0.04885537549853325, -0.010566825047135353, -0.011186770163476467, -0.026463327929377556, 0.07772445678710938, -0.028461957350373268, 0.049299515783786774, 0.0011901557445526123, 0.013823850080370903, 0.046338584274053574, 0.010862918570637703, 0.03292186185717583, -0.05115009844303131, 0.001800847938284278, -0.010400272905826569, -0.012204591184854507, -0.023557914420962334, -0.007337559014558792, 0.014462301507592201, -0.022984232753515244, 0.005570252891629934, -0.018838929012417793, 0.0189499631524086, 0.02805482968688011, 0.007013707421720028, 0.03020150400698185, 0.03588279336690903, 0.0006291980389505625, -0.045746397227048874, -0.03379163518548012, 0.008836531080305576, 0.05766414850950241, -0.04060177877545357, 0.003909355495125055, -0.04000959172844887, -0.0033911922946572304, -0.04149005562067032, 0.04755996912717819, 0.022336529567837715, 0.004885537549853325, -0.01331494003534317, 0.030978748574852943, -0.0047513702884316444, 0.05836736783385277, -0.04374776780605316, 0.011797462590038776, 0.012611718848347664, -0.007328306324779987, 0.005449965130537748, 0.036826588213443756, 0.0054407124407589436, 0.0029401127249002457, 0.018579846248030663, -0.018515076488256454, 0.026777926832437515, 0.008036154322326183, 0.0007020647171884775, 0.029165178537368774, 0.045413292944431305, -0.018718641251325607, -0.036530494689941406, -0.022058941423892975, -0.01436977181583643, 0.048707328736782074, -0.03144139423966408, 0.019301574677228928, 0.008017648011446, -0.02935023605823517, -0.03342151641845703, 0.0014399844221770763, -0.01896847039461136, -0.03897326439619064, 0.004688913002610207, -0.012010280042886734, -0.013388963416218758, 0.018117202445864677, -0.035956814885139465, -0.01139033492654562, -0.03016449324786663, 0.02986839972436428, 0.005056716501712799, -0.03706716373562813, -0.025630565360188484, 0.04648663103580475, -0.00826747715473175, 0.00487165804952383, -0.04504317417740822, 0.03734475374221802, 0.029442766681313515, -0.04267442971467972, 0.014924947172403336, 0.019745714962482452, 0.05610965937376022, -0.030238516628742218, 0.024483205750584602, -0.0013254795921966434, 0.007425461895763874, 0.005884851794689894, -0.03852912411093712, -0.005329677369445562, 0.018200477585196495, -0.022132964804768562, 0.014536324888467789, -0.06480739265680313, 0.016923576593399048, 0.02544550783932209, -0.029979433864355087, -0.002175590954720974, 0.045709386467933655, -0.044488001614809036, 0.002221855567768216, -0.030978748574852943, -0.02572309598326683, -0.006204077508300543, -0.007869601249694824, -0.042193278670310974, 0.04563536122441292, 0.002970184665173292, 0.024150099605321884, 0.025538036599755287, 0.0006424990715458989, -0.019690196961164474, 0.05026181787252426, 0.01079814787954092, -0.03989855572581291, 0.06669498980045319, -0.022854693233966827, -0.007022960111498833, -0.01093694195151329, 0.01778409630060196, -0.02899862639605999, -0.0018320765811949968, -0.04297052323818207, 0.034494854509830475, 0.026759421452879906, -0.04049074277281761, -0.012491431087255478, 0.0108074015006423, 0.07713227719068527, -0.021522272378206253, 0.03403221070766449, 0.02105962671339512, 0.00487165804952383, 0.008531184867024422, -0.02601918764412403, 0.04241534695029259, -0.011196023784577847, 0.023169292137026787, -0.01861685886979103, 0.011630910448729992, -0.04411788284778595, 0.06891568750143051, -0.021411238238215446, -0.023483891040086746, 0.021152157336473465, -0.020800545811653137, -0.00027339463122189045, -0.016211101785302162, 0.0004276580293662846, 0.040120627731084824, -0.0028915349394083023, -0.04445098713040352, -0.06551061570644379, 0.022281011566519737, -0.06695406883955002, -0.047522954642772675, 0.020800545811653137, 0.01924605667591095, 0.03371760994195938, -0.004624142777174711, -0.01837628334760666, 0.0657326877117157, 0.025815624743700027, 0.011297805234789848, 0.013685056939721107, 0.04948457330465317, 0.012408155016601086, 0.05126113072037697, 0.018228236585855484, 0.019634678959846497, 0.021429743617773056, -0.022725151851773262, 0.01048354897648096, 0.03177449852228165, 0.01597977802157402, 0.019023986533284187, -0.04430294409394264, 0.01361103355884552, -0.01688656397163868, -0.018274500966072083, -0.028850579634308815, -0.006810143124312162, -0.011353323236107826, 0.013407469727098942, -0.003606322454288602, -0.024964356794953346, -0.018838929012417793, 0.008781013078987598, -0.00798988901078701, 0.0012306373100727797, -0.030571620911359787, -0.01656271144747734, 0.02218848280608654, -0.1533762663602829, 0.02957230620086193, 0.009414837695658207, 0.029220696538686752, -0.02459423989057541, -0.02105962671339512, -0.041638102382421494, -0.02281768061220646, 0.004351181909441948, -0.011464358307421207, -0.0629568099975586, -0.03930636867880821, 0.057257018983364105, -0.0022241687402129173, 0.04408087208867073, -0.015766961500048637, 0.02011583000421524, 0.03368059918284416, 0.019283069297671318, -0.014702877029776573, -0.013018847443163395, -0.03975050896406174, 0.02629677578806877, -0.010853665880858898, -0.010261479765176773, -0.02992391772568226, -3.81682621082291e-05, 0.02340986765921116, -0.031515419483184814, 0.013962644152343273, -0.016442423686385155, -0.033588070422410965, 0.028943108394742012, 0.05259355157613754, 0.007448594085872173, -0.025797119364142418, 0.018727893009781837, -0.01862611249089241, -0.01151987537741661, 0.002801319118589163, -0.011575392447412014, 0.04826318845152855, 0.028943108394742012, -0.02844345197081566, 0.016470182687044144, 0.012991088442504406, 0.004559372551739216, 0.0010097239864990115, -0.015850238502025604, 0.028017817065119743, 0.0014295749133452773, -0.0159427672624588, -0.02185537852346897, -0.012537695467472076, 0.021244686096906662, 0.016627483069896698, -0.0479670949280262, 0.005329677369445562, 0.024168606847524643, 0.04234132543206215, -0.03473543003201485, -0.015350581146776676, 0.007508737966418266, -0.01564667373895645, -0.05096503719687462, -0.052260447293519974, -0.06088415905833244, 0.035660721361637115, -0.004954934120178223, -0.0007651001797057688, -0.03675256669521332, -0.04704180359840393, -0.005139992572367191, -0.04193419590592384, -0.01212131418287754, -0.032366685569286346, 0.02489033341407776, 0.023243315517902374, -0.024094583466649055, -0.032958872616291046, 0.014739888720214367, -0.01022446807473898, -0.02836942858994007, -0.030553115531802177, 0.03691911697387695, 7.149320299504325e-05, -0.04681973531842232, 0.016645988449454308, 0.010733378119766712, -0.01096470095217228, -0.05710897222161293, -0.027703218162059784, 0.014166207984089851, 0.0028105720411986113, 0.001503598177805543, -0.007235777098685503, -0.012880053371191025, -0.020763535052537918, -0.03310691937804222, -0.009405585005879402, 0.012056544423103333, -0.017858119681477547, 0.03158944100141525, -0.009280670434236526, 0.01181596890091896, 0.030886219814419746, -0.009872857481241226, -0.03632693365216255, 0.02011583000421524, -0.01744173839688301, -9.534836863167584e-05, -0.002537611173465848, 0.011029470711946487, 0.022318024188280106, -0.003835332114249468, -0.02809184044599533, 0.042489372193813324, -0.019060999155044556, -0.03938039392232895, -0.04685674607753754, -0.058478403836488724, 0.05266757309436798, -0.017562026157975197, -0.029072649776935577, -0.004922549240291119, -0.011899244971573353, 0.009109491482377052, 0.0038029467687010765, 0.04271144047379494, -0.03342151641845703, 0.05392597243189812, -0.004413639195263386, -0.021226180717349052, 0.00354849174618721, 0.004175376612693071, -0.02037491276860237, -0.028832074254751205, 0.060773126780986786, 0.026204247027635574, -0.015332074835896492, 0.0064816647209227085, 0.0052510276436805725, -0.01839478872716427, -0.013213158585131168, -0.004728238098323345, -0.03460589051246643, -0.05170527100563049, 0.002366432221606374, -0.024945851415395737, -0.06480739265680313, 0.01138108130544424, -0.015850238502025604, 0.009461102075874805, 0.007494858466088772, -0.016396159306168556, 0.020633993670344353, -0.011510622687637806, -0.03164495900273323, 0.023002739995718002, 0.015054487623274326, 0.006699108052998781, 0.018117202445864677, -0.003566997591406107, 0.013018847443163395, -0.01896847039461136, 0.0022114459425210953, 0.014203219674527645, 0.010002397932112217, 0.0204304289072752, -0.03194105252623558, -0.022077448666095734, 0.03934338316321373, -0.04256339371204376, 0.03319944813847542, 0.014813912101089954, -0.03177449852228165, 0.012102808803319931, -0.014249484054744244, 0.01891295239329338, -0.008656099438667297, 0.00826285034418106, 0.0109554473310709, 0.010973953641951084, -0.006130054127424955, -0.016729265451431274, 0.04330362752079964, 0.02964632958173752, 0.07483755052089691, 0.0109554473310709, 0.03590129688382149, 0.024982862174510956, 0.026685398072004318, 0.016497941687703133, -0.026759421452879906, 0.051335155963897705, -0.06343796104192734, 0.014138448983430862, -0.035013020038604736, 0.009558257646858692, 0.0485592819750309, -0.028295405209064484, -0.03875119611620903, -0.0037219838704913855, 0.012593213468790054, -0.03758532926440239, -0.032126110047101974, 0.007878854870796204, 0.014388278126716614, -0.012750512920320034, 0.039824534207582474, 0.02807333506643772, -0.0053111715242266655, 0.017913637682795525, -0.004448337480425835, 0.03351404517889023, -0.019135022535920143, 0.040971893817186356, 0.02487182803452015, -0.0068193962797522545, 0.02459423989057541, 0.014471554197371006, 0.019893759861588478, -0.03915832191705704, -0.023779984563589096, -0.021189168095588684, -0.025945164263248444, 0.019690196961164474, -0.015433857217431068, 0.0037960070185363293, -0.003483721287921071, -0.03693762421607971, -0.0031020387541502714, 0.002458961447700858, 0.026111718267202377, 0.008503425866365433, -0.013527757488191128, 0.04911445826292038, 0.0034999139606952667, -0.015489374287426472, -0.021170662716031075, 0.020837558433413506, -0.007453220430761576, 0.015035982243716717, 0.02548251859843731], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:40:00,026 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.005070595536381006, -0.012001026421785355, -0.02363193780183792, 0.027962299063801765, -0.03734475374221802, 0.04371075704693794, 0.01839478872716427, 0.005417579784989357, 0.029128165915608406, -0.023298831656575203, 0.011001712642610073, 0.04200822114944458, 0.041638102382421494, -0.02986839972436428, 0.00829060934484005, -0.02105962671339512, -0.04844824597239494, -0.02313227951526642, 0.008970698341727257, -0.024427687749266624, 0.004427518229931593, -0.005348183214664459, -0.04030568525195122, 0.05144619196653366, 0.08853185921907425, 0.0024265761021524668, 0.0018320765811949968, -0.014018161222338676, 0.04626455903053284, 0.046338584274053574, 0.013148387894034386, -0.036549001932144165, 0.05244550481438637, -0.02690746821463108, 0.009354693815112114, -0.0621795691549778, -0.00858207605779171, -0.03133035823702812, -0.04415489733219147, -0.008059286512434483, -0.017543520778417587, -0.018727893009781837, 0.0007292451336979866, -0.0034328303299844265, -0.027888275682926178, -0.047745026648044586, 0.0219108946621418, -0.019116515293717384, -0.057590123265981674, 0.006620458327233791, -0.02133721485733986, -0.005889478605240583, 0.02337285503745079, -0.04892939701676369, 0.001662054331973195, 0.06880465149879456, -0.029128165915608406, 0.01745099201798439, -0.0355311818420887, -0.0373077392578125, 0.0017800289206206799, 0.03569773584604263, -0.03677107021212578, -0.02189238928258419, 0.02601918764412403, 0.028795061632990837, 0.026851950213313103, 0.03430979698896408, -0.009040094912052155, -0.028017817065119743, -0.019893759861588478, -0.0042771585285663605, 0.01199177373200655, 0.006416894495487213, -0.06303083896636963, 0.0028198249638080597, 0.041527070105075836, 0.06976695358753204, -0.009424090385437012, -0.04696778208017349, 0.05174228176474571, -0.024335158988833427, -0.00784184318035841, 0.028776556253433228, 0.016692252829670906, 0.0811295285820961, -0.013879368081688881, 0.06654693931341171, 0.011788209900259972, 0.023928029462695122, -0.06058806553483009, 0.026222752407193184, -0.02365044318139553, -0.05229745805263519, -0.029461272060871124, 0.04755996912717819, -0.055813565850257874, -0.000763365242164582, 0.061402324587106705, 0.028258392587304115, 0.012176832184195518, 0.033032894134521484, 0.0010987833375111222, 0.027407124638557434, 0.0016019103350117803, 0.03423577547073364, 0.05659081041812897, -0.003398131811991334, -0.07802055031061172, -0.00885041058063507, 0.014989716932177544, 0.0342542789876461, 0.014166207984089851, -0.019042491912841797, -0.029997941106557846, -0.0325702503323555, -0.03427278622984886, -0.016775529831647873, 0.03867717087268829, -0.009104865603148937, 0.06062508001923561, -0.004503855016082525, 0.03767785802483559, -0.05029882863163948, -0.052260447293519974, 0.006925804540514946, -0.009419464506208897, 0.08653323352336884, 0.0006685229018330574, 0.02540849708020687, -0.008161067962646484, 0.016729265451431274, -0.008068539202213287, 0.005607264582067728, -0.012250855565071106, -0.003981065470725298, -0.0049132960848510265, -0.0031228577718138695, -0.030127480626106262, -0.07302398234605789, 0.033291976898908615, 0.042785465717315674, 0.030238516628742218, -0.05747908726334572, -0.003171435557305813, -0.029054144397377968, 0.028036322444677353, -0.02988690510392189, 0.0343468077480793, -0.016146332025527954, -0.011122000403702259, 0.015822479501366615, -0.0108074015006423, -0.016960587352514267, -0.004177689552307129, -0.0180616844445467, 0.030886219814419746, -0.0018043178133666515, -0.005838587414473295, 0.04149005562067032, -0.04330362752079964, -0.005047463346272707, -0.03945441544055939, -0.054333098232746124, 0.0032894101459532976, 0.006287353578954935, -0.024483205750584602, 0.008674604818224907, -0.04256339371204376, -0.007050719112157822, 0.02128169685602188, 0.017599038779735565, -0.0015359834069386125, 0.003236206015571952, -0.02039341814815998, 0.02157779037952423, 0.022040436044335365, -0.011177517473697662, 0.028906097635626793, -0.03793694078922272, -0.012519190087914467, 0.003502227133139968, 0.021984918043017387, 0.015100752003490925, -0.013944137841463089, -0.01978272572159767, 0.06532555818557739, -0.018441053107380867, 0.011603151448071003, 0.03440232574939728, 0.020948592573404312, 0.057553112506866455, 0.03523508831858635, -0.04404386132955551, 0.040934883058071136, -0.0009495801059529185, -0.03640095517039299, -0.006097668781876564, -0.0032870969735085964, 0.027684712782502174, -0.07054419815540314, -0.011168264783918858, 0.032718297094106674, 0.0045107947662472725, -0.0225030817091465, 0.01632213592529297, 0.010872171260416508, -0.03430979698896408, -0.02342837303876877, -0.022725151851773262, -0.01507299393415451, -0.00030274371965788305, -0.00887354277074337, 0.0005456326762214303, -0.03142289072275162, -0.015526385977864265, 0.029165178537368774, -0.019449621438980103, -0.009104865603148937, -0.0304975975304842, -0.027980806306004524, 0.05189032852649689, 0.0003091050893999636, 0.02576010674238205, -0.009678546339273453, -0.01862611249089241, 0.018413294106721878, -0.0048809112049639225, -0.019708702340722084, -0.059329669922590256, -0.02868402749300003, 0.013009593822062016, -0.011593898758292198, -0.004867031704634428, 0.05573954060673714, -0.01406442653387785, -0.051964353770017624, 0.024335158988833427, 0.00280825886875391, -0.017710072919726372, -0.015295063145458698, 0.03643796592950821, -0.012232349254190922, -0.04741192236542702, -0.024501711130142212, 0.07853871583938599, 0.01540609821677208, 0.03529060631990433, -0.050483886152505875, 0.005750684998929501, -0.009576763957738876, -0.034198760986328125, -0.009734063409268856, -0.02128169685602188, 0.004862405359745026, 0.0266483873128891, 0.04171212762594223, 0.004409012384712696, 0.014758394099771976, -0.0079945158213377, 0.02072652243077755, -0.0003646225668489933, 0.048041120171546936, 0.020596981048583984, -0.01111274678260088, -0.015461616218090057, -0.006282727234065533, -0.029794376343488693, -0.016109319403767586, 0.03412473946809769, -0.04389581456780434, 0.04108292981982231, 0.024205617606639862, 0.017090128734707832, -0.010761136189103127, 0.04174913838505745, -0.04878135025501251, -0.017256680876016617, 0.024631250649690628, 0.03371760994195938, -0.008193453773856163, 0.020522959530353546, -0.022632623091340065, -0.010446537286043167, 0.02422412298619747, 0.023298831656575203, -0.0180154200643301, 0.011603151448071003, -0.010104179382324219, -0.023150784894824028, -0.011908497661352158, 0.0035646844189614058, 0.07091432064771652, -0.018431801348924637, 0.023761477321386337, 0.0069998279213905334, -0.02724057249724865, -0.14301300048828125, 0.05063193291425705, 0.008646845817565918, 0.012380396015942097, -0.01802467182278633, -0.03406922146677971, -0.008989203721284866, 0.022854693233966827, -0.06280876696109772, 0.05918162316083908, -0.002389564411714673, -0.05115009844303131, 0.004596383776515722, -0.06014392897486687, -0.003913981840014458, -0.028202876448631287, 0.011501369997859001, -0.06739821285009384, 0.01170493382960558, -0.01199177373200655, 0.011630910448729992, -0.04859629273414612, 0.03184852376580238, -0.02925770729780197, 0.0070599718019366264, -0.03371760994195938, 0.08905002474784851, -0.0062410891987383366, -0.02007881924510002, -0.022854693233966827, 0.022891703993082047, 0.049299515783786774, 0.005727552343159914, 0.0062318360432982445, 0.007911239750683308, -0.05562850832939148, 0.04063878953456879, -0.03342151641845703, -0.0026509591843932867, 0.010150444693863392, -0.0018725580302998424, 0.01066860742866993, 0.01833927072584629, 0.010983206331729889, 0.05892254412174225, -0.009104865603148937, 0.009669292718172073, -0.0331624373793602, 0.009257538244128227, -0.020948592573404312, 0.011371828615665436, 0.008554317057132721, -0.0033079159911721945, -0.03571623936295509, -0.02218848280608654, 0.013509251177310944, -0.035309113562107086, 0.04104591906070709, 0.03938039392232895, -0.006014392711222172, -0.007138621527701616, 0.010400272905826569, 0.010566825047135353, 0.025519531220197678, -0.03886222839355469, 0.026981491595506668, 0.08964221179485321, -0.012657983228564262, -0.026278270408511162, -0.03762234002351761, 0.023021245375275612, 0.03201507404446602, -0.006703734863549471, -0.01509149931371212, -0.0042332070879638195, -0.002298191888257861, -0.04844824597239494, -0.013139135204255581, 0.0003860199067275971, -0.1575215756893158, 0.05140917748212814, 0.010242973454296589, 0.017062369734048843, 0.044858116656541824, -0.006847154814749956, 0.013231663964688778, -0.05407401919364929, -0.021707331761717796, 0.05185331776738167, 0.2173323929309845, 0.025223437696695328, 0.005227895453572273, -0.008855036459863186, 0.03736325725913048, 0.008845783770084381, 0.019727207720279694, 0.018478065729141235, -0.00798988901078701, -0.01477690041065216, 0.015350581146776676, 0.032089099287986755, 0.009724810719490051, 0.007527243811637163, -0.006995201576501131, 0.05381493642926216, -0.03986154496669769, 0.01625736616551876, 0.04004660248756409, -0.014564082957804203, -0.012435914017260075, -0.018746400251984596, -0.008373885415494442, 0.029960928484797478, -0.04596846550703049, -0.06817545741796494, -0.013111376203596592, 0.07594790309667587, -0.022299516946077347, 0.043044544756412506, -0.024057570844888687, 0.034827958792448044, 0.0035716239362955093, -0.044488001614809036, -0.02933173067867756, 0.0044830357655882835, 0.03377312794327736, -0.029368743300437927, 0.0010739160934463143, 0.015535639598965645, -0.0028267644811421633, -0.041638102382421494, -0.004272532183676958, -0.005875599104911089, -0.009687799029052258, -0.053703900426626205, 0.04289649799466133, 0.037104178220033646, -0.011575392447412014, -0.004018077161163092, -0.06647291779518127, -0.02866552211344242, -0.003606322454288602, -0.00029869555146433413, -0.0336620919406414, -0.038010962307453156, -0.0020703389309346676, -0.016507195308804512, 0.0007361848256550729, 0.028036322444677353, -0.016405412927269936, -0.000813099613878876, -0.09053049236536026, 0.012435914017260075, 0.027999311685562134, 0.006014392711222172, -0.04471006989479065, -0.01775633729994297, 0.0004282363224774599, 0.0063613769598305225, -0.036271415650844574, -0.0159890316426754, -0.01082590688019991, -0.056627821177244186, 0.04911445826292038, -0.010687113739550114, -0.01687731221318245, 0.02903563715517521, 0.010446537286043167, 0.002019447972998023, -0.0013971896842122078, 0.01746024563908577, -0.03549417108297348, 0.0029956302605569363, -0.009090986102819443, -0.03706716373562813, 0.027999311685562134, -0.00266252551227808, -0.03275530785322189, -0.037104178220033646, 0.003296349896118045, 0.0002598044229671359, -0.011862233281135559, -0.023224808275699615, 0.022725151851773262, -0.00585246691480279, 0.006037524901330471, 0.014702877029776573, -0.018163466826081276, 0.01318539958447218, -0.01066860742866993, -0.027980806306004524, -0.023150784894824028, 0.016747770830988884, 0.0019708701875060797, -0.024631250649690628, -0.00024534674594178796, -0.00606065709143877, -0.005995886866003275, 0.02607470564544201, 0.0006430773646570742, 0.023594925180077553, -0.007157127372920513, -0.02368745394051075, -0.002133952919393778, -0.014869429171085358, -0.039787519723176956, 0.0180154200643301, 0.025056885555386543, 0.04589444398880005, -0.050705958157777786, -0.02577861212193966, 0.017080875113606453, 0.00680551677942276, 0.007217271253466606, -0.03462439775466919, -0.0343468077480793, 0.047152839601039886, 0.005315797869116068, -0.0011016748612746596, 0.022891703993082047, -0.031496912240982056, -0.031219324097037315, -0.007402329705655575, -0.03225564956665039, 0.009678546339273453, 0.01860760524868965, -0.025223437696695328, 0.024094583466649055, 0.026500340551137924, 0.004004197660833597, -0.031237831339240074, -0.0017881252570077777, 0.038640160113573074, 0.03693762421607971, -0.03077518567442894, -0.021392732858657837, 0.025612059980630875, 0.02986839972436428, 0.0036178885493427515, -0.03160794824361801, 0.07509663701057434, -6.936069257790223e-05, -0.03371760994195938, 0.005315797869116068, -0.004328049719333649, -0.02872103825211525, 0.047856058925390244, 0.04293351247906685, -0.026185741648077965, 0.009872857481241226, 0.017016105353832245, 0.032681286334991455, 0.040416717529296875, 0.03788142278790474, 0.03614187240600586, -0.036511991173028946, 0.010400272905826569, -0.01082590688019991, -0.07095132768154144, 0.03960246220231056, -0.03588279336690903, -0.039787519723176956, 0.01655345968902111, 0.01685880497097969, -0.0527045875787735, -0.01601679064333439, 0.008410897105932236, 0.011621657758951187, 0.01271350122988224, 0.06880465149879456, 0.010927689261734486, -0.03841809183359146, -0.03290335461497307, 0.013231663964688778, 0.03516106680035591, 0.0034952873829752207, -0.013574021868407726, -0.008540437556803226, 0.008753255009651184, -0.020337900146842003, 0.04885537549853325, -0.010566825047135353, -0.011186770163476467, -0.026463327929377556, 0.07772445678710938, -0.028461957350373268, 0.049299515783786774, 0.0011901557445526123, 0.013823850080370903, 0.046338584274053574, 0.010862918570637703, 0.03292186185717583, -0.05115009844303131, 0.001800847938284278, -0.010400272905826569, -0.012204591184854507, -0.023557914420962334, -0.007337559014558792, 0.014462301507592201, -0.022984232753515244, 0.005570252891629934, -0.018838929012417793, 0.0189499631524086, 0.02805482968688011, 0.007013707421720028, 0.03020150400698185, 0.03588279336690903, 0.0006291980389505625, -0.045746397227048874, -0.03379163518548012, 0.008836531080305576, 0.05766414850950241, -0.04060177877545357, 0.003909355495125055, -0.04000959172844887, -0.0033911922946572304, -0.04149005562067032, 0.04755996912717819, 0.022336529567837715, 0.004885537549853325, -0.01331494003534317, 0.030978748574852943, -0.0047513702884316444, 0.05836736783385277, -0.04374776780605316, 0.011797462590038776, 0.012611718848347664, -0.007328306324779987, 0.005449965130537748, 0.036826588213443756, 0.0054407124407589436, 0.0029401127249002457, 0.018579846248030663, -0.018515076488256454, 0.026777926832437515, 0.008036154322326183, 0.0007020647171884775, 0.029165178537368774, 0.045413292944431305, -0.018718641251325607, -0.036530494689941406, -0.022058941423892975, -0.01436977181583643, 0.048707328736782074, -0.03144139423966408, 0.019301574677228928, 0.008017648011446, -0.02935023605823517, -0.03342151641845703, 0.0014399844221770763, -0.01896847039461136, -0.03897326439619064, 0.004688913002610207, -0.012010280042886734, -0.013388963416218758, 0.018117202445864677, -0.035956814885139465, -0.01139033492654562, -0.03016449324786663, 0.02986839972436428, 0.005056716501712799, -0.03706716373562813, -0.025630565360188484, 0.04648663103580475, -0.00826747715473175, 0.00487165804952383, -0.04504317417740822, 0.03734475374221802, 0.029442766681313515, -0.04267442971467972, 0.014924947172403336, 0.019745714962482452, 0.05610965937376022, -0.030238516628742218, 0.024483205750584602, -0.0013254795921966434, 0.007425461895763874, 0.005884851794689894, -0.03852912411093712, -0.005329677369445562, 0.018200477585196495, -0.022132964804768562, 0.014536324888467789, -0.06480739265680313, 0.016923576593399048, 0.02544550783932209, -0.029979433864355087, -0.002175590954720974, 0.045709386467933655, -0.044488001614809036, 0.002221855567768216, -0.030978748574852943, -0.02572309598326683, -0.006204077508300543, -0.007869601249694824, -0.042193278670310974, 0.04563536122441292, 0.002970184665173292, 0.024150099605321884, 0.025538036599755287, 0.0006424990715458989, -0.019690196961164474, 0.05026181787252426, 0.01079814787954092, -0.03989855572581291, 0.06669498980045319, -0.022854693233966827, -0.007022960111498833, -0.01093694195151329, 0.01778409630060196, -0.02899862639605999, -0.0018320765811949968, -0.04297052323818207, 0.034494854509830475, 0.026759421452879906, -0.04049074277281761, -0.012491431087255478, 0.0108074015006423, 0.07713227719068527, -0.021522272378206253, 0.03403221070766449, 0.02105962671339512, 0.00487165804952383, 0.008531184867024422, -0.02601918764412403, 0.04241534695029259, -0.011196023784577847, 0.023169292137026787, -0.01861685886979103, 0.011630910448729992, -0.04411788284778595, 0.06891568750143051, -0.021411238238215446, -0.023483891040086746, 0.021152157336473465, -0.020800545811653137, -0.00027339463122189045, -0.016211101785302162, 0.0004276580293662846, 0.040120627731084824, -0.0028915349394083023, -0.04445098713040352, -0.06551061570644379, 0.022281011566519737, -0.06695406883955002, -0.047522954642772675, 0.020800545811653137, 0.01924605667591095, 0.03371760994195938, -0.004624142777174711, -0.01837628334760666, 0.0657326877117157, 0.025815624743700027, 0.011297805234789848, 0.013685056939721107, 0.04948457330465317, 0.012408155016601086, 0.05126113072037697, 0.018228236585855484, 0.019634678959846497, 0.021429743617773056, -0.022725151851773262, 0.01048354897648096, 0.03177449852228165, 0.01597977802157402, 0.019023986533284187, -0.04430294409394264, 0.01361103355884552, -0.01688656397163868, -0.018274500966072083, -0.028850579634308815, -0.006810143124312162, -0.011353323236107826, 0.013407469727098942, -0.003606322454288602, -0.024964356794953346, -0.018838929012417793, 0.008781013078987598, -0.00798988901078701, 0.0012306373100727797, -0.030571620911359787, -0.01656271144747734, 0.02218848280608654, -0.1533762663602829, 0.02957230620086193, 0.009414837695658207, 0.029220696538686752, -0.02459423989057541, -0.02105962671339512, -0.041638102382421494, -0.02281768061220646, 0.004351181909441948, -0.011464358307421207, -0.0629568099975586, -0.03930636867880821, 0.057257018983364105, -0.0022241687402129173, 0.04408087208867073, -0.015766961500048637, 0.02011583000421524, 0.03368059918284416, 0.019283069297671318, -0.014702877029776573, -0.013018847443163395, -0.03975050896406174, 0.02629677578806877, -0.010853665880858898, -0.010261479765176773, -0.02992391772568226, -3.81682621082291e-05, 0.02340986765921116, -0.031515419483184814, 0.013962644152343273, -0.016442423686385155, -0.033588070422410965, 0.028943108394742012, 0.05259355157613754, 0.007448594085872173, -0.025797119364142418, 0.018727893009781837, -0.01862611249089241, -0.01151987537741661, 0.002801319118589163, -0.011575392447412014, 0.04826318845152855, 0.028943108394742012, -0.02844345197081566, 0.016470182687044144, 0.012991088442504406, 0.004559372551739216, 0.0010097239864990115, -0.015850238502025604, 0.028017817065119743, 0.0014295749133452773, -0.0159427672624588, -0.02185537852346897, -0.012537695467472076, 0.021244686096906662, 0.016627483069896698, -0.0479670949280262, 0.005329677369445562, 0.024168606847524643, 0.04234132543206215, -0.03473543003201485, -0.015350581146776676, 0.007508737966418266, -0.01564667373895645, -0.05096503719687462, -0.052260447293519974, -0.06088415905833244, 0.035660721361637115, -0.004954934120178223, -0.0007651001797057688, -0.03675256669521332, -0.04704180359840393, -0.005139992572367191, -0.04193419590592384, -0.01212131418287754, -0.032366685569286346, 0.02489033341407776, 0.023243315517902374, -0.024094583466649055, -0.032958872616291046, 0.014739888720214367, -0.01022446807473898, -0.02836942858994007, -0.030553115531802177, 0.03691911697387695, 7.149320299504325e-05, -0.04681973531842232, 0.016645988449454308, 0.010733378119766712, -0.01096470095217228, -0.05710897222161293, -0.027703218162059784, 0.014166207984089851, 0.0028105720411986113, 0.001503598177805543, -0.007235777098685503, -0.012880053371191025, -0.020763535052537918, -0.03310691937804222, -0.009405585005879402, 0.012056544423103333, -0.017858119681477547, 0.03158944100141525, -0.009280670434236526, 0.01181596890091896, 0.030886219814419746, -0.009872857481241226, -0.03632693365216255, 0.02011583000421524, -0.01744173839688301, -9.534836863167584e-05, -0.002537611173465848, 0.011029470711946487, 0.022318024188280106, -0.003835332114249468, -0.02809184044599533, 0.042489372193813324, -0.019060999155044556, -0.03938039392232895, -0.04685674607753754, -0.058478403836488724, 0.05266757309436798, -0.017562026157975197, -0.029072649776935577, -0.004922549240291119, -0.011899244971573353, 0.009109491482377052, 0.0038029467687010765, 0.04271144047379494, -0.03342151641845703, 0.05392597243189812, -0.004413639195263386, -0.021226180717349052, 0.00354849174618721, 0.004175376612693071, -0.02037491276860237, -0.028832074254751205, 0.060773126780986786, 0.026204247027635574, -0.015332074835896492, 0.0064816647209227085, 0.0052510276436805725, -0.01839478872716427, -0.013213158585131168, -0.004728238098323345, -0.03460589051246643, -0.05170527100563049, 0.002366432221606374, -0.024945851415395737, -0.06480739265680313, 0.01138108130544424, -0.015850238502025604, 0.009461102075874805, 0.007494858466088772, -0.016396159306168556, 0.020633993670344353, -0.011510622687637806, -0.03164495900273323, 0.023002739995718002, 0.015054487623274326, 0.006699108052998781, 0.018117202445864677, -0.003566997591406107, 0.013018847443163395, -0.01896847039461136, 0.0022114459425210953, 0.014203219674527645, 0.010002397932112217, 0.0204304289072752, -0.03194105252623558, -0.022077448666095734, 0.03934338316321373, -0.04256339371204376, 0.03319944813847542, 0.014813912101089954, -0.03177449852228165, 0.012102808803319931, -0.014249484054744244, 0.01891295239329338, -0.008656099438667297, 0.00826285034418106, 0.0109554473310709, 0.010973953641951084, -0.006130054127424955, -0.016729265451431274, 0.04330362752079964, 0.02964632958173752, 0.07483755052089691, 0.0109554473310709, 0.03590129688382149, 0.024982862174510956, 0.026685398072004318, 0.016497941687703133, -0.026759421452879906, 0.051335155963897705, -0.06343796104192734, 0.014138448983430862, -0.035013020038604736, 0.009558257646858692, 0.0485592819750309, -0.028295405209064484, -0.03875119611620903, -0.0037219838704913855, 0.012593213468790054, -0.03758532926440239, -0.032126110047101974, 0.007878854870796204, 0.014388278126716614, -0.012750512920320034, 0.039824534207582474, 0.02807333506643772, -0.0053111715242266655, 0.017913637682795525, -0.004448337480425835, 0.03351404517889023, -0.019135022535920143, 0.040971893817186356, 0.02487182803452015, -0.0068193962797522545, 0.02459423989057541, 0.014471554197371006, 0.019893759861588478, -0.03915832191705704, -0.023779984563589096, -0.021189168095588684, -0.025945164263248444, 0.019690196961164474, -0.015433857217431068, 0.0037960070185363293, -0.003483721287921071, -0.03693762421607971, -0.0031020387541502714, 0.002458961447700858, 0.026111718267202377, 0.008503425866365433, -0.013527757488191128, 0.04911445826292038, 0.0034999139606952667, -0.015489374287426472, -0.021170662716031075, 0.020837558433413506, -0.007453220430761576, 0.015035982243716717, 0.02548251859843731], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:40:00,026 rag.components.base DEBUG: 🔍 执行向量检索查询体: {'knn': {'field': 'content_vector', 'query_vector': [-0.005070595536381006, -0.012001026421785355, -0.02363193780183792, 0.027962299063801765, -0.03734475374221802, 0.04371075704693794, 0.01839478872716427, 0.005417579784989357, 0.029128165915608406, -0.023298831656575203, 0.011001712642610073, 0.04200822114944458, 0.041638102382421494, -0.02986839972436428, 0.00829060934484005, -0.02105962671339512, -0.04844824597239494, -0.02313227951526642, 0.008970698341727257, -0.024427687749266624, 0.004427518229931593, -0.005348183214664459, -0.04030568525195122, 0.05144619196653366, 0.08853185921907425, 0.0024265761021524668, 0.0018320765811949968, -0.014018161222338676, 0.04626455903053284, 0.046338584274053574, 0.013148387894034386, -0.036549001932144165, 0.05244550481438637, -0.02690746821463108, 0.009354693815112114, -0.0621795691549778, -0.00858207605779171, -0.03133035823702812, -0.04415489733219147, -0.008059286512434483, -0.017543520778417587, -0.018727893009781837, 0.0007292451336979866, -0.0034328303299844265, -0.027888275682926178, -0.047745026648044586, 0.0219108946621418, -0.019116515293717384, -0.057590123265981674, 0.006620458327233791, -0.02133721485733986, -0.005889478605240583, 0.02337285503745079, -0.04892939701676369, 0.001662054331973195, 0.06880465149879456, -0.029128165915608406, 0.01745099201798439, -0.0355311818420887, -0.0373077392578125, 0.0017800289206206799, 0.03569773584604263, -0.03677107021212578, -0.02189238928258419, 0.02601918764412403, 0.028795061632990837, 0.026851950213313103, 0.03430979698896408, -0.009040094912052155, -0.028017817065119743, -0.019893759861588478, -0.0042771585285663605, 0.01199177373200655, 0.006416894495487213, -0.06303083896636963, 0.0028198249638080597, 0.041527070105075836, 0.06976695358753204, -0.009424090385437012, -0.04696778208017349, 0.05174228176474571, -0.024335158988833427, -0.00784184318035841, 0.028776556253433228, 0.016692252829670906, 0.0811295285820961, -0.013879368081688881, 0.06654693931341171, 0.011788209900259972, 0.023928029462695122, -0.06058806553483009, 0.026222752407193184, -0.02365044318139553, -0.05229745805263519, -0.029461272060871124, 0.04755996912717819, -0.055813565850257874, -0.000763365242164582, 0.061402324587106705, 0.028258392587304115, 0.012176832184195518, 0.033032894134521484, 0.0010987833375111222, 0.027407124638557434, 0.0016019103350117803, 0.03423577547073364, 0.05659081041812897, -0.003398131811991334, -0.07802055031061172, -0.00885041058063507, 0.014989716932177544, 0.0342542789876461, 0.014166207984089851, -0.019042491912841797, -0.029997941106557846, -0.0325702503323555, -0.03427278622984886, -0.016775529831647873, 0.03867717087268829, -0.009104865603148937, 0.06062508001923561, -0.004503855016082525, 0.03767785802483559, -0.05029882863163948, -0.052260447293519974, 0.006925804540514946, -0.009419464506208897, 0.08653323352336884, 0.0006685229018330574, 0.02540849708020687, -0.008161067962646484, 0.016729265451431274, -0.008068539202213287, 0.005607264582067728, -0.012250855565071106, -0.003981065470725298, -0.0049132960848510265, -0.0031228577718138695, -0.030127480626106262, -0.07302398234605789, 0.033291976898908615, 0.042785465717315674, 0.030238516628742218, -0.05747908726334572, -0.003171435557305813, -0.029054144397377968, 0.028036322444677353, -0.02988690510392189, 0.0343468077480793, -0.016146332025527954, -0.011122000403702259, 0.015822479501366615, -0.0108074015006423, -0.016960587352514267, -0.004177689552307129, -0.0180616844445467, 0.030886219814419746, -0.0018043178133666515, -0.005838587414473295, 0.04149005562067032, -0.04330362752079964, -0.005047463346272707, -0.03945441544055939, -0.054333098232746124, 0.0032894101459532976, 0.006287353578954935, -0.024483205750584602, 0.008674604818224907, -0.04256339371204376, -0.007050719112157822, 0.02128169685602188, 0.017599038779735565, -0.0015359834069386125, 0.003236206015571952, -0.02039341814815998, 0.02157779037952423, 0.022040436044335365, -0.011177517473697662, 0.028906097635626793, -0.03793694078922272, -0.012519190087914467, 0.003502227133139968, 0.021984918043017387, 0.015100752003490925, -0.013944137841463089, -0.01978272572159767, 0.06532555818557739, -0.018441053107380867, 0.011603151448071003, 0.03440232574939728, 0.020948592573404312, 0.057553112506866455, 0.03523508831858635, -0.04404386132955551, 0.040934883058071136, -0.0009495801059529185, -0.03640095517039299, -0.006097668781876564, -0.0032870969735085964, 0.027684712782502174, -0.07054419815540314, -0.011168264783918858, 0.032718297094106674, 0.0045107947662472725, -0.0225030817091465, 0.01632213592529297, 0.010872171260416508, -0.03430979698896408, -0.02342837303876877, -0.022725151851773262, -0.01507299393415451, -0.00030274371965788305, -0.00887354277074337, 0.0005456326762214303, -0.03142289072275162, -0.015526385977864265, 0.029165178537368774, -0.019449621438980103, -0.009104865603148937, -0.0304975975304842, -0.027980806306004524, 0.05189032852649689, 0.0003091050893999636, 0.02576010674238205, -0.009678546339273453, -0.01862611249089241, 0.018413294106721878, -0.0048809112049639225, -0.019708702340722084, -0.059329669922590256, -0.02868402749300003, 0.013009593822062016, -0.011593898758292198, -0.004867031704634428, 0.05573954060673714, -0.01406442653387785, -0.051964353770017624, 0.024335158988833427, 0.00280825886875391, -0.017710072919726372, -0.015295063145458698, 0.03643796592950821, -0.012232349254190922, -0.04741192236542702, -0.024501711130142212, 0.07853871583938599, 0.01540609821677208, 0.03529060631990433, -0.050483886152505875, 0.005750684998929501, -0.009576763957738876, -0.034198760986328125, -0.009734063409268856, -0.02128169685602188, 0.004862405359745026, 0.0266483873128891, 0.04171212762594223, 0.004409012384712696, 0.014758394099771976, -0.0079945158213377, 0.02072652243077755, -0.0003646225668489933, 0.048041120171546936, 0.020596981048583984, -0.01111274678260088, -0.015461616218090057, -0.006282727234065533, -0.029794376343488693, -0.016109319403767586, 0.03412473946809769, -0.04389581456780434, 0.04108292981982231, 0.024205617606639862, 0.017090128734707832, -0.010761136189103127, 0.04174913838505745, -0.04878135025501251, -0.017256680876016617, 0.024631250649690628, 0.03371760994195938, -0.008193453773856163, 0.020522959530353546, -0.022632623091340065, -0.010446537286043167, 0.02422412298619747, 0.023298831656575203, -0.0180154200643301, 0.011603151448071003, -0.010104179382324219, -0.023150784894824028, -0.011908497661352158, 0.0035646844189614058, 0.07091432064771652, -0.018431801348924637, 0.023761477321386337, 0.0069998279213905334, -0.02724057249724865, -0.14301300048828125, 0.05063193291425705, 0.008646845817565918, 0.012380396015942097, -0.01802467182278633, -0.03406922146677971, -0.008989203721284866, 0.022854693233966827, -0.06280876696109772, 0.05918162316083908, -0.002389564411714673, -0.05115009844303131, 0.004596383776515722, -0.06014392897486687, -0.003913981840014458, -0.028202876448631287, 0.011501369997859001, -0.06739821285009384, 0.01170493382960558, -0.01199177373200655, 0.011630910448729992, -0.04859629273414612, 0.03184852376580238, -0.02925770729780197, 0.0070599718019366264, -0.03371760994195938, 0.08905002474784851, -0.0062410891987383366, -0.02007881924510002, -0.022854693233966827, 0.022891703993082047, 0.049299515783786774, 0.005727552343159914, 0.0062318360432982445, 0.007911239750683308, -0.05562850832939148, 0.04063878953456879, -0.03342151641845703, -0.0026509591843932867, 0.010150444693863392, -0.0018725580302998424, 0.01066860742866993, 0.01833927072584629, 0.010983206331729889, 0.05892254412174225, -0.009104865603148937, 0.009669292718172073, -0.0331624373793602, 0.009257538244128227, -0.020948592573404312, 0.011371828615665436, 0.008554317057132721, -0.0033079159911721945, -0.03571623936295509, -0.02218848280608654, 0.013509251177310944, -0.035309113562107086, 0.04104591906070709, 0.03938039392232895, -0.006014392711222172, -0.007138621527701616, 0.010400272905826569, 0.010566825047135353, 0.025519531220197678, -0.03886222839355469, 0.026981491595506668, 0.08964221179485321, -0.012657983228564262, -0.026278270408511162, -0.03762234002351761, 0.023021245375275612, 0.03201507404446602, -0.006703734863549471, -0.01509149931371212, -0.0042332070879638195, -0.002298191888257861, -0.04844824597239494, -0.013139135204255581, 0.0003860199067275971, -0.1575215756893158, 0.05140917748212814, 0.010242973454296589, 0.017062369734048843, 0.044858116656541824, -0.006847154814749956, 0.013231663964688778, -0.05407401919364929, -0.021707331761717796, 0.05185331776738167, 0.2173323929309845, 0.025223437696695328, 0.005227895453572273, -0.008855036459863186, 0.03736325725913048, 0.008845783770084381, 0.019727207720279694, 0.018478065729141235, -0.00798988901078701, -0.01477690041065216, 0.015350581146776676, 0.032089099287986755, 0.009724810719490051, 0.007527243811637163, -0.006995201576501131, 0.05381493642926216, -0.03986154496669769, 0.01625736616551876, 0.04004660248756409, -0.014564082957804203, -0.012435914017260075, -0.018746400251984596, -0.008373885415494442, 0.029960928484797478, -0.04596846550703049, -0.06817545741796494, -0.013111376203596592, 0.07594790309667587, -0.022299516946077347, 0.043044544756412506, -0.024057570844888687, 0.034827958792448044, 0.0035716239362955093, -0.044488001614809036, -0.02933173067867756, 0.0044830357655882835, 0.03377312794327736, -0.029368743300437927, 0.0010739160934463143, 0.015535639598965645, -0.0028267644811421633, -0.041638102382421494, -0.004272532183676958, -0.005875599104911089, -0.009687799029052258, -0.053703900426626205, 0.04289649799466133, 0.037104178220033646, -0.011575392447412014, -0.004018077161163092, -0.06647291779518127, -0.02866552211344242, -0.003606322454288602, -0.00029869555146433413, -0.0336620919406414, -0.038010962307453156, -0.0020703389309346676, -0.016507195308804512, 0.0007361848256550729, 0.028036322444677353, -0.016405412927269936, -0.000813099613878876, -0.09053049236536026, 0.012435914017260075, 0.027999311685562134, 0.006014392711222172, -0.04471006989479065, -0.01775633729994297, 0.0004282363224774599, 0.0063613769598305225, -0.036271415650844574, -0.0159890316426754, -0.01082590688019991, -0.056627821177244186, 0.04911445826292038, -0.010687113739550114, -0.01687731221318245, 0.02903563715517521, 0.010446537286043167, 0.002019447972998023, -0.0013971896842122078, 0.01746024563908577, -0.03549417108297348, 0.0029956302605569363, -0.009090986102819443, -0.03706716373562813, 0.027999311685562134, -0.00266252551227808, -0.03275530785322189, -0.037104178220033646, 0.003296349896118045, 0.0002598044229671359, -0.011862233281135559, -0.023224808275699615, 0.022725151851773262, -0.00585246691480279, 0.006037524901330471, 0.014702877029776573, -0.018163466826081276, 0.01318539958447218, -0.01066860742866993, -0.027980806306004524, -0.023150784894824028, 0.016747770830988884, 0.0019708701875060797, -0.024631250649690628, -0.00024534674594178796, -0.00606065709143877, -0.005995886866003275, 0.02607470564544201, 0.0006430773646570742, 0.023594925180077553, -0.007157127372920513, -0.02368745394051075, -0.002133952919393778, -0.014869429171085358, -0.039787519723176956, 0.0180154200643301, 0.025056885555386543, 0.04589444398880005, -0.050705958157777786, -0.02577861212193966, 0.017080875113606453, 0.00680551677942276, 0.007217271253466606, -0.03462439775466919, -0.0343468077480793, 0.047152839601039886, 0.005315797869116068, -0.0011016748612746596, 0.022891703993082047, -0.031496912240982056, -0.031219324097037315, -0.007402329705655575, -0.03225564956665039, 0.009678546339273453, 0.01860760524868965, -0.025223437696695328, 0.024094583466649055, 0.026500340551137924, 0.004004197660833597, -0.031237831339240074, -0.0017881252570077777, 0.038640160113573074, 0.03693762421607971, -0.03077518567442894, -0.021392732858657837, 0.025612059980630875, 0.02986839972436428, 0.0036178885493427515, -0.03160794824361801, 0.07509663701057434, -6.936069257790223e-05, -0.03371760994195938, 0.005315797869116068, -0.004328049719333649, -0.02872103825211525, 0.047856058925390244, 0.04293351247906685, -0.026185741648077965, 0.009872857481241226, 0.017016105353832245, 0.032681286334991455, 0.040416717529296875, 0.03788142278790474, 0.03614187240600586, -0.036511991173028946, 0.010400272905826569, -0.01082590688019991, -0.07095132768154144, 0.03960246220231056, -0.03588279336690903, -0.039787519723176956, 0.01655345968902111, 0.01685880497097969, -0.0527045875787735, -0.01601679064333439, 0.008410897105932236, 0.011621657758951187, 0.01271350122988224, 0.06880465149879456, 0.010927689261734486, -0.03841809183359146, -0.03290335461497307, 0.013231663964688778, 0.03516106680035591, 0.0034952873829752207, -0.013574021868407726, -0.008540437556803226, 0.008753255009651184, -0.020337900146842003, 0.04885537549853325, -0.010566825047135353, -0.011186770163476467, -0.026463327929377556, 0.07772445678710938, -0.028461957350373268, 0.049299515783786774, 0.0011901557445526123, 0.013823850080370903, 0.046338584274053574, 0.010862918570637703, 0.03292186185717583, -0.05115009844303131, 0.001800847938284278, -0.010400272905826569, -0.012204591184854507, -0.023557914420962334, -0.007337559014558792, 0.014462301507592201, -0.022984232753515244, 0.005570252891629934, -0.018838929012417793, 0.0189499631524086, 0.02805482968688011, 0.007013707421720028, 0.03020150400698185, 0.03588279336690903, 0.0006291980389505625, -0.045746397227048874, -0.03379163518548012, 0.008836531080305576, 0.05766414850950241, -0.04060177877545357, 0.003909355495125055, -0.04000959172844887, -0.0033911922946572304, -0.04149005562067032, 0.04755996912717819, 0.022336529567837715, 0.004885537549853325, -0.01331494003534317, 0.030978748574852943, -0.0047513702884316444, 0.05836736783385277, -0.04374776780605316, 0.011797462590038776, 0.012611718848347664, -0.007328306324779987, 0.005449965130537748, 0.036826588213443756, 0.0054407124407589436, 0.0029401127249002457, 0.018579846248030663, -0.018515076488256454, 0.026777926832437515, 0.008036154322326183, 0.0007020647171884775, 0.029165178537368774, 0.045413292944431305, -0.018718641251325607, -0.036530494689941406, -0.022058941423892975, -0.01436977181583643, 0.048707328736782074, -0.03144139423966408, 0.019301574677228928, 0.008017648011446, -0.02935023605823517, -0.03342151641845703, 0.0014399844221770763, -0.01896847039461136, -0.03897326439619064, 0.004688913002610207, -0.012010280042886734, -0.013388963416218758, 0.018117202445864677, -0.035956814885139465, -0.01139033492654562, -0.03016449324786663, 0.02986839972436428, 0.005056716501712799, -0.03706716373562813, -0.025630565360188484, 0.04648663103580475, -0.00826747715473175, 0.00487165804952383, -0.04504317417740822, 0.03734475374221802, 0.029442766681313515, -0.04267442971467972, 0.014924947172403336, 0.019745714962482452, 0.05610965937376022, -0.030238516628742218, 0.024483205750584602, -0.0013254795921966434, 0.007425461895763874, 0.005884851794689894, -0.03852912411093712, -0.005329677369445562, 0.018200477585196495, -0.022132964804768562, 0.014536324888467789, -0.06480739265680313, 0.016923576593399048, 0.02544550783932209, -0.029979433864355087, -0.002175590954720974, 0.045709386467933655, -0.044488001614809036, 0.002221855567768216, -0.030978748574852943, -0.02572309598326683, -0.006204077508300543, -0.007869601249694824, -0.042193278670310974, 0.04563536122441292, 0.002970184665173292, 0.024150099605321884, 0.025538036599755287, 0.0006424990715458989, -0.019690196961164474, 0.05026181787252426, 0.01079814787954092, -0.03989855572581291, 0.06669498980045319, -0.022854693233966827, -0.007022960111498833, -0.01093694195151329, 0.01778409630060196, -0.02899862639605999, -0.0018320765811949968, -0.04297052323818207, 0.034494854509830475, 0.026759421452879906, -0.04049074277281761, -0.012491431087255478, 0.0108074015006423, 0.07713227719068527, -0.021522272378206253, 0.03403221070766449, 0.02105962671339512, 0.00487165804952383, 0.008531184867024422, -0.02601918764412403, 0.04241534695029259, -0.011196023784577847, 0.023169292137026787, -0.01861685886979103, 0.011630910448729992, -0.04411788284778595, 0.06891568750143051, -0.021411238238215446, -0.023483891040086746, 0.021152157336473465, -0.020800545811653137, -0.00027339463122189045, -0.016211101785302162, 0.0004276580293662846, 0.040120627731084824, -0.0028915349394083023, -0.04445098713040352, -0.06551061570644379, 0.022281011566519737, -0.06695406883955002, -0.047522954642772675, 0.020800545811653137, 0.01924605667591095, 0.03371760994195938, -0.004624142777174711, -0.01837628334760666, 0.0657326877117157, 0.025815624743700027, 0.011297805234789848, 0.013685056939721107, 0.04948457330465317, 0.012408155016601086, 0.05126113072037697, 0.018228236585855484, 0.019634678959846497, 0.021429743617773056, -0.022725151851773262, 0.01048354897648096, 0.03177449852228165, 0.01597977802157402, 0.019023986533284187, -0.04430294409394264, 0.01361103355884552, -0.01688656397163868, -0.018274500966072083, -0.028850579634308815, -0.006810143124312162, -0.011353323236107826, 0.013407469727098942, -0.003606322454288602, -0.024964356794953346, -0.018838929012417793, 0.008781013078987598, -0.00798988901078701, 0.0012306373100727797, -0.030571620911359787, -0.01656271144747734, 0.02218848280608654, -0.1533762663602829, 0.02957230620086193, 0.009414837695658207, 0.029220696538686752, -0.02459423989057541, -0.02105962671339512, -0.041638102382421494, -0.02281768061220646, 0.004351181909441948, -0.011464358307421207, -0.0629568099975586, -0.03930636867880821, 0.057257018983364105, -0.0022241687402129173, 0.04408087208867073, -0.015766961500048637, 0.02011583000421524, 0.03368059918284416, 0.019283069297671318, -0.014702877029776573, -0.013018847443163395, -0.03975050896406174, 0.02629677578806877, -0.010853665880858898, -0.010261479765176773, -0.02992391772568226, -3.81682621082291e-05, 0.02340986765921116, -0.031515419483184814, 0.013962644152343273, -0.016442423686385155, -0.033588070422410965, 0.028943108394742012, 0.05259355157613754, 0.007448594085872173, -0.025797119364142418, 0.018727893009781837, -0.01862611249089241, -0.01151987537741661, 0.002801319118589163, -0.011575392447412014, 0.04826318845152855, 0.028943108394742012, -0.02844345197081566, 0.016470182687044144, 0.012991088442504406, 0.004559372551739216, 0.0010097239864990115, -0.015850238502025604, 0.028017817065119743, 0.0014295749133452773, -0.0159427672624588, -0.02185537852346897, -0.012537695467472076, 0.021244686096906662, 0.016627483069896698, -0.0479670949280262, 0.005329677369445562, 0.024168606847524643, 0.04234132543206215, -0.03473543003201485, -0.015350581146776676, 0.007508737966418266, -0.01564667373895645, -0.05096503719687462, -0.052260447293519974, -0.06088415905833244, 0.035660721361637115, -0.004954934120178223, -0.0007651001797057688, -0.03675256669521332, -0.04704180359840393, -0.005139992572367191, -0.04193419590592384, -0.01212131418287754, -0.032366685569286346, 0.02489033341407776, 0.023243315517902374, -0.024094583466649055, -0.032958872616291046, 0.014739888720214367, -0.01022446807473898, -0.02836942858994007, -0.030553115531802177, 0.03691911697387695, 7.149320299504325e-05, -0.04681973531842232, 0.016645988449454308, 0.010733378119766712, -0.01096470095217228, -0.05710897222161293, -0.027703218162059784, 0.014166207984089851, 0.0028105720411986113, 0.001503598177805543, -0.007235777098685503, -0.012880053371191025, -0.020763535052537918, -0.03310691937804222, -0.009405585005879402, 0.012056544423103333, -0.017858119681477547, 0.03158944100141525, -0.009280670434236526, 0.01181596890091896, 0.030886219814419746, -0.009872857481241226, -0.03632693365216255, 0.02011583000421524, -0.01744173839688301, -9.534836863167584e-05, -0.002537611173465848, 0.011029470711946487, 0.022318024188280106, -0.003835332114249468, -0.02809184044599533, 0.042489372193813324, -0.019060999155044556, -0.03938039392232895, -0.04685674607753754, -0.058478403836488724, 0.05266757309436798, -0.017562026157975197, -0.029072649776935577, -0.004922549240291119, -0.011899244971573353, 0.009109491482377052, 0.0038029467687010765, 0.04271144047379494, -0.03342151641845703, 0.05392597243189812, -0.004413639195263386, -0.021226180717349052, 0.00354849174618721, 0.004175376612693071, -0.02037491276860237, -0.028832074254751205, 0.060773126780986786, 0.026204247027635574, -0.015332074835896492, 0.0064816647209227085, 0.0052510276436805725, -0.01839478872716427, -0.013213158585131168, -0.004728238098323345, -0.03460589051246643, -0.05170527100563049, 0.002366432221606374, -0.024945851415395737, -0.06480739265680313, 0.01138108130544424, -0.015850238502025604, 0.009461102075874805, 0.007494858466088772, -0.016396159306168556, 0.020633993670344353, -0.011510622687637806, -0.03164495900273323, 0.023002739995718002, 0.015054487623274326, 0.006699108052998781, 0.018117202445864677, -0.003566997591406107, 0.013018847443163395, -0.01896847039461136, 0.0022114459425210953, 0.014203219674527645, 0.010002397932112217, 0.0204304289072752, -0.03194105252623558, -0.022077448666095734, 0.03934338316321373, -0.04256339371204376, 0.03319944813847542, 0.014813912101089954, -0.03177449852228165, 0.012102808803319931, -0.014249484054744244, 0.01891295239329338, -0.008656099438667297, 0.00826285034418106, 0.0109554473310709, 0.010973953641951084, -0.006130054127424955, -0.016729265451431274, 0.04330362752079964, 0.02964632958173752, 0.07483755052089691, 0.0109554473310709, 0.03590129688382149, 0.024982862174510956, 0.026685398072004318, 0.016497941687703133, -0.026759421452879906, 0.051335155963897705, -0.06343796104192734, 0.014138448983430862, -0.035013020038604736, 0.009558257646858692, 0.0485592819750309, -0.028295405209064484, -0.03875119611620903, -0.0037219838704913855, 0.012593213468790054, -0.03758532926440239, -0.032126110047101974, 0.007878854870796204, 0.014388278126716614, -0.012750512920320034, 0.039824534207582474, 0.02807333506643772, -0.0053111715242266655, 0.017913637682795525, -0.004448337480425835, 0.03351404517889023, -0.019135022535920143, 0.040971893817186356, 0.02487182803452015, -0.0068193962797522545, 0.02459423989057541, 0.014471554197371006, 0.019893759861588478, -0.03915832191705704, -0.023779984563589096, -0.021189168095588684, -0.025945164263248444, 0.019690196961164474, -0.015433857217431068, 0.0037960070185363293, -0.003483721287921071, -0.03693762421607971, -0.0031020387541502714, 0.002458961447700858, 0.026111718267202377, 0.008503425866365433, -0.013527757488191128, 0.04911445826292038, 0.0034999139606952667, -0.015489374287426472, -0.021170662716031075, 0.020837558433413506, -0.007453220430761576, 0.015035982243716717, 0.02548251859843731], 'k': 40, 'num_candidates': 80, 'filter': {'bool': {'filter': [{'term': {'metadata.chunk_level': 2}}]}}}, 'size': 40}
2025-08-01 00:40:00,168 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,168 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,168 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,168 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.139s]
2025-08-01 00:40:00,168 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.139s]
2025-08-01 00:40:00,168 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.139s]
2025-08-01 00:40:00,256 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,256 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,256 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,256 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.076s]
2025-08-01 00:40:00,256 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.076s]
2025-08-01 00:40:00,256 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.076s]
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=4816, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=4816, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 文本检索原始结果: 总命中=4816, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📊 向量检索原始结果: 总命中=40, 返回=40
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:40:00,270 rag.components.base DEBUG: 📝 文本检索前3个结果:
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774880415369_738bb7e0, Score=25.8971, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774880415369_738bb7e0, Score=25.8971, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774880415369_738bb7e0, Score=25.8971, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753772134858399_7b3c974d, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753772134858399_7b3c974d, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753772134858399_7b3c974d, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774326357766_f9f18f12, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774326357766_f9f18f12, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774326357766_f9f18f12, Score=21.8799, chunk_level=0
2025-08-01 00:40:00,271 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:40:00,271 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:40:00,271 rag.components.base DEBUG: 🎯 向量检索前3个结果:
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774243135649_843a1228, Score=0.8503, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774243135649_843a1228, Score=0.8503, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   1. ID=doc_1753774243135649_843a1228, Score=0.8503, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753773906544515_fd9a8b20, Score=0.8435, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753773906544515_fd9a8b20, Score=0.8435, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   2. ID=doc_1753773906544515_fd9a8b20, Score=0.8435, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774243136175_d0e66cfb, Score=0.8306, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774243136175_d0e66cfb, Score=0.8306, chunk_level=2
2025-08-01 00:40:00,271 rag.components.base DEBUG:   3. ID=doc_1753774243136175_d0e66cfb, Score=0.8306, chunk_level=2
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔄 开始RRF合并混合检索结果 - 文本检索: 40个, 向量检索: 40个, RRF-K: 60
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['系统<em>支持</em>物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。\n* 亲和组、反亲和组管理\nTECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。\n* <em>块</em>存储管理\n存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。', '* <em>支持</em>网络配置：<em>支持</em>IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；<em>支持</em>虚机配置SR-IOV<em>网卡</em>；<em>支持</em>NFV(Network Functions']}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['系统<em>支持</em>物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。\n* 亲和组、反亲和组管理\nTECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。\n* <em>块</em>存储管理\n存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。', '* <em>支持</em>网络配置：<em>支持</em>IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；<em>支持</em>虚机配置SR-IOV<em>网卡</em>；<em>支持</em>NFV(Network Functions']}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753774880415369_738bb7e0 的高亮信息: {'content': ['系统<em>支持</em>物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。\n* 亲和组、反亲和组管理\nTECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。\n* <em>块</em>存储管理\n存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。', '* <em>支持</em>网络配置：<em>支持</em>IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；<em>支持</em>虚机配置SR-IOV<em>网卡</em>；<em>支持</em>NFV(Network Functions']}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🎯 文档 doc_1753774880415369_738bb7e0 提取的匹配词: {}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 1, 分数: 25.8971, 命中词: 无
2025-08-01 00:40:00,272 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 1, 分数: 25.8971, 命中词: 无
2025-08-01 00:40:00,272 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774880415369_738bb7e0, 排名: 1, 分数: 25.8971, 命中词: 无
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753772134858399_7b3c974d 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753772134858399_7b3c974d 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,272 rag.components.base DEBUG: 🔍 文档 doc_1753772134858399_7b3c974d 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772134858399_7b3c974d 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772134858399_7b3c974d 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772134858399_7b3c974d 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772134858399_7b3c974d, 排名: 2, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772134858399_7b3c974d, 排名: 2, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772134858399_7b3c974d, 排名: 2, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753774326357766_f9f18f12 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753774326357766_f9f18f12 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753774326357766_f9f18f12 的高亮信息: {'content': ['接收数据<em>块</em>数目\n* C559010010 INIT发送数目\n* C559010011 INIT接收数目\n* C559010012 INITACK信息<em>块</em>发送数目\n* C559010013 INITACK信息<em>块</em>接收数目\n* C559010014 COOKIE信息<em>块</em>发送数目\n* C559010015 COOKIE信息<em>块</em>接收数目\n* C559010016 COOKIEACK信息<em>块</em>发送数目\n* C559010017', 'COOKIEACK信息<em>块</em>接收数目\n* C559010018 HEARTBEAT信息<em>块</em>发送数目\n* C559010019 HEARTBEAT信息<em>块</em>接收数目\n* C559010020 HBACK信息<em>块</em>发送数目\n* C559010021 HBACK信息<em>块</em>接收数目\n* C559010022 ABORT信息<em>块</em>发送数目\n* C559010023 ABORT信息<em>块</em>接收数目\n* C559010024 SHUTDOWN']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753774326357766_f9f18f12 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753774326357766_f9f18f12 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753774326357766_f9f18f12 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774326357766_f9f18f12, 排名: 3, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774326357766_f9f18f12, 排名: 3, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774326357766_f9f18f12, 排名: 3, 分数: 21.8799, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753772153471149_bb3f4b9c 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753772153471149_bb3f4b9c 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🔍 文档 doc_1753772153471149_bb3f4b9c 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772153471149_bb3f4b9c 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772153471149_bb3f4b9c 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 🎯 文档 doc_1753772153471149_bb3f4b9c 提取的匹配词: {}
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772153471149_bb3f4b9c, 排名: 4, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772153471149_bb3f4b9c, 排名: 4, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,273 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772153471149_bb3f4b9c, 排名: 4, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753774355021454_737f4550 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753774355021454_737f4550 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753774355021454_737f4550 的高亮信息: {'content': ['* C559020049 接收无序<em>块</em>数目\n* C559020050 ERROR信息<em>块</em>发送数目\n* C559020051 ERROR信息<em>块</em>接收数目\n* C559020052 HEARTBEAT信息<em>块</em>发送数目\n* C559020053 HEARTBEAT信息<em>块</em>接收数目\n* C559020054 HBACK信息<em>块</em>发送数目\n* C559020055 HBACK信息<em>块</em>接收数目\n* C559020056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559020057 SHUTDOWN信息<em>块</em>接收数目\n* C559020058 SHUTACK信息<em>块</em>发送数目\n* C559020059 SHUTACK信息<em>块</em>接收数目\n* C559020060 ShutDownComplete信息<em>块</em>发送数目\n* C559020061 ShutDownComplete信息<em>块</em>接收数目\n* C559020062 ABORT信息<em>块</em>发送数目\n* C559020063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753774355021454_737f4550 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753774355021454_737f4550 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753774355021454_737f4550 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774355021454_737f4550, 排名: 5, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774355021454_737f4550, 排名: 5, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774355021454_737f4550, 排名: 5, 分数: 19.6150, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753773397041292_ef323a87 的高亮信息: {'content': ['<em>网卡</em>亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>。\n* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>由VIM云平台的配置策略决定。\n* <em>网卡</em>亲和设置为此选项，表示某个虚机实例化后成后生成的两个vNIC，ZXUN uMAC会将两者关联到同一个物理<em>网卡</em>。', '安全组名称| 安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753773397041292_ef323a87 的高亮信息: {'content': ['<em>网卡</em>亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>。\n* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>由VIM云平台的配置策略决定。\n* <em>网卡</em>亲和设置为此选项，表示某个虚机实例化后成后生成的两个vNIC，ZXUN uMAC会将两者关联到同一个物理<em>网卡</em>。', '安全组名称| 安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753773397041292_ef323a87 的高亮信息: {'content': ['<em>网卡</em>亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>。\n* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联哪个物理<em>网卡</em>由VIM云平台的配置策略决定。\n* <em>网卡</em>亲和设置为此选项，表示某个虚机实例化后成后生成的两个vNIC，ZXUN uMAC会将两者关联到同一个物理<em>网卡</em>。', '安全组名称| 安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753773397041292_ef323a87 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753773397041292_ef323a87 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753773397041292_ef323a87 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041292_ef323a87, 排名: 6, 分数: 19.2493, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041292_ef323a87, 排名: 6, 分数: 19.2493, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041292_ef323a87, 排名: 6, 分数: 19.2493, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753772108947991_2af0fb31 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753772108947991_2af0fb31 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🔍 文档 doc_1753772108947991_2af0fb31 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753772108947991_2af0fb31 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753772108947991_2af0fb31 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 🎯 文档 doc_1753772108947991_2af0fb31 提取的匹配词: {}
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772108947991_2af0fb31, 排名: 7, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772108947991_2af0fb31, 排名: 7, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,274 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772108947991_2af0fb31, 排名: 7, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774305801476_353e835e 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774305801476_353e835e 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774305801476_353e835e 的高亮信息: {'content': ['* C559000049 接收无序<em>块</em>数目\n* C559000050 ERROR信息<em>块</em>发送数目\n* C559000051 ERROR信息<em>块</em>接收数目\n* C559000052 HEARTBEAT信息<em>块</em>发送数目\n* C559000053 HEARTBEAT信息<em>块</em>接收数目\n* C559000054 HBACK信息<em>块</em>发送数目\n* C559000055 HBACK信息<em>块</em>接收数目\n* C559000056 SHUTDOWN', '信息<em>块</em>发送数目\n* C559000057 SHUTDOWN信息<em>块</em>接收数目\n* C559000058 SHUTACK信息<em>块</em>发送数目\n* C559000059 SHUTACK信息<em>块</em>接收数目\n* C559000060 ShutDownComplete信息<em>块</em>发送数目\n* C559000061 ShutDownComplete信息<em>块</em>接收数目\n* C559000062 ABORT信息<em>块</em>发送数目\n* C559000063']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774305801476_353e835e 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774305801476_353e835e 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774305801476_353e835e 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774305801476_353e835e, 排名: 8, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774305801476_353e835e, 排名: 8, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774305801476_353e835e, 排名: 8, 分数: 19.1380, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774882679977_b966d221 的高亮信息: {'content': ['<em>虚拟机</em>CPU压力处于重要级别\n* 3305132045 <em>虚拟机</em>CPU压力处于警告级别\n* 3305132046 <em>虚拟机</em>内存压力处于严重级别\n* 3305132047 <em>虚拟机</em>内存压力处于重要级别\n* 3305132048 <em>虚拟机</em>内存压力处于警告级别\n* 3305132049 <em>虚拟机</em>可回收量非常多（严重）\n* 3305132050 <em>虚拟机</em>可回收容量比较多（重要）\n* 3305132051 <em>虚拟机</em>可回收容量开始变多', '<em>虚拟机</em>网络出向压力处于重要级别\n* 3305132066 <em>虚拟机</em>网络出向压力处于警告级别\n* 3305132067 <em>虚拟机</em>磁盘读取滞后时间处于严重级别\n* 3305132068 <em>虚拟机</em>磁盘读取滞后时间处于重要级别\n* 3305132069 <em>虚拟机</em>磁盘读取滞后时间处于警告级别\n* 3305132071 <em>虚拟机</em>磁盘写入滞后时间处于严重级别\n* 3305132072 <em>虚拟机</em>磁盘写入滞后时间处于重要级别']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774882679977_b966d221 的高亮信息: {'content': ['<em>虚拟机</em>CPU压力处于重要级别\n* 3305132045 <em>虚拟机</em>CPU压力处于警告级别\n* 3305132046 <em>虚拟机</em>内存压力处于严重级别\n* 3305132047 <em>虚拟机</em>内存压力处于重要级别\n* 3305132048 <em>虚拟机</em>内存压力处于警告级别\n* 3305132049 <em>虚拟机</em>可回收量非常多（严重）\n* 3305132050 <em>虚拟机</em>可回收容量比较多（重要）\n* 3305132051 <em>虚拟机</em>可回收容量开始变多', '<em>虚拟机</em>网络出向压力处于重要级别\n* 3305132066 <em>虚拟机</em>网络出向压力处于警告级别\n* 3305132067 <em>虚拟机</em>磁盘读取滞后时间处于严重级别\n* 3305132068 <em>虚拟机</em>磁盘读取滞后时间处于重要级别\n* 3305132069 <em>虚拟机</em>磁盘读取滞后时间处于警告级别\n* 3305132071 <em>虚拟机</em>磁盘写入滞后时间处于严重级别\n* 3305132072 <em>虚拟机</em>磁盘写入滞后时间处于重要级别']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774882679977_b966d221 的高亮信息: {'content': ['<em>虚拟机</em>CPU压力处于重要级别\n* 3305132045 <em>虚拟机</em>CPU压力处于警告级别\n* 3305132046 <em>虚拟机</em>内存压力处于严重级别\n* 3305132047 <em>虚拟机</em>内存压力处于重要级别\n* 3305132048 <em>虚拟机</em>内存压力处于警告级别\n* 3305132049 <em>虚拟机</em>可回收量非常多（严重）\n* 3305132050 <em>虚拟机</em>可回收容量比较多（重要）\n* 3305132051 <em>虚拟机</em>可回收容量开始变多', '<em>虚拟机</em>网络出向压力处于重要级别\n* 3305132066 <em>虚拟机</em>网络出向压力处于警告级别\n* 3305132067 <em>虚拟机</em>磁盘读取滞后时间处于严重级别\n* 3305132068 <em>虚拟机</em>磁盘读取滞后时间处于重要级别\n* 3305132069 <em>虚拟机</em>磁盘读取滞后时间处于警告级别\n* 3305132071 <em>虚拟机</em>磁盘写入滞后时间处于严重级别\n* 3305132072 <em>虚拟机</em>磁盘写入滞后时间处于重要级别']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774882679977_b966d221 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774882679977_b966d221 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774882679977_b966d221 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774882679977_b966d221, 排名: 9, 分数: 18.6825, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774882679977_b966d221, 排名: 9, 分数: 18.6825, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774882679977_b966d221, 排名: 9, 分数: 18.6825, 命中词: 无
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774967406844_778bef9f 的高亮信息: {'content': ['）\n* P100025002 物理机端口入向最大丢包率（包括主备<em>网卡</em>）\n* P100025003 物理机端口入向最小丢包率(包括主备<em>网卡</em>)\n* P100025004 物理机端口出向平均丢包率(包括主备<em>网卡</em>)\n* P100025005 物理机端口出向最大丢包率(包括主备<em>网卡</em>)\n* P100025006 物理机端口出向最小丢包率(包括主备<em>网卡</em>)\n* P100025007 物理机端口入向报文平均长度(包括主备<em>网卡</em>', ')\n* P100025014 物理机出向最大网络利用率(包括主备<em>网卡</em>)\n* P100025015 物理机出向最小网络利用率(包括主备<em>网卡</em>)\n* P100025016 物理机出向网络利用率标准差(包括主备<em>网卡</em>)\n* P100025017 物理机<em>网卡</em>无错误连接时间比(包括主备<em>网卡</em>)\n* P100025018 物理机<em>网卡</em>链路无差错传输时间比(包括主备<em>网卡</em>)\n* P100025019 物理机端口入向平均错包率']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774967406844_778bef9f 的高亮信息: {'content': ['）\n* P100025002 物理机端口入向最大丢包率（包括主备<em>网卡</em>）\n* P100025003 物理机端口入向最小丢包率(包括主备<em>网卡</em>)\n* P100025004 物理机端口出向平均丢包率(包括主备<em>网卡</em>)\n* P100025005 物理机端口出向最大丢包率(包括主备<em>网卡</em>)\n* P100025006 物理机端口出向最小丢包率(包括主备<em>网卡</em>)\n* P100025007 物理机端口入向报文平均长度(包括主备<em>网卡</em>', ')\n* P100025014 物理机出向最大网络利用率(包括主备<em>网卡</em>)\n* P100025015 物理机出向最小网络利用率(包括主备<em>网卡</em>)\n* P100025016 物理机出向网络利用率标准差(包括主备<em>网卡</em>)\n* P100025017 物理机<em>网卡</em>无错误连接时间比(包括主备<em>网卡</em>)\n* P100025018 物理机<em>网卡</em>链路无差错传输时间比(包括主备<em>网卡</em>)\n* P100025019 物理机端口入向平均错包率']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🔍 文档 doc_1753774967406844_778bef9f 的高亮信息: {'content': ['）\n* P100025002 物理机端口入向最大丢包率（包括主备<em>网卡</em>）\n* P100025003 物理机端口入向最小丢包率(包括主备<em>网卡</em>)\n* P100025004 物理机端口出向平均丢包率(包括主备<em>网卡</em>)\n* P100025005 物理机端口出向最大丢包率(包括主备<em>网卡</em>)\n* P100025006 物理机端口出向最小丢包率(包括主备<em>网卡</em>)\n* P100025007 物理机端口入向报文平均长度(包括主备<em>网卡</em>', ')\n* P100025014 物理机出向最大网络利用率(包括主备<em>网卡</em>)\n* P100025015 物理机出向最小网络利用率(包括主备<em>网卡</em>)\n* P100025016 物理机出向网络利用率标准差(包括主备<em>网卡</em>)\n* P100025017 物理机<em>网卡</em>无错误连接时间比(包括主备<em>网卡</em>)\n* P100025018 物理机<em>网卡</em>链路无差错传输时间比(包括主备<em>网卡</em>)\n* P100025019 物理机端口入向平均错包率']}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774967406844_778bef9f 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774967406844_778bef9f 提取的匹配词: {}
2025-08-01 00:40:00,275 rag.components.base DEBUG: 🎯 文档 doc_1753774967406844_778bef9f 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774967406844_778bef9f, 排名: 10, 分数: 18.4572, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774967406844_778bef9f, 排名: 10, 分数: 18.4572, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774967406844_778bef9f, 排名: 10, 分数: 18.4572, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的虚机的最大个数，即如果该参数设置为1，则单个主机上只能部署一个虚机，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个虚机。\n* 该参数设置为1，表示所有的虚机都在一个互斥组中，即这个互斥组中的每个虚机都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于虚机的个数，否则就会部署失败，实例化不成功。', '是否启用删除<em>虚拟机</em>不删除数据盘| 该参数用于设置在删除<em>虚拟机</em>的情况下，是否同步需要删除<em>虚拟机</em>对应的数据盘（数据盘一般是存储在VIM中）。\n虚机<em>网卡</em>配置\nAMF的各种类型的虚机需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的虚机的最大个数，即如果该参数设置为1，则单个主机上只能部署一个虚机，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个虚机。\n* 该参数设置为1，表示所有的虚机都在一个互斥组中，即这个互斥组中的每个虚机都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于虚机的个数，否则就会部署失败，实例化不成功。', '是否启用删除<em>虚拟机</em>不删除数据盘| 该参数用于设置在删除<em>虚拟机</em>的情况下，是否同步需要删除<em>虚拟机</em>对应的数据盘（数据盘一般是存储在VIM中）。\n虚机<em>网卡</em>配置\nAMF的各种类型的虚机需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753773394863786_0f758bcd 的高亮信息: {'content': ['简单来说，本参数决定了单个主机上所能部署的虚机的最大个数，即如果该参数设置为1，则单个主机上只能部署一个虚机，如果该参数设置为2，则单个主机上<em>最多</em>只能部署两个虚机。\n* 该参数设置为1，表示所有的虚机都在一个互斥组中，即这个互斥组中的每个虚机都必须分散部署在不同的主机上。在这种情况下，实际环境中的主机个数必须大于等于虚机的个数，否则就会部署失败，实例化不成功。', '是否启用删除<em>虚拟机</em>不删除数据盘| 该参数用于设置在删除<em>虚拟机</em>的情况下，是否同步需要删除<em>虚拟机</em>对应的数据盘（数据盘一般是存储在VIM中）。\n虚机<em>网卡</em>配置\nAMF的各种类型的虚机需要关联的网络平面不同，详细内容参见表7。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753773394863786_0f758bcd 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 11, 分数: 18.4035, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 11, 分数: 18.4035, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863786_0f758bcd, 排名: 11, 分数: 18.4035, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。\n* dvs_low_prefer：优先选择不存在DVS高性能<em>网卡</em>的节点，无相应资源时选择DVS高性能<em>网卡</em>所在的NUMA节点。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。该参数用于设置此网络组的名称，如网络平面_Group。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。\n* dvs_low_prefer：优先选择不存在DVS高性能<em>网卡</em>的节点，无相应资源时选择DVS高性能<em>网卡</em>所在的NUMA节点。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。该参数用于设置此网络组的名称，如网络平面_Group。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753771717451501_16e1d879 的高亮信息: {'content': ['该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。\n* dvs_low_prefer：优先选择不存在DVS高性能<em>网卡</em>的节点，无相应资源时选择DVS高性能<em>网卡</em>所在的NUMA节点。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。该参数用于设置此网络组的名称，如网络平面_Group。']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753771717451501_16e1d879 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 12, 分数: 18.3211, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 12, 分数: 18.3211, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451501_16e1d879, 排名: 12, 分数: 18.3211, 命中词: 无
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['虚机网络挂载完成后，在虚机摘要页签的<em>虚拟机</em>硬件区域可看到网络全部挂载完毕，如图24所示。\n图24 <em>虚拟机</em>硬件网络适配器\n固化网络\n说明：\n需要固化的网络为net_api(内部网络)、net_iapi(运维网络)，其他网络不需要固化 （固化的IP地址在网络规划时已经确定）。\n1. 确认虚机<em>网卡</em>挂载网络。\n1.', '在虚机摘要页签的<em>虚拟机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到虚机节点，执行ifconfig -a，可查看虚机<em>网卡</em>的mac地址，如图26所示。\n图26 查看虚机<em>网卡</em>的mac地址\n通过mac地址就可以确定虚机<em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['虚机网络挂载完成后，在虚机摘要页签的<em>虚拟机</em>硬件区域可看到网络全部挂载完毕，如图24所示。\n图24 <em>虚拟机</em>硬件网络适配器\n固化网络\n说明：\n需要固化的网络为net_api(内部网络)、net_iapi(运维网络)，其他网络不需要固化 （固化的IP地址在网络规划时已经确定）。\n1. 确认虚机<em>网卡</em>挂载网络。\n1.', '在虚机摘要页签的<em>虚拟机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到虚机节点，执行ifconfig -a，可查看虚机<em>网卡</em>的mac地址，如图26所示。\n图26 查看虚机<em>网卡</em>的mac地址\n通过mac地址就可以确定虚机<em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🔍 文档 doc_1753774894092955_1e8ef3f0 的高亮信息: {'content': ['虚机网络挂载完成后，在虚机摘要页签的<em>虚拟机</em>硬件区域可看到网络全部挂载完毕，如图24所示。\n图24 <em>虚拟机</em>硬件网络适配器\n固化网络\n说明：\n需要固化的网络为net_api(内部网络)、net_iapi(运维网络)，其他网络不需要固化 （固化的IP地址在网络规划时已经确定）。\n1. 确认虚机<em>网卡</em>挂载网络。\n1.', '在虚机摘要页签的<em>虚拟机</em>硬件区域，单击网络适配器可查看mac地址和网络信息对应关系，如图25所示。\n图25 查看mac地址和网络信息对应关系\n2. 登录到虚机节点，执行ifconfig -a，可查看虚机<em>网卡</em>的mac地址，如图26所示。\n图26 查看虚机<em>网卡</em>的mac地址\n通过mac地址就可以确定虚机<em>网卡</em>挂载的网络信息。\n2. 固化net_api(内部网络)地址。\n1.']}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:40:00,276 rag.components.base DEBUG: 🎯 文档 doc_1753774894092955_1e8ef3f0 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 13, 分数: 18.2534, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 13, 分数: 18.2534, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092955_1e8ef3f0, 排名: 13, 分数: 18.2534, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773395013893_30f8a296 的高亮信息: {'content': ['承载类故障\n典型特征\n* AMF上有2201 管理组件与业务模块间通讯异常、2202 <em>虚拟机</em>检测代理异常告警等告警。', '收集告警通知、性能统计、信令跟踪的信息，联系中兴通讯技术<em>支持</em>。\n应急恢复\n如果是承载网故障导致，则立即通知承载网侧维护人员紧急处理。若承载网侧短时间内无法定位并恢复，将该局业务切换至容灾局。\n根据配置IPU的数量，通过手动闭塞IPU的所有父接口，系统会自动切换到容灾局。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773395013893_30f8a296 的高亮信息: {'content': ['承载类故障\n典型特征\n* AMF上有2201 管理组件与业务模块间通讯异常、2202 <em>虚拟机</em>检测代理异常告警等告警。', '收集告警通知、性能统计、信令跟踪的信息，联系中兴通讯技术<em>支持</em>。\n应急恢复\n如果是承载网故障导致，则立即通知承载网侧维护人员紧急处理。若承载网侧短时间内无法定位并恢复，将该局业务切换至容灾局。\n根据配置IPU的数量，通过手动闭塞IPU的所有父接口，系统会自动切换到容灾局。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773395013893_30f8a296 的高亮信息: {'content': ['承载类故障\n典型特征\n* AMF上有2201 管理组件与业务模块间通讯异常、2202 <em>虚拟机</em>检测代理异常告警等告警。', '收集告警通知、性能统计、信令跟踪的信息，联系中兴通讯技术<em>支持</em>。\n应急恢复\n如果是承载网故障导致，则立即通知承载网侧维护人员紧急处理。若承载网侧短时间内无法定位并恢复，将该局业务切换至容灾局。\n根据配置IPU的数量，通过手动闭塞IPU的所有父接口，系统会自动切换到容灾局。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773395013893_30f8a296 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773395013893_30f8a296 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773395013893_30f8a296 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773395013893_30f8a296, 排名: 14, 分数: 18.1735, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773395013893_30f8a296, 排名: 14, 分数: 18.1735, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773395013893_30f8a296, 排名: 14, 分数: 18.1735, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753771717452174_7cf4f4b2 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于设置<em>虚拟机</em>需要的DVS高性能属性，详细描述如下：\n* null：表示不使用该参数功能。\n* dvs_high_prefer：优先选择DVS高性能<em>网卡</em>所在的节点，无相应资源时选择其他NUMA节点。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753771717452174_7cf4f4b2 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 15, 分数: 18.1191, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 15, 分数: 18.1191, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452174_7cf4f4b2, 排名: 15, 分数: 18.1191, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773394863772_d4956c87 的高亮信息: {'content': ['<em>虚拟机</em>部署策略是指是否<em>支持</em>将一个<em>虚拟机</em>组（Server-group）中的多个虚机分别部署在ZXUN uMAC所在可用域（Availability Zones）AZ(Availability Zone, 可用性区域)的同一个主机（此处指计算节点）上还是不同的主机上，部署的主机必须属于同一个主机集合（Host Aggregates）。', '比如部署了两个<em>虚拟机</em>，一个作为主用<em>虚拟机</em>，一个作为备用<em>虚拟机</em>。当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773394863772_d4956c87 的高亮信息: {'content': ['<em>虚拟机</em>部署策略是指是否<em>支持</em>将一个<em>虚拟机</em>组（Server-group）中的多个虚机分别部署在ZXUN uMAC所在可用域（Availability Zones）AZ(Availability Zone, 可用性区域)的同一个主机（此处指计算节点）上还是不同的主机上，部署的主机必须属于同一个主机集合（Host Aggregates）。', '比如部署了两个<em>虚拟机</em>，一个作为主用<em>虚拟机</em>，一个作为备用<em>虚拟机</em>。当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🔍 文档 doc_1753773394863772_d4956c87 的高亮信息: {'content': ['<em>虚拟机</em>部署策略是指是否<em>支持</em>将一个<em>虚拟机</em>组（Server-group）中的多个虚机分别部署在ZXUN uMAC所在可用域（Availability Zones）AZ(Availability Zone, 可用性区域)的同一个主机（此处指计算节点）上还是不同的主机上，部署的主机必须属于同一个主机集合（Host Aggregates）。', '比如部署了两个<em>虚拟机</em>，一个作为主用<em>虚拟机</em>，一个作为备用<em>虚拟机</em>。当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。']}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773394863772_d4956c87 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773394863772_d4956c87 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 🎯 文档 doc_1753773394863772_d4956c87 提取的匹配词: {}
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863772_d4956c87, 排名: 16, 分数: 17.5826, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863772_d4956c87, 排名: 16, 分数: 17.5826, 命中词: 无
2025-08-01 00:40:00,277 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863772_d4956c87, 排名: 16, 分数: 17.5826, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753771989387428_0aaa0c31 的高亮信息: {'content': ['| 参数作用：本参数在“承载协议类型”选择SCTP承载链路时有效，用于标识Diameter链路要求偶联<em>支持</em>的负荷协议类型。 数据来源：与对端网元协商规划。 配置原则：\n* 若偶联负荷协议标识为“任意”（值为0），兼容旧协议。\n* 若偶联负荷协议标识为“SCTP数据<em>块</em>”（值为46），表示用于传输SCTP数据<em>块</em>。', '* 若偶联负荷协议标识为“DTLS/SCTP数据<em>块</em>”（值为47），表示用于传输DTLS加密的SCTP数据<em>块</em>。\n建议使用默认值0。\nADJTYPE | 邻接局类型 | 参数可选性:任选参数；参数类型:枚举。 参见枚举定义。 | 参数作用：本参数用于配置对端邻接局的类型。 数据来源：对端网元的类型。 配置原则：\n* DRA：表示链路对端的网元为DRA，此链路上默认<em>支持</em>收发所有接口的消息。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753771989387428_0aaa0c31 的高亮信息: {'content': ['| 参数作用：本参数在“承载协议类型”选择SCTP承载链路时有效，用于标识Diameter链路要求偶联<em>支持</em>的负荷协议类型。 数据来源：与对端网元协商规划。 配置原则：\n* 若偶联负荷协议标识为“任意”（值为0），兼容旧协议。\n* 若偶联负荷协议标识为“SCTP数据<em>块</em>”（值为46），表示用于传输SCTP数据<em>块</em>。', '* 若偶联负荷协议标识为“DTLS/SCTP数据<em>块</em>”（值为47），表示用于传输DTLS加密的SCTP数据<em>块</em>。\n建议使用默认值0。\nADJTYPE | 邻接局类型 | 参数可选性:任选参数；参数类型:枚举。 参见枚举定义。 | 参数作用：本参数用于配置对端邻接局的类型。 数据来源：对端网元的类型。 配置原则：\n* DRA：表示链路对端的网元为DRA，此链路上默认<em>支持</em>收发所有接口的消息。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753771989387428_0aaa0c31 的高亮信息: {'content': ['| 参数作用：本参数在“承载协议类型”选择SCTP承载链路时有效，用于标识Diameter链路要求偶联<em>支持</em>的负荷协议类型。 数据来源：与对端网元协商规划。 配置原则：\n* 若偶联负荷协议标识为“任意”（值为0），兼容旧协议。\n* 若偶联负荷协议标识为“SCTP数据<em>块</em>”（值为46），表示用于传输SCTP数据<em>块</em>。', '* 若偶联负荷协议标识为“DTLS/SCTP数据<em>块</em>”（值为47），表示用于传输DTLS加密的SCTP数据<em>块</em>。\n建议使用默认值0。\nADJTYPE | 邻接局类型 | 参数可选性:任选参数；参数类型:枚举。 参见枚举定义。 | 参数作用：本参数用于配置对端邻接局的类型。 数据来源：对端网元的类型。 配置原则：\n* DRA：表示链路对端的网元为DRA，此链路上默认<em>支持</em>收发所有接口的消息。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753771989387428_0aaa0c31 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753771989387428_0aaa0c31 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753771989387428_0aaa0c31 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771989387428_0aaa0c31, 排名: 17, 分数: 17.5198, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771989387428_0aaa0c31, 排名: 17, 分数: 17.5198, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771989387428_0aaa0c31, 排名: 17, 分数: 17.5198, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753774474067116_ec07e78c 的高亮信息: {'content': ['本地EPC APN HOST配置| <em>最多</em><em>支持</em>4096条APN FQDN解析数据，一个APN FQDN<em>最多</em>解析到8个PGW节点数据。\n本地EPC APN优选子网段配置| <em>最多</em><em>支持</em>4096条EPC APN优选子网段数据，一个APN FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。', '本地EPC地址解析优选子网段配置| <em>最多</em><em>支持</em>1024条EPC地址解析优选子网段数据，一个FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。\n基于号段选择SGW配置| <em>最多</em><em>支持</em>基于4096个用户号段选择SGW。\nEPC扩展APN配置| 基于用户号段、签约计费特性选择PGW，<em>支持</em>IMEI扩展、TA信息扩展和无感分流标识扩展，<em>最多</em><em>支持</em>基于2048个用户号段选择PGW。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753774474067116_ec07e78c 的高亮信息: {'content': ['本地EPC APN HOST配置| <em>最多</em><em>支持</em>4096条APN FQDN解析数据，一个APN FQDN<em>最多</em>解析到8个PGW节点数据。\n本地EPC APN优选子网段配置| <em>最多</em><em>支持</em>4096条EPC APN优选子网段数据，一个APN FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。', '本地EPC地址解析优选子网段配置| <em>最多</em><em>支持</em>1024条EPC地址解析优选子网段数据，一个FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。\n基于号段选择SGW配置| <em>最多</em><em>支持</em>基于4096个用户号段选择SGW。\nEPC扩展APN配置| 基于用户号段、签约计费特性选择PGW，<em>支持</em>IMEI扩展、TA信息扩展和无感分流标识扩展，<em>最多</em><em>支持</em>基于2048个用户号段选择PGW。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753774474067116_ec07e78c 的高亮信息: {'content': ['本地EPC APN HOST配置| <em>最多</em><em>支持</em>4096条APN FQDN解析数据，一个APN FQDN<em>最多</em>解析到8个PGW节点数据。\n本地EPC APN优选子网段配置| <em>最多</em><em>支持</em>4096条EPC APN优选子网段数据，一个APN FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。', '本地EPC地址解析优选子网段配置| <em>最多</em><em>支持</em>1024条EPC地址解析优选子网段数据，一个FQDN<em>最多</em><em>支持</em>10个优先级不同的IP子网。\n基于号段选择SGW配置| <em>最多</em><em>支持</em>基于4096个用户号段选择SGW。\nEPC扩展APN配置| 基于用户号段、签约计费特性选择PGW，<em>支持</em>IMEI扩展、TA信息扩展和无感分流标识扩展，<em>最多</em><em>支持</em>基于2048个用户号段选择PGW。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753774474067116_ec07e78c 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753774474067116_ec07e78c 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753774474067116_ec07e78c 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774474067116_ec07e78c, 排名: 18, 分数: 17.4268, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774474067116_ec07e78c, 排名: 18, 分数: 17.4268, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774474067116_ec07e78c, 排名: 18, 分数: 17.4268, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773543373067_714fd1ac 的高亮信息: {'content': ['特性能力\n表1 特性能力特性| 能力\n---|---\n多PLMN配置| <em>最多</em><em>支持</em>16个PLMN。\n共享网络区配置| <em>最多</em><em>支持</em>256个共享网络区，一个共享网络区<em>最多</em>关联32个位置区，所有共享网络区关联的位置区对应的PLMN个数不超过8个。\n共享网络群配置| <em>最多</em><em>支持</em>22048个共享网络群，一个共享网络群<em>最多</em><em>支持</em>8个共享网络区。', '基于用户的共享网络区配置| <em>最多</em><em>支持</em>基于256个用户IMSI号段配置共享网络区，每个IMSI号段<em>最多</em><em>支持</em>8个共享网络群。\n可获得性\nSGSN<em>支持</em>3G MOCN功能和Gb口<em>支持</em>Rerouting功能需要申请了License许可后，运营商才能获得该特性的服务。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773543373067_714fd1ac 的高亮信息: {'content': ['特性能力\n表1 特性能力特性| 能力\n---|---\n多PLMN配置| <em>最多</em><em>支持</em>16个PLMN。\n共享网络区配置| <em>最多</em><em>支持</em>256个共享网络区，一个共享网络区<em>最多</em>关联32个位置区，所有共享网络区关联的位置区对应的PLMN个数不超过8个。\n共享网络群配置| <em>最多</em><em>支持</em>22048个共享网络群，一个共享网络群<em>最多</em><em>支持</em>8个共享网络区。', '基于用户的共享网络区配置| <em>最多</em><em>支持</em>基于256个用户IMSI号段配置共享网络区，每个IMSI号段<em>最多</em><em>支持</em>8个共享网络群。\n可获得性\nSGSN<em>支持</em>3G MOCN功能和Gb口<em>支持</em>Rerouting功能需要申请了License许可后，运营商才能获得该特性的服务。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773543373067_714fd1ac 的高亮信息: {'content': ['特性能力\n表1 特性能力特性| 能力\n---|---\n多PLMN配置| <em>最多</em><em>支持</em>16个PLMN。\n共享网络区配置| <em>最多</em><em>支持</em>256个共享网络区，一个共享网络区<em>最多</em>关联32个位置区，所有共享网络区关联的位置区对应的PLMN个数不超过8个。\n共享网络群配置| <em>最多</em><em>支持</em>22048个共享网络群，一个共享网络群<em>最多</em><em>支持</em>8个共享网络区。', '基于用户的共享网络区配置| <em>最多</em><em>支持</em>基于256个用户IMSI号段配置共享网络区，每个IMSI号段<em>最多</em><em>支持</em>8个共享网络群。\n可获得性\nSGSN<em>支持</em>3G MOCN功能和Gb口<em>支持</em>Rerouting功能需要申请了License许可后，运营商才能获得该特性的服务。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773543373067_714fd1ac 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773543373067_714fd1ac 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773543373067_714fd1ac 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773543373067_714fd1ac, 排名: 19, 分数: 16.4695, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773543373067_714fd1ac, 排名: 19, 分数: 16.4695, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773543373067_714fd1ac, 排名: 19, 分数: 16.4695, 命中词: 无
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['云盘类型| 该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack 或其他厂商的云平台软件，例如Vmware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。该参数的值必须与VIM云管理平台上创建的云硬盘类型的名称相同。\n总读写速度(字节/秒)| 该参数用于设置在VIM云管理平台上创建的云硬盘对应的总读写速度。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['云盘类型| 该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack 或其他厂商的云平台软件，例如Vmware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。该参数的值必须与VIM云管理平台上创建的云硬盘类型的名称相同。\n总读写速度(字节/秒)| 该参数用于设置在VIM云管理平台上创建的云硬盘对应的总读写速度。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🔍 文档 doc_1753773397041288_c24253fa 的高亮信息: {'content': ['云盘类型| 该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack 或其他厂商的云平台软件，例如Vmware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。该参数的值必须与VIM云管理平台上创建的云硬盘类型的名称相同。\n总读写速度(字节/秒)| 该参数用于设置在VIM云管理平台上创建的云硬盘对应的总读写速度。', '此处创建的网络组，用于被虚机的vNIC（虚拟<em>网卡</em>）关联使用。当某个虚机的虚拟<em>网卡</em>关联了一个网络组后，在此虚机实例化成功，并创建vNIC（虚拟<em>网卡</em>）时，VIM平台则会按照网络组中的两个逻辑网络平面，分别创建对应的虚拟<em>网卡</em>，即一个虚机会创建两个vNIC（虚拟<em>网卡</em>）。']}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:40:00,278 rag.components.base DEBUG: 🎯 文档 doc_1753773397041288_c24253fa 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 20, 分数: 16.3808, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 20, 分数: 16.3808, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773397041288_c24253fa, 排名: 20, 分数: 16.3808, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772587260486_9be55957 的高亮信息: {'content': ['在网络透传模式下才需要填写此参数，表明对应网络平面生成的接口下规划<em>多少</em>个子接口。\nSubinterface Name| 不需要填写。\nVNF Side VRF| 不需要填写。\nSwitch Side VRF| 不需要填写。\nA-H | 本参数用于配置每个网络平面的IPv6地址，注意D为VLAN ID。根据组网规范的IPv6地址填写。\nMASK| 本参数用于配置每个网络平面的掩码。', '安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772587260486_9be55957 的高亮信息: {'content': ['在网络透传模式下才需要填写此参数，表明对应网络平面生成的接口下规划<em>多少</em>个子接口。\nSubinterface Name| 不需要填写。\nVNF Side VRF| 不需要填写。\nSwitch Side VRF| 不需要填写。\nA-H | 本参数用于配置每个网络平面的IPv6地址，注意D为VLAN ID。根据组网规范的IPv6地址填写。\nMASK| 本参数用于配置每个网络平面的掩码。', '安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772587260486_9be55957 的高亮信息: {'content': ['在网络透传模式下才需要填写此参数，表明对应网络平面生成的接口下规划<em>多少</em>个子接口。\nSubinterface Name| 不需要填写。\nVNF Side VRF| 不需要填写。\nSwitch Side VRF| 不需要填写。\nA-H | 本参数用于配置每个网络平面的IPv6地址，注意D为VLAN ID。根据组网规范的IPv6地址填写。\nMASK| 本参数用于配置每个网络平面的掩码。', '安全组用来实现安全组内和组间<em>虚拟机</em>的访问控制，加强<em>虚拟机</em>的安全保护。安全组创建后，操作员可以在安全组中定义各种访问规则，当<em>虚拟机</em>网络加入该安全组后，即受到这些访问规则的保护。安全组是端口级别的安全手段，具体来说是作用在<em>虚拟机</em>的端口而不是网络上，可以定义哪些进入的网络流量能被转发给虚机。安全组包含一组防火墙策略，称为安全组规则（Security Group Rule）。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753772587260486_9be55957 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753772587260486_9be55957 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753772587260486_9be55957 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772587260486_9be55957, 排名: 21, 分数: 16.2207, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772587260486_9be55957, 排名: 21, 分数: 16.2207, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772587260486_9be55957, 排名: 21, 分数: 16.2207, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753773552387521_cb05eb2f 的高亮信息: {'content': ['IPADDR2 | 缺省MSC Server地址2 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。', 'IPADDR3 | 缺省MSC Server地址3 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753773552387521_cb05eb2f 的高亮信息: {'content': ['IPADDR2 | 缺省MSC Server地址2 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。', 'IPADDR3 | 缺省MSC Server地址3 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753773552387521_cb05eb2f 的高亮信息: {'content': ['IPADDR2 | 缺省MSC Server地址2 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。', 'IPADDR3 | 缺省MSC Server地址3 | 参数可选性:任选参数；参数类型:地址 | 配置缺省MSC Server的IP地址，包括IPv4或者IPv6地址，用户根据实际的IP地址个数配置，系统按照添加配置先后顺序生成各IP地址，<em>最多</em><em>支持</em>16个地址，可配置小于等于10的任意个IP地址。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753773552387521_cb05eb2f 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753773552387521_cb05eb2f 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753773552387521_cb05eb2f 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773552387521_cb05eb2f, 排名: 22, 分数: 16.1113, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773552387521_cb05eb2f, 排名: 22, 分数: 16.1113, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773552387521_cb05eb2f, 排名: 22, 分数: 16.1113, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack或其他厂商的云平台软件，例如VMware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。\n* 该参数的值与VIM上预定义的云硬盘类型相同，则使用对应的云硬盘类型。', '是否启用删除<em>虚拟机</em>不删除数据盘| 保持默认值。\n虚机<em>网卡</em>配置\n虚机<em>网卡</em>配置如图2所示。\n图2 虚机<em>网卡</em>配置\nOMU虚机<em>网卡</em>配置参数说明参见表2。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack或其他厂商的云平台软件，例如VMware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。\n* 该参数的值与VIM上预定义的云硬盘类型相同，则使用对应的云硬盘类型。', '是否启用删除<em>虚拟机</em>不删除数据盘| 保持默认值。\n虚机<em>网卡</em>配置\n虚机<em>网卡</em>配置如图2所示。\n图2 虚机<em>网卡</em>配置\nOMU虚机<em>网卡</em>配置参数说明参见表2。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753771717452169_e9539c2e 的高亮信息: {'content': ['该参数是指运营商操作员预先在VIM云管理平台（例如中兴通讯公司的TECS OpenStack或其他厂商的云平台软件，例如VMware等）上创建的云硬盘对应的名称，用于给<em>虚拟机</em>分配数据存储空间。\n* 该参数的值与VIM上预定义的云硬盘类型相同，则使用对应的云硬盘类型。', '是否启用删除<em>虚拟机</em>不删除数据盘| 保持默认值。\n虚机<em>网卡</em>配置\n虚机<em>网卡</em>配置如图2所示。\n图2 虚机<em>网卡</em>配置\nOMU虚机<em>网卡</em>配置参数说明参见表2。']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🎯 文档 doc_1753771717452169_e9539c2e 提取的匹配词: {}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 23, 分数: 15.9787, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 23, 分数: 15.9787, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452169_e9539c2e, 排名: 23, 分数: 15.9787, 命中词: 无
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772759418844_3b68cb76 的高亮信息: {'content': ['_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track', '，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772759418844_3b68cb76 的高亮信息: {'content': ['_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track', '，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜']}
2025-08-01 00:40:00,279 rag.components.base DEBUG: 🔍 文档 doc_1753772759418844_3b68cb76 的高亮信息: {'content': ['_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track', '，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜ _ipv4-address_ ＞ | 下一跳IP地址，十进制点分形式，<em>最多</em>可配置10个地址\n＜ _track-name_ ＞ | track 名称，长度1–31个字符，<em>最多</em>可配置10个\n＜']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772759418844_3b68cb76 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772759418844_3b68cb76 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772759418844_3b68cb76 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772759418844_3b68cb76, 排名: 24, 分数: 15.9165, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772759418844_3b68cb76, 排名: 24, 分数: 15.9165, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772759418844_3b68cb76, 排名: 24, 分数: 15.9165, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双栈主机IP地址列表| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，主机IP地址列表与**双栈主机IP地址列表** 分别需要配置为IPv4与IPv6地址。', '双栈浮动IP地址| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，浮动IP地址与**双栈浮动IP地址** 分别需要配置为IPv4与IPv6地址。']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双栈主机IP地址列表| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，主机IP地址列表与**双栈主机IP地址列表** 分别需要配置为IPv4与IPv6地址。', '双栈浮动IP地址| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，浮动IP地址与**双栈浮动IP地址** 分别需要配置为IPv4与IPv6地址。']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753771717452172_50dea754 的高亮信息: {'content': ['双栈主机IP地址列表| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，主机IP地址列表与**双栈主机IP地址列表** 分别需要配置为IPv4与IPv6地址。', '双栈浮动IP地址| 当ZXUN RCP<em>支持</em>IPv4(Internet Protocol Version 4, 互联网通信协议第四版)/IPv6(Internet Protocol Version 6, 互联网通信协议第六版)双栈时，浮动IP地址与**双栈浮动IP地址** 分别需要配置为IPv4与IPv6地址。']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753771717452172_50dea754 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 25, 分数: 15.7695, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 25, 分数: 15.7695, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452172_50dea754, 排名: 25, 分数: 15.7695, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753772767386247_f5f9903e 的高亮信息: {'content': ['\ufeff\nalarm-threshold port-range-block\n命令功能\n配置port range<em>块</em>告警通知\n命令模式\nNAT-PAT地址池模式\n命令默认权限级别\n15\n命令格式\n**alarm-threshold port-range-block** ＜ _port-range-block-alarm_ ＞\n**no alarm-threshold port-range-block**\n命令参数解释', '配置\ncgn-pool 1 poolid 1 mode pat\nalarm-threshold port-range-block 1\nport-range enable 256\nsection 1 10.1.1.1\n共256<em>块</em>端口<em>块</em>，发送私网IP不同的120条流量，产生通知\nA notification 303118 ID 235 level 8 occurred at 17:07:05 09-21']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753772767386247_f5f9903e 的高亮信息: {'content': ['\ufeff\nalarm-threshold port-range-block\n命令功能\n配置port range<em>块</em>告警通知\n命令模式\nNAT-PAT地址池模式\n命令默认权限级别\n15\n命令格式\n**alarm-threshold port-range-block** ＜ _port-range-block-alarm_ ＞\n**no alarm-threshold port-range-block**\n命令参数解释', '配置\ncgn-pool 1 poolid 1 mode pat\nalarm-threshold port-range-block 1\nport-range enable 256\nsection 1 10.1.1.1\n共256<em>块</em>端口<em>块</em>，发送私网IP不同的120条流量，产生通知\nA notification 303118 ID 235 level 8 occurred at 17:07:05 09-21']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753772767386247_f5f9903e 的高亮信息: {'content': ['\ufeff\nalarm-threshold port-range-block\n命令功能\n配置port range<em>块</em>告警通知\n命令模式\nNAT-PAT地址池模式\n命令默认权限级别\n15\n命令格式\n**alarm-threshold port-range-block** ＜ _port-range-block-alarm_ ＞\n**no alarm-threshold port-range-block**\n命令参数解释', '配置\ncgn-pool 1 poolid 1 mode pat\nalarm-threshold port-range-block 1\nport-range enable 256\nsection 1 10.1.1.1\n共256<em>块</em>端口<em>块</em>，发送私网IP不同的120条流量，产生通知\nA notification 303118 ID 235 level 8 occurred at 17:07:05 09-21']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772767386247_f5f9903e 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772767386247_f5f9903e 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🎯 文档 doc_1753772767386247_f5f9903e 提取的匹配词: {}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772767386247_f5f9903e, 排名: 26, 分数: 15.7341, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772767386247_f5f9903e, 排名: 26, 分数: 15.7341, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772767386247_f5f9903e, 排名: 26, 分数: 15.7341, 命中词: 无
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753773539798466_46c8adeb 的高亮信息: {'content': ['* scale out：\nNF(Network Function, 网络功能)<em>支持</em>scale out功能，以实现负载均衡和提升处理能力。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工扩容<em>虚拟机</em>，即根据弹性伸缩策略（包括CPU负荷、数据区占用和时间周期等），自动或者手工启动新的<em>虚拟机</em>。scale out如图1所示。', '图1 scale out\n在scale out之前，系统只有3#<em>虚拟机</em>在工作，且CPU负荷占用达到90%。在scale out后，系统有3#和4#<em>虚拟机</em>在工作，且4#<em>虚拟机</em>分担系统的一半的负荷。\n* scale in\nNF<em>支持</em>scale in功能，以实现节能降耗的要求。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工缩容<em>虚拟机</em>，即根据弹性伸缩策略，自动或者手工关闭正在运行的<em>虚拟机</em>。']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753773539798466_46c8adeb 的高亮信息: {'content': ['* scale out：\nNF(Network Function, 网络功能)<em>支持</em>scale out功能，以实现负载均衡和提升处理能力。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工扩容<em>虚拟机</em>，即根据弹性伸缩策略（包括CPU负荷、数据区占用和时间周期等），自动或者手工启动新的<em>虚拟机</em>。scale out如图1所示。', '图1 scale out\n在scale out之前，系统只有3#<em>虚拟机</em>在工作，且CPU负荷占用达到90%。在scale out后，系统有3#和4#<em>虚拟机</em>在工作，且4#<em>虚拟机</em>分担系统的一半的负荷。\n* scale in\nNF<em>支持</em>scale in功能，以实现节能降耗的要求。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工缩容<em>虚拟机</em>，即根据弹性伸缩策略，自动或者手工关闭正在运行的<em>虚拟机</em>。']}
2025-08-01 00:40:00,280 rag.components.base DEBUG: 🔍 文档 doc_1753773539798466_46c8adeb 的高亮信息: {'content': ['* scale out：\nNF(Network Function, 网络功能)<em>支持</em>scale out功能，以实现负载均衡和提升处理能力。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工扩容<em>虚拟机</em>，即根据弹性伸缩策略（包括CPU负荷、数据区占用和时间周期等），自动或者手工启动新的<em>虚拟机</em>。scale out如图1所示。', '图1 scale out\n在scale out之前，系统只有3#<em>虚拟机</em>在工作，且CPU负荷占用达到90%。在scale out后，系统有3#和4#<em>虚拟机</em>在工作，且4#<em>虚拟机</em>分担系统的一半的负荷。\n* scale in\nNF<em>支持</em>scale in功能，以实现节能降耗的要求。即在合同容量范围内，NF<em>支持</em>不影响业务连续性的自动或者手工缩容<em>虚拟机</em>，即根据弹性伸缩策略，自动或者手工关闭正在运行的<em>虚拟机</em>。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753773539798466_46c8adeb 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753773539798466_46c8adeb 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753773539798466_46c8adeb 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798466_46c8adeb, 排名: 27, 分数: 15.7028, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798466_46c8adeb, 排名: 27, 分数: 15.7028, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798466_46c8adeb, 排名: 27, 分数: 15.7028, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753775006317797_fd55fdc6 的高亮信息: {'content': ['Drives| 按Space键选择RAID1成员盘，选择后对应硬盘前的【】内会出现X号，表示此盘已被选择；（RAID0至少需要选择一<em>块</em>硬盘，RAID1需要选择两<em>块</em>硬盘，RAID5至少需要三<em>块</em>硬盘，RAID6和RAID10至少需要四<em>块</em>硬盘），当服务器使用两<em>块</em>硬盘时建议配置RAID1，当超过两<em>块</em>硬盘时（例如配四<em>块</em>硬盘时）建议配置RAID10。', 'Size| 选择RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)组成员盘后，Size栏会自动更新此RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)的大小，RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)1的容量即为一<em>块</em>硬盘的大小。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753775006317797_fd55fdc6 的高亮信息: {'content': ['Drives| 按Space键选择RAID1成员盘，选择后对应硬盘前的【】内会出现X号，表示此盘已被选择；（RAID0至少需要选择一<em>块</em>硬盘，RAID1需要选择两<em>块</em>硬盘，RAID5至少需要三<em>块</em>硬盘，RAID6和RAID10至少需要四<em>块</em>硬盘），当服务器使用两<em>块</em>硬盘时建议配置RAID1，当超过两<em>块</em>硬盘时（例如配四<em>块</em>硬盘时）建议配置RAID10。', 'Size| 选择RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)组成员盘后，Size栏会自动更新此RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)的大小，RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)1的容量即为一<em>块</em>硬盘的大小。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753775006317797_fd55fdc6 的高亮信息: {'content': ['Drives| 按Space键选择RAID1成员盘，选择后对应硬盘前的【】内会出现X号，表示此盘已被选择；（RAID0至少需要选择一<em>块</em>硬盘，RAID1需要选择两<em>块</em>硬盘，RAID5至少需要三<em>块</em>硬盘，RAID6和RAID10至少需要四<em>块</em>硬盘），当服务器使用两<em>块</em>硬盘时建议配置RAID1，当超过两<em>块</em>硬盘时（例如配四<em>块</em>硬盘时）建议配置RAID10。', 'Size| 选择RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)组成员盘后，Size栏会自动更新此RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)的大小，RAID(Redundant Array of Independent Disks, 独立冗余磁盘阵列)1的容量即为一<em>块</em>硬盘的大小。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753775006317797_fd55fdc6 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753775006317797_fd55fdc6 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753775006317797_fd55fdc6 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753775006317797_fd55fdc6, 排名: 28, 分数: 15.6614, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753775006317797_fd55fdc6, 排名: 28, 分数: 15.6614, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753775006317797_fd55fdc6, 排名: 28, 分数: 15.6614, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['VLAN Trunk是OpenStack社区提供的一种用于解决<em>虚拟机</em>接收/发送携带VLAN Tag的报文问题的技术方案。中兴通讯的VIM平台（TECS OpenStack）<em>支持</em>VLAN Trunk后，可以实现如下功能。\n* 减少<em>虚拟机</em>内部的<em>虚拟机</em><em>网卡</em>数量\n* 为<em>虚拟机</em>提供接收/发送携带VLAN Tag报文的功能。', 'TECS OpenStack<em>支持</em>对GPU，VGPU，智能<em>网卡</em>等加速资源进行统一管理。创建带硬件加速器的实例，可以获取高处理能力。该参数设置为**启用** 时，TECS OpnenStack平台可以为ZXUN RCP虚机提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['VLAN Trunk是OpenStack社区提供的一种用于解决<em>虚拟机</em>接收/发送携带VLAN Tag的报文问题的技术方案。中兴通讯的VIM平台（TECS OpenStack）<em>支持</em>VLAN Trunk后，可以实现如下功能。\n* 减少<em>虚拟机</em>内部的<em>虚拟机</em><em>网卡</em>数量\n* 为<em>虚拟机</em>提供接收/发送携带VLAN Tag报文的功能。', 'TECS OpenStack<em>支持</em>对GPU，VGPU，智能<em>网卡</em>等加速资源进行统一管理。创建带硬件加速器的实例，可以获取高处理能力。该参数设置为**启用** 时，TECS OpnenStack平台可以为ZXUN RCP虚机提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🔍 文档 doc_1753771717451490_8b356531 的高亮信息: {'content': ['VLAN Trunk是OpenStack社区提供的一种用于解决<em>虚拟机</em>接收/发送携带VLAN Tag的报文问题的技术方案。中兴通讯的VIM平台（TECS OpenStack）<em>支持</em>VLAN Trunk后，可以实现如下功能。\n* 减少<em>虚拟机</em>内部的<em>虚拟机</em><em>网卡</em>数量\n* 为<em>虚拟机</em>提供接收/发送携带VLAN Tag报文的功能。', 'TECS OpenStack<em>支持</em>对GPU，VGPU，智能<em>网卡</em>等加速资源进行统一管理。创建带硬件加速器的实例，可以获取高处理能力。该参数设置为**启用** 时，TECS OpnenStack平台可以为ZXUN RCP虚机提供加速资源策略配置。\n启用弹性资源控制| 该参数用于控制是否启用TECS OpnenStack平台Train版本的弹性资源调度。']}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 🎯 文档 doc_1753771717451490_8b356531 提取的匹配词: {}
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 29, 分数: 15.6129, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 29, 分数: 15.6129, 命中词: 无
2025-08-01 00:40:00,281 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451490_8b356531, 排名: 29, 分数: 15.6129, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774844569041_eba69926 的高亮信息: {'content': ['虚机资源\nEMSPlus<em>虚拟机</em>的M规格配置参见表1，说明如下：\n* 当前版本中的<em>虚拟机</em><em>支持</em>M、S和T规格。\n* 商用局规范要求所有存储必须使用云盘。特殊情况必须使用本地盘的话，则系统盘和数据盘的类型必须一致，不能系统盘是本地盘，数据盘是云盘。', 'DPU_C<em>最多</em>部署64个节点，DPU_D<em>最多</em>部署300个节点。DPU_C节点按<em>支持</em>20个并发计算，最少配置3个管理节点。| 12 vCPU+80 GB内存+系统盘40 GB+数据盘300 GB+数据库盘（按售前规划）| 数据库盘大小根据现场要求，可在实例化时指定。\nFTU| 1+1主备| 每6对FTU配置一对冗余。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774844569041_eba69926 的高亮信息: {'content': ['虚机资源\nEMSPlus<em>虚拟机</em>的M规格配置参见表1，说明如下：\n* 当前版本中的<em>虚拟机</em><em>支持</em>M、S和T规格。\n* 商用局规范要求所有存储必须使用云盘。特殊情况必须使用本地盘的话，则系统盘和数据盘的类型必须一致，不能系统盘是本地盘，数据盘是云盘。', 'DPU_C<em>最多</em>部署64个节点，DPU_D<em>最多</em>部署300个节点。DPU_C节点按<em>支持</em>20个并发计算，最少配置3个管理节点。| 12 vCPU+80 GB内存+系统盘40 GB+数据盘300 GB+数据库盘（按售前规划）| 数据库盘大小根据现场要求，可在实例化时指定。\nFTU| 1+1主备| 每6对FTU配置一对冗余。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774844569041_eba69926 的高亮信息: {'content': ['虚机资源\nEMSPlus<em>虚拟机</em>的M规格配置参见表1，说明如下：\n* 当前版本中的<em>虚拟机</em><em>支持</em>M、S和T规格。\n* 商用局规范要求所有存储必须使用云盘。特殊情况必须使用本地盘的话，则系统盘和数据盘的类型必须一致，不能系统盘是本地盘，数据盘是云盘。', 'DPU_C<em>最多</em>部署64个节点，DPU_D<em>最多</em>部署300个节点。DPU_C节点按<em>支持</em>20个并发计算，最少配置3个管理节点。| 12 vCPU+80 GB内存+系统盘40 GB+数据盘300 GB+数据库盘（按售前规划）| 数据库盘大小根据现场要求，可在实例化时指定。\nFTU| 1+1主备| 每6对FTU配置一对冗余。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774844569041_eba69926 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774844569041_eba69926 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774844569041_eba69926 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774844569041_eba69926, 排名: 30, 分数: 15.2277, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774844569041_eba69926, 排名: 30, 分数: 15.2277, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774844569041_eba69926, 排名: 30, 分数: 15.2277, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753773394863779_fd706689 的高亮信息: {'content': ['当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。如果这两个<em>虚拟机</em>都部署在同一台主机（计算节点）上，由于硬件问题导致整个主机出现故障，此时主备<em>虚拟机</em>都将陷入异常，业务也将无法正常工作。所以需要将<em>虚拟机</em>分散部署在不同的主机上。', '* 在计算资源充足的情况下，<em>虚拟机</em>必须部署在不同主机（计算节点）上。\n* 在计算资源不足情况下，尽可能将这些<em>虚拟机</em>部署在不同的主机（计算节点）上，避免剩余的虚机无法部署。\n软互斥可以理解为：在硬件条件不满足的情况下，尽量将<em>虚拟机</em>进行分散部署的一种策略。软互斥是一种虚机分散部署策略。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753773394863779_fd706689 的高亮信息: {'content': ['当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。如果这两个<em>虚拟机</em>都部署在同一台主机（计算节点）上，由于硬件问题导致整个主机出现故障，此时主备<em>虚拟机</em>都将陷入异常，业务也将无法正常工作。所以需要将<em>虚拟机</em>分散部署在不同的主机上。', '* 在计算资源充足的情况下，<em>虚拟机</em>必须部署在不同主机（计算节点）上。\n* 在计算资源不足情况下，尽可能将这些<em>虚拟机</em>部署在不同的主机（计算节点）上，避免剩余的虚机无法部署。\n软互斥可以理解为：在硬件条件不满足的情况下，尽量将<em>虚拟机</em>进行分散部署的一种策略。软互斥是一种虚机分散部署策略。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753773394863779_fd706689 的高亮信息: {'content': ['当主用<em>虚拟机</em>异常时，可以在备用<em>虚拟机</em>上继续业务功能。如果这两个<em>虚拟机</em>都部署在同一台主机（计算节点）上，由于硬件问题导致整个主机出现故障，此时主备<em>虚拟机</em>都将陷入异常，业务也将无法正常工作。所以需要将<em>虚拟机</em>分散部署在不同的主机上。', '* 在计算资源充足的情况下，<em>虚拟机</em>必须部署在不同主机（计算节点）上。\n* 在计算资源不足情况下，尽可能将这些<em>虚拟机</em>部署在不同的主机（计算节点）上，避免剩余的虚机无法部署。\n软互斥可以理解为：在硬件条件不满足的情况下，尽量将<em>虚拟机</em>进行分散部署的一种策略。软互斥是一种虚机分散部署策略。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753773394863779_fd706689 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753773394863779_fd706689 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753773394863779_fd706689 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863779_fd706689, 排名: 31, 分数: 15.2245, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863779_fd706689, 排名: 31, 分数: 15.2245, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773394863779_fd706689, 排名: 31, 分数: 15.2245, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774383695638_a8b87d7b 的高亮信息: {'content': ['一个EIR局向<em>最多</em>有2个Diameter局向路由，当配置2个Diameter局向路由时，这两个局向路由之间是主备关系。\nDiameter局向路由| MME最大<em>支持</em>1024个Diameter局向路由。一个Diameter局向路由中<em>最多</em>配置16个Diameter路由组，一个Diameter局向路由中<em>支持</em>基于优先级和权重选择Diameter路由组。', 'Diameter路由组| MME最大<em>支持</em>1024个Diameter路由组。一个Diameter路由组中<em>最多</em>配置2个Diameter路由，其中为主备或负荷分担关系。\nDiameter路由| MME最大<em>支持</em>1024个Diameter路由。一个Diameter路由中<em>最多</em>配置2个Diameter链路组，其中为主备或负荷分担关系。\nDiameter链路组| MME最大<em>支持</em>1024个Diameter链路组。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774383695638_a8b87d7b 的高亮信息: {'content': ['一个EIR局向<em>最多</em>有2个Diameter局向路由，当配置2个Diameter局向路由时，这两个局向路由之间是主备关系。\nDiameter局向路由| MME最大<em>支持</em>1024个Diameter局向路由。一个Diameter局向路由中<em>最多</em>配置16个Diameter路由组，一个Diameter局向路由中<em>支持</em>基于优先级和权重选择Diameter路由组。', 'Diameter路由组| MME最大<em>支持</em>1024个Diameter路由组。一个Diameter路由组中<em>最多</em>配置2个Diameter路由，其中为主备或负荷分担关系。\nDiameter路由| MME最大<em>支持</em>1024个Diameter路由。一个Diameter路由中<em>最多</em>配置2个Diameter链路组，其中为主备或负荷分担关系。\nDiameter链路组| MME最大<em>支持</em>1024个Diameter链路组。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774383695638_a8b87d7b 的高亮信息: {'content': ['一个EIR局向<em>最多</em>有2个Diameter局向路由，当配置2个Diameter局向路由时，这两个局向路由之间是主备关系。\nDiameter局向路由| MME最大<em>支持</em>1024个Diameter局向路由。一个Diameter局向路由中<em>最多</em>配置16个Diameter路由组，一个Diameter局向路由中<em>支持</em>基于优先级和权重选择Diameter路由组。', 'Diameter路由组| MME最大<em>支持</em>1024个Diameter路由组。一个Diameter路由组中<em>最多</em>配置2个Diameter路由，其中为主备或负荷分担关系。\nDiameter路由| MME最大<em>支持</em>1024个Diameter路由。一个Diameter路由中<em>最多</em>配置2个Diameter链路组，其中为主备或负荷分担关系。\nDiameter链路组| MME最大<em>支持</em>1024个Diameter链路组。']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774383695638_a8b87d7b 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774383695638_a8b87d7b 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774383695638_a8b87d7b 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774383695638_a8b87d7b, 排名: 32, 分数: 15.0761, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774383695638_a8b87d7b, 排名: 32, 分数: 15.0761, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774383695638_a8b87d7b, 排名: 32, 分数: 15.0761, 命中词: 无
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774894092954_fe026a28 的高亮信息: {'content': ['右键单击要创建虚机的集群，在菜单栏单击新建<em>虚拟机</em>。\n2. 在弹出的<em>虚拟机</em>创建向导完成<em>虚拟机</em>的创建。\n1. 选择创建类型。\n2. 单击NEXT按钮，在选择名称和文件夹页填写<em>虚拟机</em>名称及创建后的位置。\n3. 单击NEXT按钮，在选择计算资源页选择计算资源并进行兼容性检查。\n4. 单击NEXT按钮，在选择存储页选择当前集群中的存储设备并进行兼容性检查。\n5.', '说明：\n第一<em>块</em>是系统盘需要大于等于430 G，第二<em>块</em>是数据盘根据HLD规划设置大小。\n9. 选择网络为net_api(内部网络)，适配器类型为VMXNET 3，如图3所示。\n图3 选择适配器类型\n10. 驱动选择数据存储ISO文件，弹出选择文件如图4所示，勾选上传的ISO操作系统文件，单击确定。\n图4 选择ISO操作系统文件\n11. 如图5所示，勾选链接...']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774894092954_fe026a28 的高亮信息: {'content': ['右键单击要创建虚机的集群，在菜单栏单击新建<em>虚拟机</em>。\n2. 在弹出的<em>虚拟机</em>创建向导完成<em>虚拟机</em>的创建。\n1. 选择创建类型。\n2. 单击NEXT按钮，在选择名称和文件夹页填写<em>虚拟机</em>名称及创建后的位置。\n3. 单击NEXT按钮，在选择计算资源页选择计算资源并进行兼容性检查。\n4. 单击NEXT按钮，在选择存储页选择当前集群中的存储设备并进行兼容性检查。\n5.', '说明：\n第一<em>块</em>是系统盘需要大于等于430 G，第二<em>块</em>是数据盘根据HLD规划设置大小。\n9. 选择网络为net_api(内部网络)，适配器类型为VMXNET 3，如图3所示。\n图3 选择适配器类型\n10. 驱动选择数据存储ISO文件，弹出选择文件如图4所示，勾选上传的ISO操作系统文件，单击确定。\n图4 选择ISO操作系统文件\n11. 如图5所示，勾选链接...']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🔍 文档 doc_1753774894092954_fe026a28 的高亮信息: {'content': ['右键单击要创建虚机的集群，在菜单栏单击新建<em>虚拟机</em>。\n2. 在弹出的<em>虚拟机</em>创建向导完成<em>虚拟机</em>的创建。\n1. 选择创建类型。\n2. 单击NEXT按钮，在选择名称和文件夹页填写<em>虚拟机</em>名称及创建后的位置。\n3. 单击NEXT按钮，在选择计算资源页选择计算资源并进行兼容性检查。\n4. 单击NEXT按钮，在选择存储页选择当前集群中的存储设备并进行兼容性检查。\n5.', '说明：\n第一<em>块</em>是系统盘需要大于等于430 G，第二<em>块</em>是数据盘根据HLD规划设置大小。\n9. 选择网络为net_api(内部网络)，适配器类型为VMXNET 3，如图3所示。\n图3 选择适配器类型\n10. 驱动选择数据存储ISO文件，弹出选择文件如图4所示，勾选上传的ISO操作系统文件，单击确定。\n图4 选择ISO操作系统文件\n11. 如图5所示，勾选链接...']}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774894092954_fe026a28 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774894092954_fe026a28 提取的匹配词: {}
2025-08-01 00:40:00,282 rag.components.base DEBUG: 🎯 文档 doc_1753774894092954_fe026a28 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092954_fe026a28, 排名: 33, 分数: 14.9682, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092954_fe026a28, 排名: 33, 分数: 14.9682, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753774894092954_fe026a28, 排名: 33, 分数: 14.9682, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771648681039_9ea21d26 的高亮信息: {'content': ['特性配置\n本节包含以下内容：\n* 配置SC自动弹性\n* 测试用例\n配置SC自动弹性\n配置说明\nZXUN RCP只<em>支持</em>SC(Service Component, 服务组件)自动弹性，不<em>支持</em>VM(Virtual Machine, <em>虚拟机</em>)自动弹性。\n自动弹性默认不开启，需要通过MML(Man Machine Language, 人机语言)启动自动弹性。配置SC自动弹性策略，触发SC自动扩缩容。', '配置<em>支持</em>自动弹性。\nSET SCALEGLBBASECFG:MODE="automatic"\n4. 配置SC自动弹性的策略。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771648681039_9ea21d26 的高亮信息: {'content': ['特性配置\n本节包含以下内容：\n* 配置SC自动弹性\n* 测试用例\n配置SC自动弹性\n配置说明\nZXUN RCP只<em>支持</em>SC(Service Component, 服务组件)自动弹性，不<em>支持</em>VM(Virtual Machine, <em>虚拟机</em>)自动弹性。\n自动弹性默认不开启，需要通过MML(Man Machine Language, 人机语言)启动自动弹性。配置SC自动弹性策略，触发SC自动扩缩容。', '配置<em>支持</em>自动弹性。\nSET SCALEGLBBASECFG:MODE="automatic"\n4. 配置SC自动弹性的策略。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771648681039_9ea21d26 的高亮信息: {'content': ['特性配置\n本节包含以下内容：\n* 配置SC自动弹性\n* 测试用例\n配置SC自动弹性\n配置说明\nZXUN RCP只<em>支持</em>SC(Service Component, 服务组件)自动弹性，不<em>支持</em>VM(Virtual Machine, <em>虚拟机</em>)自动弹性。\n自动弹性默认不开启，需要通过MML(Man Machine Language, 人机语言)启动自动弹性。配置SC自动弹性策略，触发SC自动扩缩容。', '配置<em>支持</em>自动弹性。\nSET SCALEGLBBASECFG:MODE="automatic"\n4. 配置SC自动弹性的策略。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771648681039_9ea21d26 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771648681039_9ea21d26 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771648681039_9ea21d26 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771648681039_9ea21d26, 排名: 34, 分数: 14.7523, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771648681039_9ea21d26, 排名: 34, 分数: 14.7523, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771648681039_9ea21d26, 排名: 34, 分数: 14.7523, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于在<em>虚拟机</em>部署时指定其绑核策略，从而使<em>虚拟机</em>进行NUMA亲和绑定。配置原则如下：\n* null：表示不使用该参数功能。\n* shared：表示<em>虚拟机</em>分配在同一NUMA节点上的多个虚拟CPU共享该NUMA节点上主机的所有可用物理CPU。\n* dedicated：精确绑核，表示<em>虚拟机</em>的虚拟CPU与主机的物理CPU进行一对一绑定。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于在<em>虚拟机</em>部署时指定其绑核策略，从而使<em>虚拟机</em>进行NUMA亲和绑定。配置原则如下：\n* null：表示不使用该参数功能。\n* shared：表示<em>虚拟机</em>分配在同一NUMA节点上的多个虚拟CPU共享该NUMA节点上主机的所有可用物理CPU。\n* dedicated：精确绑核，表示<em>虚拟机</em>的虚拟CPU与主机的物理CPU进行一对一绑定。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753771717451499_f9fabb5b 的高亮信息: {'content': ['该参数用于指定要创建的<em>虚拟机</em>所使用的具体的CPU型号。通常应用于异地迁移<em>虚拟机</em>的场景，比如把<em>虚拟机</em>从新型号CPU的服务器往旧型号CPU的服务器上迁移时，需要通过本参数来指定<em>虚拟机</em>所使用的CPU类型。\n启用扩展参数| 该参数建议设置为启用。\nhw:numa_nodes| 该参数建议采用默认值。在使用SR-IOV<em>网卡</em>部署虚机的场景才涉及到该参数的配置。', '该参数用于在<em>虚拟机</em>部署时指定其绑核策略，从而使<em>虚拟机</em>进行NUMA亲和绑定。配置原则如下：\n* null：表示不使用该参数功能。\n* shared：表示<em>虚拟机</em>分配在同一NUMA节点上的多个虚拟CPU共享该NUMA节点上主机的所有可用物理CPU。\n* dedicated：精确绑核，表示<em>虚拟机</em>的虚拟CPU与主机的物理CPU进行一对一绑定。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753771717451499_f9fabb5b 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 35, 分数: 14.6930, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 35, 分数: 14.6930, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717451499_f9fabb5b, 排名: 35, 分数: 14.6930, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773986407386_7a33e0a0 的高亮信息: {'content': ['* 本命令<em>最多</em>只能配置1条记录。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。\n修改影响：如果修改错误会导致4、5G互操作流程中，AMF选择MME失败，流程失败。 数据来源：本端规划。 默认值：<em>支持</em>。 配置原则：无。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773986407386_7a33e0a0 的高亮信息: {'content': ['* 本命令<em>最多</em>只能配置1条记录。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。\n修改影响：如果修改错误会导致4、5G互操作流程中，AMF选择MME失败，流程失败。 数据来源：本端规划。 默认值：<em>支持</em>。 配置原则：无。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773986407386_7a33e0a0 的高亮信息: {'content': ['* 本命令<em>最多</em>只能配置1条记录。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。\n修改影响：如果修改错误会导致4、5G互操作流程中，AMF选择MME失败，流程失败。 数据来源：本端规划。 默认值：<em>支持</em>。 配置原则：无。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753773986407386_7a33e0a0 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753773986407386_7a33e0a0 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🎯 文档 doc_1753773986407386_7a33e0a0 提取的匹配词: {}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773986407386_7a33e0a0, 排名: 36, 分数: 14.4570, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773986407386_7a33e0a0, 排名: 36, 分数: 14.4570, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773986407386_7a33e0a0, 排名: 36, 分数: 14.4570, 命中词: 无
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773539798705_31d4a6fc 的高亮信息: {'content': ['参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF的弹性模式| 手动manual\n配置步骤\n步骤| 说明| 操作\n---|---|---\n１| 配置<em>支持</em>手动弹性。', '参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF 的弹性模式| 自动automatic\n自动弹性类型| CPU占用率\n扩容门限（%）| 10\n缩容门限（%）| 5\n步骤\n步骤| 说明| 操作\n---|---|---\n1| 配置<em>支持</em>自动弹性。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773539798705_31d4a6fc 的高亮信息: {'content': ['参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF的弹性模式| 手动manual\n配置步骤\n步骤| 说明| 操作\n---|---|---\n１| 配置<em>支持</em>手动弹性。', '参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF 的弹性模式| 自动automatic\n自动弹性类型| CPU占用率\n扩容门限（%）| 10\n缩容门限（%）| 5\n步骤\n步骤| 说明| 操作\n---|---|---\n1| 配置<em>支持</em>自动弹性。']}
2025-08-01 00:40:00,283 rag.components.base DEBUG: 🔍 文档 doc_1753773539798705_31d4a6fc 的高亮信息: {'content': ['参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF的弹性模式| 手动manual\n配置步骤\n步骤| 说明| 操作\n---|---|---\n１| 配置<em>支持</em>手动弹性。', '参数| 取值\n---|---\nAMF GSU<em>虚拟机</em>初始个数| 3\nAMF GSU<em>虚拟机</em>最大个数| 8\nAMF 的弹性模式| 自动automatic\n自动弹性类型| CPU占用率\n扩容门限（%）| 10\n缩容门限（%）| 5\n步骤\n步骤| 说明| 操作\n---|---|---\n1| 配置<em>支持</em>自动弹性。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773539798705_31d4a6fc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773539798705_31d4a6fc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773539798705_31d4a6fc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798705_31d4a6fc, 排名: 37, 分数: 14.4532, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798705_31d4a6fc, 排名: 37, 分数: 14.4532, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773539798705_31d4a6fc, 排名: 37, 分数: 14.4532, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753772258257247_3edd00f2 的高亮信息: {'content': ['<em>虚拟机</em>数据盘/datadisk0大小有限且需要存储版本信息、日志等信息，当<em>虚拟机</em>的数据盘大小不足以<em>支持</em><em>虚拟机</em>存储其他用户数据时，需要对<em>虚拟机</em>数据盘进行扩容。扩容后，也可进行缩容操作。\nAUDIT模块是内核中的一个模块，用于记录内核的运行情况，包括系统调用、文件修改和程序的运行等。', '* 查询<em>虚拟机</em>数据盘的扩容情况、通过挂载数据盘的方式对<em>虚拟机</em>的数据盘进行扩容以及对扩容后的<em>虚拟机</em>进行缩容操作，即删除额外挂载的数据盘。\n* 查询、设置系统是否开启AUDIT服务。\n* 设置、查询OMU虚机是否开始CPU0核隔离。\n* 查询VNF设备形态。\n* 查询、设置网络参数。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753772258257247_3edd00f2 的高亮信息: {'content': ['<em>虚拟机</em>数据盘/datadisk0大小有限且需要存储版本信息、日志等信息，当<em>虚拟机</em>的数据盘大小不足以<em>支持</em><em>虚拟机</em>存储其他用户数据时，需要对<em>虚拟机</em>数据盘进行扩容。扩容后，也可进行缩容操作。\nAUDIT模块是内核中的一个模块，用于记录内核的运行情况，包括系统调用、文件修改和程序的运行等。', '* 查询<em>虚拟机</em>数据盘的扩容情况、通过挂载数据盘的方式对<em>虚拟机</em>的数据盘进行扩容以及对扩容后的<em>虚拟机</em>进行缩容操作，即删除额外挂载的数据盘。\n* 查询、设置系统是否开启AUDIT服务。\n* 设置、查询OMU虚机是否开始CPU0核隔离。\n* 查询VNF设备形态。\n* 查询、设置网络参数。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753772258257247_3edd00f2 的高亮信息: {'content': ['<em>虚拟机</em>数据盘/datadisk0大小有限且需要存储版本信息、日志等信息，当<em>虚拟机</em>的数据盘大小不足以<em>支持</em><em>虚拟机</em>存储其他用户数据时，需要对<em>虚拟机</em>数据盘进行扩容。扩容后，也可进行缩容操作。\nAUDIT模块是内核中的一个模块，用于记录内核的运行情况，包括系统调用、文件修改和程序的运行等。', '* 查询<em>虚拟机</em>数据盘的扩容情况、通过挂载数据盘的方式对<em>虚拟机</em>的数据盘进行扩容以及对扩容后的<em>虚拟机</em>进行缩容操作，即删除额外挂载的数据盘。\n* 查询、设置系统是否开启AUDIT服务。\n* 设置、查询OMU虚机是否开始CPU0核隔离。\n* 查询VNF设备形态。\n* 查询、设置网络参数。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753772258257247_3edd00f2 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753772258257247_3edd00f2 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753772258257247_3edd00f2 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772258257247_3edd00f2, 排名: 38, 分数: 14.3889, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772258257247_3edd00f2, 排名: 38, 分数: 14.3889, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753772258257247_3edd00f2, 排名: 38, 分数: 14.3889, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753773968750831_0f4ca9bc 的高亮信息: {'content': ['与常见的A记录、CNAME不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重，AMF作为DNS Client访问DNS服务器的时候，AMF从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址，取值及含义如下：\n* 不<em>支持</em>：不<em>支持</em>多SRV查询时，无论DNS服务器返回<em>多少</em>个SRV，只有第一个SRV生效。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753773968750831_0f4ca9bc 的高亮信息: {'content': ['与常见的A记录、CNAME不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重，AMF作为DNS Client访问DNS服务器的时候，AMF从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址，取值及含义如下：\n* 不<em>支持</em>：不<em>支持</em>多SRV查询时，无论DNS服务器返回<em>多少</em>个SRV，只有第一个SRV生效。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753773968750831_0f4ca9bc 的高亮信息: {'content': ['与常见的A记录、CNAME不同的是，SRV中除了记录服务器的地址，还记录了服务的端口，并且可以设置每个服务地址的优先级和权重，AMF作为DNS Client访问DNS服务器的时候，AMF从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址，取值及含义如下：\n* 不<em>支持</em>：不<em>支持</em>多SRV查询时，无论DNS服务器返回<em>多少</em>个SRV，只有第一个SRV生效。', '* <em>支持</em>：<em>支持</em>多SRV查询时，DNS服务器返回<em>多少</em>个SRV，AMF会处理多个SRV。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773968750831_0f4ca9bc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773968750831_0f4ca9bc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753773968750831_0f4ca9bc 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773968750831_0f4ca9bc, 排名: 39, 分数: 14.3396, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773968750831_0f4ca9bc, 排名: 39, 分数: 14.3396, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753773968750831_0f4ca9bc, 排名: 39, 分数: 14.3396, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['虚机启动优先级| 该参数用于设置<em>虚拟机</em>启动上电的优先级。取值范围为1~10，数值1表示优先级最高，数值10表示优先级最低，<em>虚拟机</em>启用时，每个主机根据<em>虚拟机</em>对应的优先级进行处理，优先级高的<em>虚拟机</em>先上电，优先级低的<em>虚拟机</em>后上电。一般情况下，建议将OMU和AMU(Arbitration Management Unit, 仲裁管理单元)的优先级设置为1。', '该参数用于设置OMU虚机<em>网卡</em>的QoS策略名称列表，与虚机<em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的虚机数/比例| 该参数用于设置同一批次允许下电的OMU虚机个数或者虚机比例。若该参数配置为比例值，则取值为单批次允许下电的OMU虚机数占用当前OMU虚机数的比例。\n内存回收水线(KB)| 保持默认值。\n虚机最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['虚机启动优先级| 该参数用于设置<em>虚拟机</em>启动上电的优先级。取值范围为1~10，数值1表示优先级最高，数值10表示优先级最低，<em>虚拟机</em>启用时，每个主机根据<em>虚拟机</em>对应的优先级进行处理，优先级高的<em>虚拟机</em>先上电，优先级低的<em>虚拟机</em>后上电。一般情况下，建议将OMU和AMU(Arbitration Management Unit, 仲裁管理单元)的优先级设置为1。', '该参数用于设置OMU虚机<em>网卡</em>的QoS策略名称列表，与虚机<em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的虚机数/比例| 该参数用于设置同一批次允许下电的OMU虚机个数或者虚机比例。若该参数配置为比例值，则取值为单批次允许下电的OMU虚机数占用当前OMU虚机数的比例。\n内存回收水线(KB)| 保持默认值。\n虚机最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🔍 文档 doc_1753771717452165_f60cd0a7 的高亮信息: {'content': ['虚机启动优先级| 该参数用于设置<em>虚拟机</em>启动上电的优先级。取值范围为1~10，数值1表示优先级最高，数值10表示优先级最低，<em>虚拟机</em>启用时，每个主机根据<em>虚拟机</em>对应的优先级进行处理，优先级高的<em>虚拟机</em>先上电，优先级低的<em>虚拟机</em>后上电。一般情况下，建议将OMU和AMU(Arbitration Management Unit, 仲裁管理单元)的优先级设置为1。', '该参数用于设置OMU虚机<em>网卡</em>的QoS策略名称列表，与虚机<em>网卡</em>一一对应，使用逗号分割。\n单批次允许下电的虚机数/比例| 该参数用于设置同一批次允许下电的OMU虚机个数或者虚机比例。若该参数配置为比例值，则取值为单批次允许下电的OMU虚机数占用当前OMU虚机数的比例。\n内存回收水线(KB)| 保持默认值。\n虚机最大虚拟内存空间| 保持默认值。']}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 文档 doc_1753771717452165_f60cd0a7 提取的匹配词: {}
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 40, 分数: 14.0250, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 40, 分数: 14.0250, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 📝 文本召回文档: doc_1753771717452165_f60cd0a7, 排名: 40, 分数: 14.0250, 命中词: 无
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243135649_843a1228, 排名: 1, 分数: 0.8503
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243135649_843a1228, 排名: 1, 分数: 0.8503
2025-08-01 00:40:00,284 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243135649_843a1228, 排名: 1, 分数: 0.8503
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773906544515_fd9a8b20, 排名: 2, 分数: 0.8435
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773906544515_fd9a8b20, 排名: 2, 分数: 0.8435
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773906544515_fd9a8b20, 排名: 2, 分数: 0.8435
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243136175_d0e66cfb, 排名: 3, 分数: 0.8306
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243136175_d0e66cfb, 排名: 3, 分数: 0.8306
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243136175_d0e66cfb, 排名: 3, 分数: 0.8306
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717451450_3d563538, 排名: 4, 分数: 0.8219
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717451450_3d563538, 排名: 4, 分数: 0.8219
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717451450_3d563538, 排名: 4, 分数: 0.8219
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773808594713_9f04e292, 排名: 5, 分数: 0.8218
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773808594713_9f04e292, 排名: 5, 分数: 0.8218
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773808594713_9f04e292, 排名: 5, 分数: 0.8218
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772711877329_0017cfb6, 排名: 6, 分数: 0.8200
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772711877329_0017cfb6, 排名: 6, 分数: 0.8200
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772711877329_0017cfb6, 排名: 6, 分数: 0.8200
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624306_7461d5c4, 排名: 7, 分数: 0.8185
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624306_7461d5c4, 排名: 7, 分数: 0.8185
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624306_7461d5c4, 排名: 7, 分数: 0.8185
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772201558300_78f279d7, 排名: 8, 分数: 0.8176
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772201558300_78f279d7, 排名: 8, 分数: 0.8176
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772201558300_78f279d7, 排名: 8, 分数: 0.8176
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011840_09145fb4, 排名: 9, 分数: 0.8167
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011840_09145fb4, 排名: 9, 分数: 0.8167
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011840_09145fb4, 排名: 9, 分数: 0.8167
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 10, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 10, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576185_03248202, 排名: 10, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 11, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 11, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774298576276_a96647af, 排名: 11, 分数: 0.8165
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975255_a91eab64, 排名: 12, 分数: 0.8164
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975255_a91eab64, 排名: 12, 分数: 0.8164
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773506975255_a91eab64, 排名: 12, 分数: 0.8164
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773845054535_7522e42d, 排名: 13, 分数: 0.8148
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773845054535_7522e42d, 排名: 13, 分数: 0.8148
2025-08-01 00:40:00,285 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773845054535_7522e42d, 排名: 13, 分数: 0.8148
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863592_c00882e3, 排名: 14, 分数: 0.8143
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863592_c00882e3, 排名: 14, 分数: 0.8143
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863592_c00882e3, 排名: 14, 分数: 0.8143
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863467_f8bda2f6, 排名: 15, 分数: 0.8131
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863467_f8bda2f6, 排名: 15, 分数: 0.8131
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394863467_f8bda2f6, 排名: 15, 分数: 0.8131
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094253_c009a1e4, 排名: 16, 分数: 0.8130
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094253_c009a1e4, 排名: 16, 分数: 0.8130
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094253_c009a1e4, 排名: 16, 分数: 0.8130
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624310_c00e0c81, 排名: 17, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624310_c00e0c81, 排名: 17, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232624310_c00e0c81, 排名: 17, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232625157_c71225d6, 排名: 18, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232625157_c71225d6, 排名: 18, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232625157_c71225d6, 排名: 18, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238666315_e1915f27, 排名: 19, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238666315_e1915f27, 排名: 19, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238666315_e1915f27, 排名: 19, 分数: 0.8121
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774881693793_8eff3fdb, 排名: 20, 分数: 0.8119
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774881693793_8eff3fdb, 排名: 20, 分数: 0.8119
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774881693793_8eff3fdb, 排名: 20, 分数: 0.8119
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206074_22b0f3a7, 排名: 21, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206074_22b0f3a7, 排名: 21, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206074_22b0f3a7, 排名: 21, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774196780517_df43e30f, 排名: 22, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774196780517_df43e30f, 排名: 22, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774196780517_df43e30f, 排名: 22, 分数: 0.8115
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232616783_f3717b11, 排名: 23, 分数: 0.8114
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232616783_f3717b11, 排名: 23, 分数: 0.8114
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774232616783_f3717b11, 排名: 23, 分数: 0.8114
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011855_93579591, 排名: 24, 分数: 0.8112
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011855_93579591, 排名: 24, 分数: 0.8112
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011855_93579591, 排名: 24, 分数: 0.8112
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238784_75f8796e, 排名: 25, 分数: 0.8108
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238784_75f8796e, 排名: 25, 分数: 0.8108
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238784_75f8796e, 排名: 25, 分数: 0.8108
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772997293383_e59024ff, 排名: 26, 分数: 0.8107
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772997293383_e59024ff, 排名: 26, 分数: 0.8107
2025-08-01 00:40:00,286 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772997293383_e59024ff, 排名: 26, 分数: 0.8107
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717444892_561d10a9, 排名: 27, 分数: 0.8105
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717444892_561d10a9, 排名: 27, 分数: 0.8105
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753771717444892_561d10a9, 排名: 27, 分数: 0.8105
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011787_8dfbe71e, 排名: 28, 分数: 0.8102
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011787_8dfbe71e, 排名: 28, 分数: 0.8102
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773395011787_8dfbe71e, 排名: 28, 分数: 0.8102
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772730116976_989959fe, 排名: 29, 分数: 0.8100
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772730116976_989959fe, 排名: 29, 分数: 0.8100
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772730116976_989959fe, 排名: 29, 分数: 0.8100
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243130854_8f884ff3, 排名: 30, 分数: 0.8099
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243130854_8f884ff3, 排名: 30, 分数: 0.8099
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774243130854_8f884ff3, 排名: 30, 分数: 0.8099
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206070_952b1539, 排名: 31, 分数: 0.8097
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206070_952b1539, 排名: 31, 分数: 0.8097
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206070_952b1539, 排名: 31, 分数: 0.8097
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238664_0bd9cdd7, 排名: 32, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238664_0bd9cdd7, 排名: 32, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753772592238664_0bd9cdd7, 排名: 32, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866113_cb60a466, 排名: 33, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866113_cb60a466, 排名: 33, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773394866113_cb60a466, 排名: 33, 分数: 0.8094
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773509105574_f879e598, 排名: 34, 分数: 0.8090
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773509105574_f879e598, 排名: 34, 分数: 0.8090
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753773509105574_f879e598, 排名: 34, 分数: 0.8090
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844567613_a8ffe46e, 排名: 35, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844567613_a8ffe46e, 排名: 35, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774844567613_a8ffe46e, 排名: 35, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238676440_4eb75fa5, 排名: 36, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238676440_4eb75fa5, 排名: 36, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774238676440_4eb75fa5, 排名: 36, 分数: 0.8088
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774893104888_f9c9279b, 排名: 37, 分数: 0.8083
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774893104888_f9c9279b, 排名: 37, 分数: 0.8083
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774893104888_f9c9279b, 排名: 37, 分数: 0.8083
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094333_2745789e, 排名: 38, 分数: 0.8081
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094333_2745789e, 排名: 38, 分数: 0.8081
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774894094333_2745789e, 排名: 38, 分数: 0.8081
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774863813327_a962d91c, 排名: 39, 分数: 0.8080
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774863813327_a962d91c, 排名: 39, 分数: 0.8080
2025-08-01 00:40:00,287 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774863813327_a962d91c, 排名: 39, 分数: 0.8080
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206130_7c7ee830, 排名: 40, 分数: 0.8080
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206130_7c7ee830, 排名: 40, 分数: 0.8080
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🎯 向量召回文档: doc_1753774858206130_7c7ee830, 排名: 40, 分数: 0.8080
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774243135649_843a1228: RRF分数=0.016393
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774243135649_843a1228: RRF分数=0.016393
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#1 文档 doc_1753774243135649_843a1228: RRF分数=0.016393
2025-08-01 00:40:00,288 rag.components.base DEBUG: ✅ 文档 doc_1753774243135649_843a1228 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,288 rag.components.base DEBUG: ✅ 文档 doc_1753774243135649_843a1228 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,288 rag.components.base DEBUG: ✅ 文档 doc_1753774243135649_843a1228 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774880415369_738bb7e0: RRF分数=0.016393
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774880415369_738bb7e0: RRF分数=0.016393
2025-08-01 00:40:00,288 rag.components.base DEBUG: 🔍 检查RRF排名#2 文档 doc_1753774880415369_738bb7e0: RRF分数=0.016393
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774880415369_738bb7e0 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774880415369_738bb7e0 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774880415369_738bb7e0 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753772134858399_7b3c974d: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753772134858399_7b3c974d: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#3 文档 doc_1753772134858399_7b3c974d: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772134858399_7b3c974d 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772134858399_7b3c974d 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772134858399_7b3c974d 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753773906544515_fd9a8b20: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753773906544515_fd9a8b20: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#4 文档 doc_1753773906544515_fd9a8b20: RRF分数=0.016129
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773906544515_fd9a8b20 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773906544515_fd9a8b20 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773906544515_fd9a8b20 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774326357766_f9f18f12: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774326357766_f9f18f12: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#5 文档 doc_1753774326357766_f9f18f12: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774326357766_f9f18f12 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774326357766_f9f18f12 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774326357766_f9f18f12 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774243136175_d0e66cfb: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774243136175_d0e66cfb: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#6 文档 doc_1753774243136175_d0e66cfb: RRF分数=0.015873
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774243136175_d0e66cfb 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774243136175_d0e66cfb 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753774243136175_d0e66cfb 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717451450_3d563538: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717451450_3d563538: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#7 文档 doc_1753771717451450_3d563538: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753771717451450_3d563538 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753771717451450_3d563538 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753771717451450_3d563538 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753772153471149_bb3f4b9c: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753772153471149_bb3f4b9c: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#8 文档 doc_1753772153471149_bb3f4b9c: RRF分数=0.015625
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772153471149_bb3f4b9c 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772153471149_bb3f4b9c 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753772153471149_bb3f4b9c 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753773808594713_9f04e292: RRF分数=0.015385
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753773808594713_9f04e292: RRF分数=0.015385
2025-08-01 00:40:00,289 rag.components.base DEBUG: 🔍 检查RRF排名#9 文档 doc_1753773808594713_9f04e292: RRF分数=0.015385
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773808594713_9f04e292 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773808594713_9f04e292 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,289 rag.components.base DEBUG: ✅ 文档 doc_1753773808594713_9f04e292 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774355021454_737f4550: RRF分数=0.015385
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774355021454_737f4550: RRF分数=0.015385
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#10 文档 doc_1753774355021454_737f4550: RRF分数=0.015385
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774355021454_737f4550 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774355021454_737f4550 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774355021454_737f4550 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753773397041292_ef323a87: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753773397041292_ef323a87: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#11 文档 doc_1753773397041292_ef323a87: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753773397041292_ef323a87 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753773397041292_ef323a87 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753773397041292_ef323a87 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753772711877329_0017cfb6: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753772711877329_0017cfb6: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#12 文档 doc_1753772711877329_0017cfb6: RRF分数=0.015152
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772711877329_0017cfb6 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772711877329_0017cfb6 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772711877329_0017cfb6 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774232624306_7461d5c4: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774232624306_7461d5c4: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#13 文档 doc_1753774232624306_7461d5c4: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774232624306_7461d5c4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774232624306_7461d5c4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774232624306_7461d5c4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753772108947991_2af0fb31: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753772108947991_2af0fb31: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#14 文档 doc_1753772108947991_2af0fb31: RRF分数=0.014925
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772108947991_2af0fb31 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772108947991_2af0fb31 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772108947991_2af0fb31 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774305801476_353e835e: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774305801476_353e835e: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#15 文档 doc_1753774305801476_353e835e: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774305801476_353e835e 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774305801476_353e835e 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753774305801476_353e835e 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753772201558300_78f279d7: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753772201558300_78f279d7: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#16 文档 doc_1753772201558300_78f279d7: RRF分数=0.014706
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772201558300_78f279d7 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772201558300_78f279d7 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: ✅ 文档 doc_1753772201558300_78f279d7 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753773395011840_09145fb4: RRF分数=0.014493
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753773395011840_09145fb4: RRF分数=0.014493
2025-08-01 00:40:00,290 rag.components.base DEBUG: 🔍 检查RRF排名#17 文档 doc_1753773395011840_09145fb4: RRF分数=0.014493
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753773395011840_09145fb4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753773395011840_09145fb4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753773395011840_09145fb4 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774882679977_b966d221: RRF分数=0.014493
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774882679977_b966d221: RRF分数=0.014493
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#18 文档 doc_1753774882679977_b966d221: RRF分数=0.014493
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774882679977_b966d221 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774882679977_b966d221 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774882679977_b966d221 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774298576185_03248202: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774298576185_03248202: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#19 文档 doc_1753774298576185_03248202: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774298576185_03248202 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774298576185_03248202 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774298576185_03248202 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774967406844_778bef9f: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774967406844_778bef9f: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: 🔍 检查RRF排名#20 文档 doc_1753774967406844_778bef9f: RRF分数=0.014286
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774967406844_778bef9f 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774967406844_778bef9f 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: ✅ 文档 doc_1753774967406844_778bef9f 通过RRF过滤，加入最终结果
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📊 RRF混合检索结果统计:
2025-08-01 00:40:00,291 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    📝 仅文本召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 仅向量召回: 10个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🔄 混合召回(文本+向量): 0个
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:40:00,291 rag.components.base DEBUG:    🎯 最终返回: 20个文档
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774243135649_843a1228
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774243135649_843a1228
2025-08-01 00:40:00,291 rag.components.base DEBUG: 📄 RRF排名#1 - 文档ID: doc_1753774243135649_843a1228
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅向量排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8503
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8503
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8503
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#2 - 文档ID: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016393 (仅文本排名: 1)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 25.8971
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 25.8971
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 25.8971
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Directo...
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Directo...
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Directo...
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,292 rag.components.base DEBUG: 📄 RRF排名#3 - 文档ID: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅文本排名: 2)
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,292 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,293 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,293 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,293 rag.components.base DEBUG: 📄 RRF排名#4 - 文档ID: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🔢 RRF分数: 0.016129 (仅向量排名: 2)
2025-08-01 00:40:00,293 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8435
2025-08-01 00:40:00,293 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8435
2025-08-01 00:40:00,293 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8435
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,293 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📝 内容: 该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
num...
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📝 内容: 该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
num...
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📝 内容: 该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
num...
2025-08-01 00:40:00,294 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,294 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,294 rag.components.base DEBUG: 📄 RRF排名#5 - 文档ID: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,294 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:40:00,294 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:40:00,294 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅文本排名: 3)
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,294 rag.components.base DEBUG:    📊 原始分数 - 文本: 21.8799
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📝 内容: 55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强...
2025-08-01 00:40:00,295 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,295 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,295 rag.components.base DEBUG: 📄 RRF排名#6 - 文档ID: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:40:00,295 rag.components.base DEBUG:    🔢 RRF分数: 0.015873 (仅向量排名: 3)
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8306
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8306
2025-08-01 00:40:00,295 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8306
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型|...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型|...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型|...
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717451450_3d563538
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717451450_3d563538
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#7 - 文档ID: doc_1753771717451450_3d563538
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅向量排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8219
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8219
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8219
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 该参数表示允许高于最大带宽的数值。
4. 单击添加按钮。
添加DSCP规则
1. 在网络QoS页面单击需要添加DSCP规则的QoS名称，打开网络QoS详情页面，如图5所示。
图5 网络QoS详情页面
...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 该参数表示允许高于最大带宽的数值。
4. 单击添加按钮。
添加DSCP规则
1. 在网络QoS页面单击需要添加DSCP规则的QoS名称，打开网络QoS详情页面，如图5所示。
图5 网络QoS详情页面
...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 该参数表示允许高于最大带宽的数值。
4. 单击添加按钮。
添加DSCP规则
1. 在网络QoS页面单击需要添加DSCP规则的QoS名称，打开网络QoS详情页面，如图5所示。
图5 网络QoS详情页面
...
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#8 - 文档ID: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🔢 RRF分数: 0.015625 (仅文本排名: 4)
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,296 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,296 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,296 rag.components.base DEBUG: 📄 RRF排名#9 - 文档ID: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅向量排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8218
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8218
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8218
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 如用户PLMN未配置对应一个CG Profile，SGSN选择默认属性的CG Profile。在“CG Profile配置”中，ID为0的CG Profile是默认属性，此记录自动生成，不可删除。
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 如用户PLMN未配置对应一个CG Profile，SGSN选择默认属性的CG Profile。在“CG Profile配置”中，ID为0的CG Profile是默认属性，此记录自动生成，不可删除。
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 如用户PLMN未配置对应一个CG Profile，SGSN选择默认属性的CG Profile。在“CG Profile配置”中，ID为0的CG Profile是默认属性，此记录自动生成，不可删除。
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774355021454_737f4550
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774355021454_737f4550
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#10 - 文档ID: doc_1753774355021454_737f4550
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015385 (仅文本排名: 5)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.6150
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 55902 SCTP动态偶联测量
子主题：
* C559020003 丢弃的SCTP包数
* C559020004 从IP收到的SCTP包数
* C559020005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#11 - 文档ID: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅文本排名: 6)
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.2493
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.2493
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.2493
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 网卡亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理网卡。
* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联...
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 网卡亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理网卡。
* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联...
2025-08-01 00:40:00,297 rag.components.base DEBUG:    📝 内容: 网卡亲和/反亲和策略| 该参数用于设置虚机实例化后成后生成的vNIC具体关联哪个物理网卡。
* 策略不开启设置为此选项，表示ZXUN uMAC对此没有特定的限制，虚机实例化后成后生成的vNIC具体关联...
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,297 rag.components.base DEBUG: 📄 RRF排名#12 - 文档ID: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.015152 (仅向量排名: 6)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8200
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8200
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8200
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 常量，固定为disable
<默认值> 无
缺省
命令的默认使能、去使能状态可以使用性能参数控制。性能参数的编号为67240117，性能参数定制为1，表示设备启动后，GR默认是使能的；若性能参数定制为...
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 常量，固定为disable
<默认值> 无
缺省
命令的默认使能、去使能状态可以使用性能参数控制。性能参数的编号为67240117，性能参数定制为1，表示设备启动后，GR默认是使能的；若性能参数定制为...
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 常量，固定为disable
<默认值> 无
缺省
命令的默认使能、去使能状态可以使用性能参数控制。性能参数的编号为67240117，性能参数定制为1，表示设备启动后，GR默认是使能的；若性能参数定制为...
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#13 - 文档ID: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅向量排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8185
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8185
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8185
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 网络中数据流量比较大的时候，检测报文“发包间隔”可以配置较大，以减少检测报文对网络带宽的占用。 当参数“是否启用链路切换功能”配置为开启时，该参数有效。
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 网络中数据流量比较大的时候，检测报文“发包间隔”可以配置较大，以减少检测报文对网络带宽的占用。 当参数“是否启用链路切换功能”配置为开启时，该参数有效。
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 网络中数据流量比较大的时候，检测报文“发包间隔”可以配置较大，以减少检测报文对网络带宽的占用。 当参数“是否启用链路切换功能”配置为开启时，该参数有效。
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#14 - 文档ID: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🔢 RRF分数: 0.014925 (仅文本排名: 7)
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,298 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,298 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774305801476_353e835e
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774305801476_353e835e
2025-08-01 00:40:00,298 rag.components.base DEBUG: 📄 RRF排名#15 - 文档ID: doc_1753774305801476_353e835e
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅文本排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 文本: 19.1380
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 55900 SCTP静态偶联测量
子主题：
* C559000003 丢弃的SCTP包数
* C559000004 从IP收到的SCTP包数
* C559000005 从IP收到的SCTP净荷数据字节...
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#16 - 文档ID: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014706 (仅向量排名: 8)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8176
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8176
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8176
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: UNTRUSTWLANQRY="YES",EXTENDBW="YES"
4. 配置AF能力。
ADD AFABILITY:ADJHOSTID=11
ADD AFABILITY:ADJHOSTID=12...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: UNTRUSTWLANQRY="YES",EXTENDBW="YES"
4. 配置AF能力。
ADD AFABILITY:ADJHOSTID=11
ADD AFABILITY:ADJHOSTID=12...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: UNTRUSTWLANQRY="YES",EXTENDBW="YES"
4. 配置AF能力。
ADD AFABILITY:ADJHOSTID=11
ADD AFABILITY:ADJHOSTID=12...
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,299 rag.components.base DEBUG: 📄 RRF排名#17 - 文档ID: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅向量排名: 9)
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8167
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8167
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8167
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 如果在TT3超时前，UE继续发送PDN Connectivity Request消息，MME给UE发送Detach Request消息，其中detach type为re-attach not requ...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 如果在TT3超时前，UE继续发送PDN Connectivity Request消息，MME给UE发送Detach Request消息，其中detach type为re-attach not requ...
2025-08-01 00:40:00,299 rag.components.base DEBUG:    📝 内容: 如果在TT3超时前，UE继续发送PDN Connectivity Request消息，MME给UE发送Detach Request消息，其中detach type为re-attach not requ...
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774882679977_b966d221
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774882679977_b966d221
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#18 - 文档ID: doc_1753774882679977_b966d221
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014493 (仅文本排名: 9)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.6825
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.6825
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.6825
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: QoS告警
子主题：
* 3305120200 交换机性能指标异常
* 3305120201 路由器性能指标异常
* 3305121027 主机性能指标异常
* 3305132040 虚拟机磁盘剩余容...
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: QoS告警
子主题：
* 3305120200 交换机性能指标异常
* 3305120201 路由器性能指标异常
* 3305121027 主机性能指标异常
* 3305132040 虚拟机磁盘剩余容...
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: QoS告警
子主题：
* 3305120200 交换机性能指标异常
* 3305120201 路由器性能指标异常
* 3305121027 主机性能指标异常
* 3305132040 虚拟机磁盘剩余容...
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774298576185_03248202
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774298576185_03248202
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#19 - 文档ID: doc_1753774298576185_03248202
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅向量排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8165
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8165
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 向量: 0.8165
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: vector
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: Role| 该参数用于配置用户的角色。国内运营商场景 ，ZXUN uMAC使用的角色，固定为ProjectAdmin。
Shared External Network for vRouters| Te...
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: Role| 该参数用于配置用户的角色。国内运营商场景 ，ZXUN uMAC使用的角色，固定为ProjectAdmin。
Shared External Network for vRouters| Te...
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📝 内容: Role| 该参数用于配置用户的角色。国内运营商场景 ，ZXUN uMAC使用的角色，固定为ProjectAdmin。
Shared External Network for vRouters| Te...
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,300 rag.components.base DEBUG: 📄 RRF排名#20 - 文档ID: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🔢 RRF分数: 0.014286 (仅文本排名: 10)
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.4572
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.4572
2025-08-01 00:40:00,300 rag.components.base DEBUG:    📊 原始分数 - 文本: 18.4572
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,300 rag.components.base DEBUG:    🏷️  召回方式: text
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📝 内容: 主机
子主题：
* P100020001 主机平均内存使用率
* P100020002 主机最大内存使用率
* P100020003 主机最小内存使用率
* P100020004 主机内存使用率标准差...
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📝 内容: 主机
子主题：
* P100020001 主机平均内存使用率
* P100020002 主机最大内存使用率
* P100020003 主机最小内存使用率
* P100020004 主机内存使用率标准差...
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📝 内容: 主机
子主题：
* P100020001 主机平均内存使用率
* P100020002 主机最大内存使用率
* P100020003 主机最小内存使用率
* P100020004 主机内存使用率标准差...
2025-08-01 00:40:00,301 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:40:00,301 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:40:00,301 rag.components.base INFO:    ✅ Small Chunk检索完成，获得 20 个结果
2025-08-01 00:40:00,301 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:40:00,301 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:40:00,301 rag.components.base INFO:    第二阶段: 扩展到Big Chunk并融合分数
2025-08-01 00:40:00,301 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:40:00,301 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:40:00,301 rag.components.base DEBUG: 🔄 开始扩展 20 个small chunks到big chunks
2025-08-01 00:40:00,301 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774243135649_843a1228
2025-08-01 00:40:00,301 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774243135649_843a1228
2025-08-01 00:40:00,301 rag.components.base DEBUG: 📋 处理small chunk #1: doc_1753774243135649_843a1228
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,301 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_3', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 5, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 84}
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_3', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 5, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 84}
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_3', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 5, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 84}
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,301 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,301 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,301 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,301 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,302 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #2: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016393
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/产品描述/topics/功能_资源管理.txt', 'file_type': '.txt', 'filename': '功能_资源管理.txt', 'chunk_id': 'fe19f1fbc543ad84_L0_1', 'parent_id': None, 'root_id': 'fe19f1fbc543ad84', 'chunk_index': 1, 'total_chunks': 53, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1826}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/产品描述/topics/功能_资源管理.txt', 'file_type': '.txt', 'filename': '功能_资源管理.txt', 'chunk_id': 'fe19f1fbc543ad84_L0_1', 'parent_id': None, 'root_id': 'fe19f1fbc543ad84', 'chunk_index': 1, 'total_chunks': 53, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1826}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/产品描述/topics/功能_资源管理.txt', 'file_type': '.txt', 'filename': '功能_资源管理.txt', 'chunk_id': 'fe19f1fbc543ad84_L0_1', 'parent_id': None, 'root_id': 'fe19f1fbc543ad84', 'chunk_index': 1, 'total_chunks': 53, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1826}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774880415369_738bb7e0 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774880415369_738bb7e0 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774880415369_738bb7e0 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #3: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772134858399_7b3c974d 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772134858399_7b3c974d 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772134858399_7b3c974d 本身就是big chunk，直接使用
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,302 rag.components.base DEBUG: 📋 处理small chunk #4: doc_1753773906544515_fd9a8b20
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    📊 分数: 0.016129
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Namf_Communication/zh-cn/mml/1104199.txt', 'file_type': '.txt', 'filename': '1104199.txt', 'chunk_id': '6c14410a816b7af1_L2_6', 'parent_id': '6c14410a816b7af1_L1_1', 'root_id': '6c14410a816b7af1', 'chunk_index': 11, 'total_chunks': 23, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 225}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Namf_Communication/zh-cn/mml/1104199.txt', 'file_type': '.txt', 'filename': '1104199.txt', 'chunk_id': '6c14410a816b7af1_L2_6', 'parent_id': '6c14410a816b7af1_L1_1', 'root_id': '6c14410a816b7af1', 'chunk_index': 11, 'total_chunks': 23, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 225}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Namf_Communication/zh-cn/mml/1104199.txt', 'file_type': '.txt', 'filename': '1104199.txt', 'chunk_id': '6c14410a816b7af1_L2_6', 'parent_id': '6c14410a816b7af1_L1_1', 'root_id': '6c14410a816b7af1', 'chunk_index': 11, 'total_chunks': 23, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 225}
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,302 rag.components.base DEBUG:    🔗 parent_id: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 6c14410a816b7af1_L1_1，当前最高分数: 0.016129
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 6c14410a816b7af1_L1_1，当前最高分数: 0.016129
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 6c14410a816b7af1_L1_1，当前最高分数: 0.016129
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #5: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP协议栈测量.txt', 'file_type': '.txt', 'filename': 'SCTP协议栈测量.txt', 'chunk_id': '8743af0d1c3f5391_L0_0', 'parent_id': None, 'root_id': '8743af0d1c3f5391', 'chunk_index': 0, 'total_chunks': 21, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2195}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,303 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774326357766_f9f18f12 本身就是big chunk，直接使用
2025-08-01 00:40:00,303 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774326357766_f9f18f12 本身就是big chunk，直接使用
2025-08-01 00:40:00,303 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774326357766_f9f18f12 本身就是big chunk，直接使用
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #6: doc_1753774243136175_d0e66cfb
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015873
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_4', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 6, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 242}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_4', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 6, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 242}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-76-05 IP协议栈/topics/1575361261094.txt', 'file_type': '.txt', 'filename': '1575361261094.txt', 'chunk_id': 'ec7c67ab6603c131_L2_4', 'parent_id': 'ec7c67ab6603c131_L1_0', 'root_id': 'ec7c67ab6603c131', 'chunk_index': 6, 'total_chunks': 10, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 242}
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,303 rag.components.base DEBUG:    🔗 parent_id: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,303 rag.components.base DEBUG:    ✅ 添加到big chunk组 ec7c67ab6603c131_L1_0，当前最高分数: 0.016393
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717451450_3d563538
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717451450_3d563538
2025-08-01 00:40:00,303 rag.components.base DEBUG: 📋 处理small chunk #7: doc_1753771717451450_3d563538
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,303 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/添加网络QOS.txt', 'file_type': '.txt', 'filename': '添加网络QOS.txt', 'chunk_id': 'f4dbfa4b9d7384eb_L2_6', 'parent_id': 'f4dbfa4b9d7384eb_L1_0', 'root_id': 'f4dbfa4b9d7384eb', 'chunk_index': 9, 'total_chunks': 12, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 148}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/添加网络QOS.txt', 'file_type': '.txt', 'filename': '添加网络QOS.txt', 'chunk_id': 'f4dbfa4b9d7384eb_L2_6', 'parent_id': 'f4dbfa4b9d7384eb_L1_0', 'root_id': 'f4dbfa4b9d7384eb', 'chunk_index': 9, 'total_chunks': 12, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 148}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/软件安装（手工部署）/topics/添加网络QOS.txt', 'file_type': '.txt', 'filename': '添加网络QOS.txt', 'chunk_id': 'f4dbfa4b9d7384eb_L2_6', 'parent_id': 'f4dbfa4b9d7384eb_L1_0', 'root_id': 'f4dbfa4b9d7384eb', 'chunk_index': 9, 'total_chunks': 12, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 148}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 f4dbfa4b9d7384eb_L1_0，当前最高分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 f4dbfa4b9d7384eb_L1_0，当前最高分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 f4dbfa4b9d7384eb_L1_0，当前最高分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #8: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015625
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,304 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772153471149_bb3f4b9c 本身就是big chunk，直接使用
2025-08-01 00:40:00,304 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772153471149_bb3f4b9c 本身就是big chunk，直接使用
2025-08-01 00:40:00,304 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772153471149_bb3f4b9c 本身就是big chunk，直接使用
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,304 rag.components.base DEBUG: 📋 处理small chunk #9: doc_1753773808594713_9f04e292
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,304 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/MMESGSN/zh-CN/tree/N_12624665.txt', 'file_type': '.txt', 'filename': 'N_12624665.txt', 'chunk_id': 'ac59ec69e4032af5_L2_4', 'parent_id': 'ac59ec69e4032af5_L1_0', 'root_id': 'ac59ec69e4032af5', 'chunk_index': 6, 'total_chunks': 9, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 98}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/MMESGSN/zh-CN/tree/N_12624665.txt', 'file_type': '.txt', 'filename': 'N_12624665.txt', 'chunk_id': 'ac59ec69e4032af5_L2_4', 'parent_id': 'ac59ec69e4032af5_L1_0', 'root_id': 'ac59ec69e4032af5', 'chunk_index': 6, 'total_chunks': 9, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 98}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/MMESGSN/zh-CN/tree/N_12624665.txt', 'file_type': '.txt', 'filename': 'N_12624665.txt', 'chunk_id': 'ac59ec69e4032af5_L2_4', 'parent_id': 'ac59ec69e4032af5_L1_0', 'root_id': 'ac59ec69e4032af5', 'chunk_index': 6, 'total_chunks': 9, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 98}
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    🔗 parent_id: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 创建新的big chunk组: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 ac59ec69e4032af5_L1_0，当前最高分数: 0.015385
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 ac59ec69e4032af5_L1_0，当前最高分数: 0.015385
2025-08-01 00:40:00,304 rag.components.base DEBUG:    ✅ 添加到big chunk组 ac59ec69e4032af5_L1_0，当前最高分数: 0.015385
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774355021454_737f4550
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774355021454_737f4550
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #10: doc_1753774355021454_737f4550
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015385
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/1625553920850.txt', 'file_type': '.txt', 'filename': '1625553920850.txt', 'chunk_id': '65404ccaf57a307b_L0_0', 'parent_id': None, 'root_id': '65404ccaf57a307b', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1923}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774355021454_737f4550 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774355021454_737f4550 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774355021454_737f4550 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #11: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（MANO）/topics/21-通用配置(AMF).txt', 'file_type': '.txt', 'filename': '21-通用配置(AMF).txt', 'chunk_id': '941c06b268171dd8_L0_4', 'parent_id': None, 'root_id': '941c06b268171dd8', 'chunk_index': 4, 'total_chunks': 130, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1994}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（MANO）/topics/21-通用配置(AMF).txt', 'file_type': '.txt', 'filename': '21-通用配置(AMF).txt', 'chunk_id': '941c06b268171dd8_L0_4', 'parent_id': None, 'root_id': '941c06b268171dd8', 'chunk_index': 4, 'total_chunks': 130, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1994}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（MANO）/topics/21-通用配置(AMF).txt', 'file_type': '.txt', 'filename': '21-通用配置(AMF).txt', 'chunk_id': '941c06b268171dd8_L0_4', 'parent_id': None, 'root_id': '941c06b268171dd8', 'chunk_index': 4, 'total_chunks': 130, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1994}
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773397041292_ef323a87 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773397041292_ef323a87 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753773397041292_ef323a87 本身就是big chunk，直接使用
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,305 rag.components.base DEBUG: 📋 处理small chunk #12: doc_1753772711877329_0017cfb6
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,305 rag.components.base DEBUG:    📊 分数: 0.015152
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/VPN/L3VPN配置命令/gr0A11000A.txt', 'file_type': '.txt', 'filename': 'gr0A11000A.txt', 'chunk_id': 'c24712d58cd4a132_L2_5', 'parent_id': 'c24712d58cd4a132_L1_0', 'root_id': 'c24712d58cd4a132', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 113}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/VPN/L3VPN配置命令/gr0A11000A.txt', 'file_type': '.txt', 'filename': 'gr0A11000A.txt', 'chunk_id': 'c24712d58cd4a132_L2_5', 'parent_id': 'c24712d58cd4a132_L1_0', 'root_id': 'c24712d58cd4a132', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 113}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/Rosng/VPN/L3VPN配置命令/gr0A11000A.txt', 'file_type': '.txt', 'filename': 'gr0A11000A.txt', 'chunk_id': 'c24712d58cd4a132_L2_5', 'parent_id': 'c24712d58cd4a132_L1_0', 'root_id': 'c24712d58cd4a132', 'chunk_index': 8, 'total_chunks': 14, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 113}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 c24712d58cd4a132_L1_0，当前最高分数: 0.015152
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 c24712d58cd4a132_L1_0，当前最高分数: 0.015152
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 c24712d58cd4a132_L1_0，当前最高分数: 0.015152
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #13: doc_1753774232624306_7461d5c4
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Commons_SIG/zh-cn/mml/1251000.txt', 'file_type': '.txt', 'filename': '1251000.txt', 'chunk_id': 'd83bdf8001ac6b43_L2_67', 'parent_id': 'd83bdf8001ac6b43_L1_10', 'root_id': 'd83bdf8001ac6b43', 'chunk_index': 87, 'total_chunks': 115, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 76}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Commons_SIG/zh-cn/mml/1251000.txt', 'file_type': '.txt', 'filename': '1251000.txt', 'chunk_id': 'd83bdf8001ac6b43_L2_67', 'parent_id': 'd83bdf8001ac6b43_L1_10', 'root_id': 'd83bdf8001ac6b43', 'chunk_index': 87, 'total_chunks': 115, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 76}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/Commons_SIG/zh-cn/mml/1251000.txt', 'file_type': '.txt', 'filename': '1251000.txt', 'chunk_id': 'd83bdf8001ac6b43_L2_67', 'parent_id': 'd83bdf8001ac6b43_L1_10', 'root_id': 'd83bdf8001ac6b43', 'chunk_index': 87, 'total_chunks': 115, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 76}
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    🔗 parent_id: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 创建新的big chunk组: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 d83bdf8001ac6b43_L1_10，当前最高分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 d83bdf8001ac6b43_L1_10，当前最高分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    ✅ 添加到big chunk组 d83bdf8001ac6b43_L1_10，当前最高分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,306 rag.components.base DEBUG: 📋 处理small chunk #14: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,306 rag.components.base DEBUG:    📊 分数: 0.014925
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772108947991_2af0fb31 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772108947991_2af0fb31 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753772108947991_2af0fb31 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774305801476_353e835e
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774305801476_353e835e
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #15: doc_1753774305801476_353e835e
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/性能计数器参考（平台）/topics/SCTP偶联测量.txt', 'file_type': '.txt', 'filename': 'SCTP偶联测量.txt', 'chunk_id': 'd3b84376caf4674a_L0_0', 'parent_id': None, 'root_id': 'd3b84376caf4674a', 'chunk_index': 0, 'total_chunks': 22, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 2168}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774305801476_353e835e 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774305801476_353e835e 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774305801476_353e835e 本身就是big chunk，直接使用
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,307 rag.components.base DEBUG: 📋 处理small chunk #16: doc_1753772201558300_78f279d7
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    📊 分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/规则配置/topics/1567134344743（重用1）.txt', 'file_type': '.txt', 'filename': '1567134344743（重用1）.txt', 'chunk_id': '393a6e597f4ddaeb_L2_30', 'parent_id': '393a6e597f4ddaeb_L1_6', 'root_id': '393a6e597f4ddaeb', 'chunk_index': 71, 'total_chunks': 236, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 237}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/规则配置/topics/1567134344743（重用1）.txt', 'file_type': '.txt', 'filename': '1567134344743（重用1）.txt', 'chunk_id': '393a6e597f4ddaeb_L2_30', 'parent_id': '393a6e597f4ddaeb_L1_6', 'root_id': '393a6e597f4ddaeb', 'chunk_index': 71, 'total_chunks': 236, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 237}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/rcp/规则配置/topics/1567134344743（重用1）.txt', 'file_type': '.txt', 'filename': '1567134344743（重用1）.txt', 'chunk_id': '393a6e597f4ddaeb_L2_30', 'parent_id': '393a6e597f4ddaeb_L1_6', 'root_id': '393a6e597f4ddaeb', 'chunk_index': 71, 'total_chunks': 236, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 237}
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    🔗 parent_id: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 添加到big chunk组 393a6e597f4ddaeb_L1_6，当前最高分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 添加到big chunk组 393a6e597f4ddaeb_L1_6，当前最高分数: 0.014706
2025-08-01 00:40:00,307 rag.components.base DEBUG:    ✅ 添加到big chunk组 393a6e597f4ddaeb_L1_6，当前最高分数: 0.014706
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #17: doc_1753773395011840_09145fb4
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-20 拥塞及过负荷控制/topics/1604566644449.txt', 'file_type': '.txt', 'filename': '1604566644449.txt', 'chunk_id': '19932e691a02634b_L2_4', 'parent_id': '19932e691a02634b_L1_0', 'root_id': '19932e691a02634b', 'chunk_index': 21, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 159}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-20 拥塞及过负荷控制/topics/1604566644449.txt', 'file_type': '.txt', 'filename': '1604566644449.txt', 'chunk_id': '19932e691a02634b_L2_4', 'parent_id': '19932e691a02634b_L1_0', 'root_id': '19932e691a02634b', 'chunk_index': 21, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 159}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/ZUF-78-20 拥塞及过负荷控制/topics/1604566644449.txt', 'file_type': '.txt', 'filename': '1604566644449.txt', 'chunk_id': '19932e691a02634b_L2_4', 'parent_id': '19932e691a02634b_L1_0', 'root_id': '19932e691a02634b', 'chunk_index': 21, 'total_chunks': 109, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 159}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 19932e691a02634b_L1_0
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 添加到big chunk组 19932e691a02634b_L1_0，当前最高分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 添加到big chunk组 19932e691a02634b_L1_0，当前最高分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    ✅ 添加到big chunk组 19932e691a02634b_L1_0，当前最高分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774882679977_b966d221
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774882679977_b966d221
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #18: doc_1753774882679977_b966d221
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014493
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/告警与通知处理/topics/1571471437867.txt', 'file_type': '.txt', 'filename': '1571471437867.txt', 'chunk_id': '4a8c6d1bcf9ace35_L0_0', 'parent_id': None, 'root_id': '4a8c6d1bcf9ace35', 'chunk_index': 0, 'total_chunks': 43, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1802}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/告警与通知处理/topics/1571471437867.txt', 'file_type': '.txt', 'filename': '1571471437867.txt', 'chunk_id': '4a8c6d1bcf9ace35_L0_0', 'parent_id': None, 'root_id': '4a8c6d1bcf9ace35', 'chunk_index': 0, 'total_chunks': 43, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1802}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/告警与通知处理/topics/1571471437867.txt', 'file_type': '.txt', 'filename': '1571471437867.txt', 'chunk_id': '4a8c6d1bcf9ace35_L0_0', 'parent_id': None, 'root_id': '4a8c6d1bcf9ace35', 'chunk_index': 0, 'total_chunks': 43, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1802}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,308 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774882679977_b966d221 本身就是big chunk，直接使用
2025-08-01 00:40:00,308 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774882679977_b966d221 本身就是big chunk，直接使用
2025-08-01 00:40:00,308 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774882679977_b966d221 本身就是big chunk，直接使用
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774298576185_03248202
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774298576185_03248202
2025-08-01 00:40:00,308 rag.components.base DEBUG: 📋 处理small chunk #19: doc_1753774298576185_03248202
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,308 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（AIC）-SDN/topics/48-Tenant and Users.txt', 'file_type': '.txt', 'filename': '48-Tenant and Users.txt', 'chunk_id': '195c223891dbfab2_L2_16', 'parent_id': '195c223891dbfab2_L1_2', 'root_id': '195c223891dbfab2', 'chunk_index': 22, 'total_chunks': 34, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 178}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（AIC）-SDN/topics/48-Tenant and Users.txt', 'file_type': '.txt', 'filename': '48-Tenant and Users.txt', 'chunk_id': '195c223891dbfab2_L2_16', 'parent_id': '195c223891dbfab2_L1_2', 'root_id': '195c223891dbfab2', 'chunk_index': 22, 'total_chunks': 34, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 178}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/umac/软件安装（AIC）-SDN/topics/48-Tenant and Users.txt', 'file_type': '.txt', 'filename': '48-Tenant and Users.txt', 'chunk_id': '195c223891dbfab2_L2_16', 'parent_id': '195c223891dbfab2_L1_2', 'root_id': '195c223891dbfab2', 'chunk_index': 22, 'total_chunks': 34, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 2, 'text_length': 178}
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,308 rag.components.base DEBUG:    🔗 parent_id: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 创建新的big chunk组: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 添加到big chunk组 195c223891dbfab2_L1_2，当前最高分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 添加到big chunk组 195c223891dbfab2_L1_2，当前最高分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG:    ✅ 添加到big chunk组 195c223891dbfab2_L1_2，当前最高分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📋 处理small chunk #20: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📊 分数: 0.014286
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能指标参考/topics/leandoc_1.txt', 'file_type': '.txt', 'filename': 'leandoc_1.txt', 'chunk_id': 'dfd0409f075314c9_L0_0', 'parent_id': None, 'root_id': 'dfd0409f075314c9', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1672}
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能指标参考/topics/leandoc_1.txt', 'file_type': '.txt', 'filename': 'leandoc_1.txt', 'chunk_id': 'dfd0409f075314c9_L0_0', 'parent_id': None, 'root_id': 'dfd0409f075314c9', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1672}
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🏷️  元数据: {'source': '/Users/caixiaomeng/Projects/Python/EasyRAG/data/format_data_with_img/director/性能指标参考/topics/leandoc_1.txt', 'file_type': '.txt', 'filename': 'leandoc_1.txt', 'chunk_id': 'dfd0409f075314c9_L0_0', 'parent_id': None, 'root_id': 'dfd0409f075314c9', 'chunk_index': 0, 'total_chunks': 20, 'chunk_size': [1536, 512, 128], 'split_method': 'hierarchical', 'chunk_level': 0, 'text_length': 1672}
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,309 rag.components.base DEBUG:    🔗 parent_id: None
2025-08-01 00:40:00,309 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774967406844_778bef9f 本身就是big chunk，直接使用
2025-08-01 00:40:00,309 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774967406844_778bef9f 本身就是big chunk，直接使用
2025-08-01 00:40:00,309 rag.components.base DEBUG: ✅ Level 0 chunk doc_1753774967406844_778bef9f 本身就是big chunk，直接使用
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:40:00,309 rag.components.base DEBUG: 📊 扩展统计: 创建了 19 个big chunk组
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ec7c67ab6603c131_L1_0: 2 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ec7c67ab6603c131_L1_0: 2 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ec7c67ab6603c131_L1_0: 2 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774880415369_738bb7e0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774880415369_738bb7e0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774880415369_738bb7e0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772134858399_7b3c974d: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772134858399_7b3c974d: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772134858399_7b3c974d: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 6c14410a816b7af1_L1_1: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 6c14410a816b7af1_L1_1: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 6c14410a816b7af1_L1_1: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774326357766_f9f18f12: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774326357766_f9f18f12: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774326357766_f9f18f12: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 f4dbfa4b9d7384eb_L1_0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 f4dbfa4b9d7384eb_L1_0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 f4dbfa4b9d7384eb_L1_0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772153471149_bb3f4b9c: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772153471149_bb3f4b9c: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772153471149_bb3f4b9c: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ac59ec69e4032af5_L1_0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ac59ec69e4032af5_L1_0: 1 个small chunks
2025-08-01 00:40:00,309 rag.components.base DEBUG:    📦 Big chunk组 ac59ec69e4032af5_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774355021454_737f4550: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774355021454_737f4550: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774355021454_737f4550: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773397041292_ef323a87: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773397041292_ef323a87: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753773397041292_ef323a87: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 c24712d58cd4a132_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 c24712d58cd4a132_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 c24712d58cd4a132_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 d83bdf8001ac6b43_L1_10: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 d83bdf8001ac6b43_L1_10: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 d83bdf8001ac6b43_L1_10: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772108947991_2af0fb31: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772108947991_2af0fb31: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753772108947991_2af0fb31: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774305801476_353e835e: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774305801476_353e835e: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774305801476_353e835e: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 393a6e597f4ddaeb_L1_6: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 393a6e597f4ddaeb_L1_6: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 393a6e597f4ddaeb_L1_6: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 19932e691a02634b_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 19932e691a02634b_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 19932e691a02634b_L1_0: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774882679977_b966d221: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774882679977_b966d221: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774882679977_b966d221: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 195c223891dbfab2_L1_2: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 195c223891dbfab2_L1_2: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 195c223891dbfab2_L1_2: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774967406844_778bef9f: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774967406844_778bef9f: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG:    📦 Big chunk组 doc_1753774967406844_778bef9f: 1 个small chunks
2025-08-01 00:40:00,310 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,310 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,310 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ec7c67ab6603c131_L1_0
2025-08-01 00:40:00,314 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,314 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,314 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,314 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:40:00,314 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:40:00,314 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.004s]
2025-08-01 00:40:00,315 rag.components.base DEBUG:    ✅ 成功获取big chunk ec7c67ab6603c131_L1_0，包含 2 个small chunks
2025-08-01 00:40:00,315 rag.components.base DEBUG:    ✅ 成功获取big chunk ec7c67ab6603c131_L1_0，包含 2 个small chunks
2025-08-01 00:40:00,315 rag.components.base DEBUG:    ✅ 成功获取big chunk ec7c67ab6603c131_L1_0，包含 2 个small chunks
2025-08-01 00:40:00,315 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016393, 平均: 0.016133
2025-08-01 00:40:00,315 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016393, 平均: 0.016133
2025-08-01 00:40:00,315 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016393, 平均: 0.016133
2025-08-01 00:40:00,315 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,315 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,315 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774880415369_738bb7e0
2025-08-01 00:40:00,317 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,317 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,317 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,317 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,317 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,317 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,317 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774880415369_738bb7e0 的内容，该组将被丢弃
2025-08-01 00:40:00,317 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774880415369_738bb7e0 的内容，该组将被丢弃
2025-08-01 00:40:00,317 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774880415369_738bb7e0 的内容，该组将被丢弃
2025-08-01 00:40:00,317 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774880415369_738bb7e0 (分数: 0.016393)
2025-08-01 00:40:00,317 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774880415369_738bb7e0 (分数: 0.016393)
2025-08-01 00:40:00,317 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774880415369_738bb7e0 (分数: 0.016393)
2025-08-01 00:40:00,317 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,317 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,317 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772134858399_7b3c974d
2025-08-01 00:40:00,319 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,319 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,319 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,319 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,319 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,319 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,319 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772134858399_7b3c974d 的内容，该组将被丢弃
2025-08-01 00:40:00,319 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772134858399_7b3c974d 的内容，该组将被丢弃
2025-08-01 00:40:00,319 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772134858399_7b3c974d 的内容，该组将被丢弃
2025-08-01 00:40:00,319 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772134858399_7b3c974d (分数: 0.016129)
2025-08-01 00:40:00,319 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772134858399_7b3c974d (分数: 0.016129)
2025-08-01 00:40:00,319 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772134858399_7b3c974d (分数: 0.016129)
2025-08-01 00:40:00,319 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,319 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,319 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 6c14410a816b7af1_L1_1
2025-08-01 00:40:00,324 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,324 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,324 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,324 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,324 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,324 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,324 rag.components.base DEBUG:    ✅ 成功获取big chunk 6c14410a816b7af1_L1_1，包含 1 个small chunks
2025-08-01 00:40:00,324 rag.components.base DEBUG:    ✅ 成功获取big chunk 6c14410a816b7af1_L1_1，包含 1 个small chunks
2025-08-01 00:40:00,324 rag.components.base DEBUG:    ✅ 成功获取big chunk 6c14410a816b7af1_L1_1，包含 1 个small chunks
2025-08-01 00:40:00,324 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016129, 平均: 0.016129
2025-08-01 00:40:00,324 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016129, 平均: 0.016129
2025-08-01 00:40:00,324 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.016129, 平均: 0.016129
2025-08-01 00:40:00,324 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,324 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,324 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774326357766_f9f18f12
2025-08-01 00:40:00,326 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,326 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,326 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,326 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,326 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,326 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,326 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774326357766_f9f18f12 的内容，该组将被丢弃
2025-08-01 00:40:00,326 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774326357766_f9f18f12 的内容，该组将被丢弃
2025-08-01 00:40:00,326 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774326357766_f9f18f12 的内容，该组将被丢弃
2025-08-01 00:40:00,326 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774326357766_f9f18f12 (分数: 0.015873)
2025-08-01 00:40:00,326 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774326357766_f9f18f12 (分数: 0.015873)
2025-08-01 00:40:00,326 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774326357766_f9f18f12 (分数: 0.015873)
2025-08-01 00:40:00,326 rag.components.base DEBUG: 🔍 正在获取big chunk内容: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,326 rag.components.base DEBUG: 🔍 正在获取big chunk内容: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,326 rag.components.base DEBUG: 🔍 正在获取big chunk内容: f4dbfa4b9d7384eb_L1_0
2025-08-01 00:40:00,328 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,328 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,328 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,329 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,329 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,329 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,329 rag.components.base DEBUG:    ✅ 成功获取big chunk f4dbfa4b9d7384eb_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,329 rag.components.base DEBUG:    ✅ 成功获取big chunk f4dbfa4b9d7384eb_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,329 rag.components.base DEBUG:    ✅ 成功获取big chunk f4dbfa4b9d7384eb_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,329 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015625
2025-08-01 00:40:00,329 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015625
2025-08-01 00:40:00,329 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015625, 平均: 0.015625
2025-08-01 00:40:00,329 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,329 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,329 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772153471149_bb3f4b9c
2025-08-01 00:40:00,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,330 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,331 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,331 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,331 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,331 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772153471149_bb3f4b9c 的内容，该组将被丢弃
2025-08-01 00:40:00,331 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772153471149_bb3f4b9c 的内容，该组将被丢弃
2025-08-01 00:40:00,331 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772153471149_bb3f4b9c 的内容，该组将被丢弃
2025-08-01 00:40:00,331 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772153471149_bb3f4b9c (分数: 0.015625)
2025-08-01 00:40:00,331 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772153471149_bb3f4b9c (分数: 0.015625)
2025-08-01 00:40:00,331 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772153471149_bb3f4b9c (分数: 0.015625)
2025-08-01 00:40:00,331 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,331 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,331 rag.components.base DEBUG: 🔍 正在获取big chunk内容: ac59ec69e4032af5_L1_0
2025-08-01 00:40:00,336 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,336 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,336 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,336 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,336 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,336 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.005s]
2025-08-01 00:40:00,336 rag.components.base DEBUG:    ✅ 成功获取big chunk ac59ec69e4032af5_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,336 rag.components.base DEBUG:    ✅ 成功获取big chunk ac59ec69e4032af5_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,336 rag.components.base DEBUG:    ✅ 成功获取big chunk ac59ec69e4032af5_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,336 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015385, 平均: 0.015385
2025-08-01 00:40:00,336 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015385, 平均: 0.015385
2025-08-01 00:40:00,336 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015385, 平均: 0.015385
2025-08-01 00:40:00,336 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774355021454_737f4550
2025-08-01 00:40:00,336 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774355021454_737f4550
2025-08-01 00:40:00,336 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774355021454_737f4550
2025-08-01 00:40:00,338 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,338 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,338 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,338 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,338 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,338 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,338 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774355021454_737f4550 的内容，该组将被丢弃
2025-08-01 00:40:00,338 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774355021454_737f4550 的内容，该组将被丢弃
2025-08-01 00:40:00,338 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774355021454_737f4550 的内容，该组将被丢弃
2025-08-01 00:40:00,338 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774355021454_737f4550 (分数: 0.015385)
2025-08-01 00:40:00,338 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774355021454_737f4550 (分数: 0.015385)
2025-08-01 00:40:00,338 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774355021454_737f4550 (分数: 0.015385)
2025-08-01 00:40:00,338 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,338 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,338 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753773397041292_ef323a87
2025-08-01 00:40:00,340 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,340 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,340 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,340 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,340 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,340 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,340 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773397041292_ef323a87 的内容，该组将被丢弃
2025-08-01 00:40:00,340 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773397041292_ef323a87 的内容，该组将被丢弃
2025-08-01 00:40:00,340 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753773397041292_ef323a87 的内容，该组将被丢弃
2025-08-01 00:40:00,341 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773397041292_ef323a87 (分数: 0.015152)
2025-08-01 00:40:00,341 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773397041292_ef323a87 (分数: 0.015152)
2025-08-01 00:40:00,341 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753773397041292_ef323a87 (分数: 0.015152)
2025-08-01 00:40:00,341 rag.components.base DEBUG: 🔍 正在获取big chunk内容: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,341 rag.components.base DEBUG: 🔍 正在获取big chunk内容: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,341 rag.components.base DEBUG: 🔍 正在获取big chunk内容: c24712d58cd4a132_L1_0
2025-08-01 00:40:00,343 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,343 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,343 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,344 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,344 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,344 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,344 rag.components.base DEBUG:    ✅ 成功获取big chunk c24712d58cd4a132_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,344 rag.components.base DEBUG:    ✅ 成功获取big chunk c24712d58cd4a132_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,344 rag.components.base DEBUG:    ✅ 成功获取big chunk c24712d58cd4a132_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,344 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015152, 平均: 0.015152
2025-08-01 00:40:00,344 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015152, 平均: 0.015152
2025-08-01 00:40:00,344 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.015152, 平均: 0.015152
2025-08-01 00:40:00,344 rag.components.base DEBUG: 🔍 正在获取big chunk内容: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,344 rag.components.base DEBUG: 🔍 正在获取big chunk内容: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,344 rag.components.base DEBUG: 🔍 正在获取big chunk内容: d83bdf8001ac6b43_L1_10
2025-08-01 00:40:00,347 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,347 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,347 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,347 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,347 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,347 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.003s]
2025-08-01 00:40:00,347 rag.components.base DEBUG:    ✅ 成功获取big chunk d83bdf8001ac6b43_L1_10，包含 1 个small chunks
2025-08-01 00:40:00,347 rag.components.base DEBUG:    ✅ 成功获取big chunk d83bdf8001ac6b43_L1_10，包含 1 个small chunks
2025-08-01 00:40:00,347 rag.components.base DEBUG:    ✅ 成功获取big chunk d83bdf8001ac6b43_L1_10，包含 1 个small chunks
2025-08-01 00:40:00,347 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014925, 平均: 0.014925
2025-08-01 00:40:00,347 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014925, 平均: 0.014925
2025-08-01 00:40:00,347 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014925, 平均: 0.014925
2025-08-01 00:40:00,347 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,347 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,347 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753772108947991_2af0fb31
2025-08-01 00:40:00,348 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,348 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,348 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,349 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,349 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,349 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,349 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772108947991_2af0fb31 的内容，该组将被丢弃
2025-08-01 00:40:00,349 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772108947991_2af0fb31 的内容，该组将被丢弃
2025-08-01 00:40:00,349 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753772108947991_2af0fb31 的内容，该组将被丢弃
2025-08-01 00:40:00,349 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772108947991_2af0fb31 (分数: 0.014925)
2025-08-01 00:40:00,349 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772108947991_2af0fb31 (分数: 0.014925)
2025-08-01 00:40:00,349 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753772108947991_2af0fb31 (分数: 0.014925)
2025-08-01 00:40:00,349 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774305801476_353e835e
2025-08-01 00:40:00,349 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774305801476_353e835e
2025-08-01 00:40:00,349 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774305801476_353e835e
2025-08-01 00:40:00,350 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,350 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,350 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,350 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,350 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,350 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.001s]
2025-08-01 00:40:00,350 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774305801476_353e835e 的内容，该组将被丢弃
2025-08-01 00:40:00,350 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774305801476_353e835e 的内容，该组将被丢弃
2025-08-01 00:40:00,350 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774305801476_353e835e 的内容，该组将被丢弃
2025-08-01 00:40:00,350 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774305801476_353e835e (分数: 0.014706)
2025-08-01 00:40:00,350 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774305801476_353e835e (分数: 0.014706)
2025-08-01 00:40:00,350 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774305801476_353e835e (分数: 0.014706)
2025-08-01 00:40:00,350 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,350 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,350 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 393a6e597f4ddaeb_L1_6
2025-08-01 00:40:00,352 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,352 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,352 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,353 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,353 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,353 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,353 rag.components.base DEBUG:    ✅ 成功获取big chunk 393a6e597f4ddaeb_L1_6，包含 1 个small chunks
2025-08-01 00:40:00,353 rag.components.base DEBUG:    ✅ 成功获取big chunk 393a6e597f4ddaeb_L1_6，包含 1 个small chunks
2025-08-01 00:40:00,353 rag.components.base DEBUG:    ✅ 成功获取big chunk 393a6e597f4ddaeb_L1_6，包含 1 个small chunks
2025-08-01 00:40:00,353 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014706, 平均: 0.014706
2025-08-01 00:40:00,353 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014706, 平均: 0.014706
2025-08-01 00:40:00,353 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014706, 平均: 0.014706
2025-08-01 00:40:00,353 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 19932e691a02634b_L1_0
2025-08-01 00:40:00,353 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 19932e691a02634b_L1_0
2025-08-01 00:40:00,353 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 19932e691a02634b_L1_0
2025-08-01 00:40:00,355 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,355 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,355 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,355 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,355 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,355 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,355 rag.components.base DEBUG:    ✅ 成功获取big chunk 19932e691a02634b_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,355 rag.components.base DEBUG:    ✅ 成功获取big chunk 19932e691a02634b_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,355 rag.components.base DEBUG:    ✅ 成功获取big chunk 19932e691a02634b_L1_0，包含 1 个small chunks
2025-08-01 00:40:00,355 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:40:00,355 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:40:00,355 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014493, 平均: 0.014493
2025-08-01 00:40:00,355 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774882679977_b966d221
2025-08-01 00:40:00,355 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774882679977_b966d221
2025-08-01 00:40:00,355 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774882679977_b966d221
2025-08-01 00:40:00,357 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,357 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,357 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,357 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,357 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,357 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,357 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774882679977_b966d221 的内容，该组将被丢弃
2025-08-01 00:40:00,357 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774882679977_b966d221 的内容，该组将被丢弃
2025-08-01 00:40:00,357 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774882679977_b966d221 的内容，该组将被丢弃
2025-08-01 00:40:00,357 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774882679977_b966d221 (分数: 0.014493)
2025-08-01 00:40:00,357 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774882679977_b966d221 (分数: 0.014493)
2025-08-01 00:40:00,357 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774882679977_b966d221 (分数: 0.014493)
2025-08-01 00:40:00,357 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,357 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,357 rag.components.base DEBUG: 🔍 正在获取big chunk内容: 195c223891dbfab2_L1_2
2025-08-01 00:40:00,360 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,360 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,360 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,360 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,360 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,360 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,360 rag.components.base DEBUG:    ✅ 成功获取big chunk 195c223891dbfab2_L1_2，包含 1 个small chunks
2025-08-01 00:40:00,360 rag.components.base DEBUG:    ✅ 成功获取big chunk 195c223891dbfab2_L1_2，包含 1 个small chunks
2025-08-01 00:40:00,360 rag.components.base DEBUG:    ✅ 成功获取big chunk 195c223891dbfab2_L1_2，包含 1 个small chunks
2025-08-01 00:40:00,360 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:40:00,360 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:40:00,360 rag.components.base DEBUG:    📊 分数统计 - 最高: 0.014286, 平均: 0.014286
2025-08-01 00:40:00,360 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,360 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,360 rag.components.base DEBUG: 🔍 正在获取big chunk内容: doc_1753774967406844_778bef9f
2025-08-01 00:40:00,362 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,362 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,362 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_performance_docs/_search HTTP/1.1" 200 None
2025-08-01 00:40:00,362 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,362 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,362 elastic_transport.transport INFO: POST https://localhost:9200/vector_performance_docs/_search [status:200 duration:0.002s]
2025-08-01 00:40:00,362 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774967406844_778bef9f 的内容，该组将被丢弃
2025-08-01 00:40:00,362 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774967406844_778bef9f 的内容，该组将被丢弃
2025-08-01 00:40:00,362 rag.components.base WARNING:    ❌ 无法获取big chunk doc_1753774967406844_778bef9f 的内容，该组将被丢弃
2025-08-01 00:40:00,362 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774967406844_778bef9f (分数: 0.014286)
2025-08-01 00:40:00,362 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774967406844_778bef9f (分数: 0.014286)
2025-08-01 00:40:00,362 rag.components.base WARNING:       🗑️  丢弃small chunk: doc_1753774967406844_778bef9f (分数: 0.014286)
2025-08-01 00:40:00,362 rag.components.base DEBUG: 🎯 扩展完成: 9/19 个big chunk组成功获取内容
2025-08-01 00:40:00,362 rag.components.base DEBUG: 🎯 扩展完成: 9/19 个big chunk组成功获取内容
2025-08-01 00:40:00,362 rag.components.base DEBUG: 🎯 扩展完成: 9/19 个big chunk组成功获取内容
2025-08-01 00:40:00,362 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:40:00,362 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:40:00,362 rag.components.base INFO:    ✅ 扩展完成，获得 19 个Big Chunk
2025-08-01 00:40:00,362 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:40:00,362 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:40:00,362 rag.components.base INFO:    第三阶段: 分数融合和重排序
2025-08-01 00:40:00,362 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:40:00,362 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:40:00,362 rag.components.base INFO: 🎯 Small2Big检索完成，最终返回 10 个结果
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #1 ID: ec7c67ab6603c131_L1_0, 分数: 0.0164, 来源Small Chunk数: 2
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #1 ID: ec7c67ab6603c131_L1_0, 分数: 0.0164, 来源Small Chunk数: 2
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #1 ID: ec7c67ab6603c131_L1_0, 分数: 0.0164, 来源Small Chunk数: 2
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #2 ID: doc_1753774880415369_738bb7e0, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #2 ID: doc_1753774880415369_738bb7e0, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:40:00,362 rag.components.base DEBUG:    #2 ID: doc_1753774880415369_738bb7e0, 分数: 0.0164, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #3 ID: doc_1753772134858399_7b3c974d, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #3 ID: doc_1753772134858399_7b3c974d, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #3 ID: doc_1753772134858399_7b3c974d, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #4 ID: 6c14410a816b7af1_L1_1, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #4 ID: 6c14410a816b7af1_L1_1, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #4 ID: 6c14410a816b7af1_L1_1, 分数: 0.0161, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #5 ID: doc_1753774326357766_f9f18f12, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #5 ID: doc_1753774326357766_f9f18f12, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base DEBUG:    #5 ID: doc_1753774326357766_f9f18f12, 分数: 0.0159, 来源Small Chunk数: 1
2025-08-01 00:40:00,363 rag.components.base INFO:    ✅ 查询 2 返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base INFO:    ✅ 查询 2 返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base INFO:    ✅ 查询 2 返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base INFO: 🎯 多查询检索完成，去重后返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base INFO: 🎯 多查询检索完成，去重后返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base INFO: 🎯 多查询检索完成，去重后返回 10 个结果
2025-08-01 00:40:00,363 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:40:00,363 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:40:00,363 rag.components.base DEBUG: 组件 es_retriever 处理完成
2025-08-01 00:40:00,363 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:40:00,363 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:40:00,363 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 开始处理数据
2025-08-01 00:40:00,364 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:40:00,364 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:40:00,364 urllib3.connectionpool DEBUG: Starting new HTTP connection (1): 127.0.0.1:7890
2025-08-01 00:40:00,825 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 24648
2025-08-01 00:40:00,825 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 24648
2025-08-01 00:40:00,825 urllib3.connectionpool DEBUG: http://127.0.0.1:7890 "POST http://workspace.featurize.cn:49857/v1/rerank HTTP/1.1" 200 24648
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 重排完成: 10 -> 10
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:40:00,868 rag.components.reranker.base_reranker DEBUG: 组件 openai_reranker 处理完成
2025-08-01 00:40:00,869 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档4 - 文档4:
TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Director还支持多数据中心的主机集群策略统一管理，支持的集群策略包括DPM统一管理和DRS统一管理。DPM策略包括DPM启用配置，DPM策略配置。
DRS(Dynamic Resource Scheduling, 动态资源调度)策略包括DRS启用配置，DRS策略配置。
* 主机管理
主机是运行了虚拟化软件的物理服务器，用以运行虚拟机。主机为虚拟机提供CPU(Central Processing Unit, 中央处理器)和内存资源，以及图形处理器、USB(Universal Serial Bus, 通用串行总线)设备、网络连接和存储访问等能力。同一台主机可以同时运行多台虚拟机。
主机管理包括将主机加入主机集群、从主机集群中移除主机、主机信息查询等。
* 虚拟机管理
虚拟机是在物理服务器上划分出来的一台或者多台虚拟化的计算机系统。
虚拟机管理的功能包括查询虚拟机列表、查看虚拟机详情、虚拟机操作（启动、停止、暂停、备份、快照、资源规格调整）。
* 裸金属管理
TECS Director提供了将物理机作为计算资源，类似虚拟机一样，直接分配给用户使用的管理功能。系统支持物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。
* 亲和组、反亲和组管理
TECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。
* 块存储管理
存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。
* 文件存储管理
TECS Director提供文件存储（共享文件）管理功能，支持文件存储（共享文件）从创建到删除的整个生命周期管理。
* 对象存储管理
TECS Director提供对象存储管理功能，支持对象存储从创建到删除的整个生命周期管理。
* 网络管理
* 物理网络设备状态监控，包括中兴通讯自研及各厂商主流交换机、路由器设备。
* 云网络管理：支持虚拟网络、子网、虚拟路由、端口、安全组、虚拟防火墙、虚拟负载均衡等网络资源的生命周期管理，包括创建、删除、查看等，同时支持网络QoS(Quality of Service, 服务质量)策略配置。
* 支持网络配置：支持IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；支持虚机配置SR-IOV网卡；支持NFV(Network Functions Virtualization, 网络功能虚拟化)包括vFW/vLB的配置开通。支持相关策略配置。
* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为虚机构建一套逻辑隔离的虚拟网络环境，可自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。
支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持虚机访问外部网络。
* 镜像管理
TECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟机时使用。
镜像管理功能包括镜像仓库管理和云环境镜像管理。
镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。
云环境镜像管理包括镜像的发布、查阅、删除，支时向多个云环境发布镜像，发布的镜像文件来源于镜像仓库。
容器资源池虚拟资源管理
TECS Director容器资源池的虚拟资源管理功能包括：
* 容器云环境管理
容器云管理包括在数据中心中添加容器云、删除容器云、编辑容器云以及对容器云资源的运维和监控。
* 节点管理
容器云节点分为master节点和minion节点，master节点用于承载管理组件，minion节点用于承载容器应用。
节点管理功能包括节点查询、节点标签管理等。

文档5 - 文档5:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档6 - 文档6:
55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强制关闭的连接数目
* C559010005 重传块数目
* C559010006 发送无序块数目
* C559010007 接收无序块数目
* C559010008 发送数据块数目
* C559010009 接收数据块数目
* C559010010 INIT发送数目
* C559010011 INIT接收数目
* C559010012 INITACK信息块发送数目
* C559010013 INITACK信息块接收数目
* C559010014 COOKIE信息块发送数目
* C559010015 COOKIE信息块接收数目
* C559010016 COOKIEACK信息块发送数目
* C559010017 COOKIEACK信息块接收数目
* C559010018 HEARTBEAT信息块发送数目
* C559010019 HEARTBEAT信息块接收数目
* C559010020 HBACK信息块发送数目
* C559010021 HBACK信息块接收数目
* C559010022 ABORT信息块发送数目
* C559010023 ABORT信息块接收数目
* C559010024 SHUTDOWN信息块发送数目
* C559010025 SHUTDOWN信息块接收数目
* C559010026 SHUTACK信息块发送数目
* C559010027 SHUTACK信息块接收数目
* C559010028 ShutDownComplete发送数目
* C559010029 ShutDownComplete接收数目
* C559010030 ERROR信息块发送数目
* C559010031 ERROR信息块接收数目
* C559010032 ECNE信息块发送数目
* C559010033 ECNE信息块接收数目
* C559010034 CWR信息块发送数目
* C559010035 CWR信息块接收数目
* C559010036 错误数据包接收数目
* C559010037 OOTB报文接收数目
* C559010038 偶联存活期间ULP发起的数据请求数目
* C559010039 偶联存活期间ULP发送到SCTP的数据请求数目
* C559010040 ULP发起的数据请求数目
* C559010041 ULP发送到SCTP的数据请求数目
* C559010042 SCTP发送到ULP的数据请求数目
* C559010043 上层的abort请求次数
* C559010044 接收到对端的Abort次数
* C559010045 重传断链次数
* C559010046 当前连接数目
* C559010047 收到上层数据的字节数(Byte)
* C559010048 发送的有效字节数(Byte)
* C559010049 上层读取的数据字节数(Byte)
* C559010050 接收的有效字节数(Byte)
* C559010051 超时重传块数目
* C559010052 快速重传块数目
* C559010053 发送的报文数
* C559010054 接收的报文数
* C559010055 发送的Sack报文数
* C559010056 接收的Sack报文数
* C559010057 收到的TSN乱序chunk数
* C559010058 收到的重复chunk数
* C559010059 发送的分片chunk数
* C559010060 接收的分片chunk数
* C559010061 INIT控制块IP地址重复
* C559010062 ULP传入的实例号无效
* C559010063 发送ULP数据时资源耗尽
* C559010064 发送ULP数据时偶联ID或流号无效
* C559010065 无效的偶联ID
* C559010066 同步消息获取ULPID失败
* C559010067 从数据库获取偶联信息失败
* C559010068 计算CRC32或者Adler32校验和失败
* C559010069 计算MD5认证码失败
* C559010070 Cookie超时
* C559010071 实例的状态是Idle
* C559010072 偶联的状态错误
* C559010073 路径中断次数
* C559010074 主板发往备板的控制消息个数
* C559010075 主板发往备板的数据消息个数
* C559010076 备收到的控制消息个数
* C559010077 备收到的数据消息个数
* C559010078 主转备数据消息发送失败次数
* C559010079 主备倒换过程中丢弃的上层请求个数
* C559010080 主备板SCTP版本号不一致
* C559010081 忽略主备板SCTP版本号不一致
* C559010082 收到的SACK中累计TSN比以前累计确认的TSN小的数量
* C559010083 收到的SACK中累计TSN比发送报文的最大TSN大的数量

文档7 - 文档7:
特性配置
本节包含以下内容：
* 配置说明
* 配置前提
* 配置过程
* 配置实例
* 调整特性
* 测试用例
* 常见问题处理
配置说明
当网络中IPv4地址资源不足时，可以使用IPv6地址并部署IPv4和IPv6双栈接口实现数据传输。
配置前提
* AMF支持同时配置IPv4和IPv6的GTPC地址
* AMF与邻接NF正常通信
配置过程
1. 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型| IPV6地址
---|---
GTPC| 2FFF:20:100::16/128
HTTP| 2FFF:0:100::16/128
配置步骤
步骤| 命令| 说明
---|---|---
1| SET DEFAULTHTTPCLIENTID:DEFAULTHTTPIPV4ID=1,DEFAULTHTTPSIPV4ID=1,DEFAULTHTTPIPV6ID=1,DEFAULTHTTPSIPV6ID=1| 配置默认HTTP客户端模板标识
2| ADD CLIENTPROFILE:ID=2,IPV4ADDR="2FFF:0:100::16",STARTPORT=20000,ENDPORT=30000,VPNID=0,CONNNUM=2,CONNELASTIC="SWITCH_ON",RESPBODYMAXLENGTH=10240,RESPTIMER=30,MAXCONCURRENTSTREAMS=1000,KEEPALIVETIMER=30,KEEPALIVESWITCH="SWITCH_ON",HTTPVERSION="HTTP_2",TLSCERTID=0| 客户端模板配置
3| SET AMFGTPCADDRCFG:AMFGTPCADDRESS="2FFF:20:100::16",AMFN26VRF=1| AMF GTPC地址配置
调整特性
本特性不涉及调整特性。
测试用例
无。
常见问题处理
无。

文档8 - 文档8:
一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。
* AMF下某个TA Group（包含一个或者多个TA）区域。
该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
numberseg | 号段 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-16 | 该参数用于配置UE的号段，AMF对此号码的UE的接入区域会进行限制，该号段的类型由ADD NUMSEGRESTAREACFG命令中的参数“号段类型”来指定。 不配置该参数（即将该参数配置为NULL）时，表示该号段为通配号段，即针对任意号段都生效。
numbertype | 号段类型 | 参数可选性: 任选
参数类型: 枚举，参见枚举定义
参数范围: 0-2 | 该参数用于配置限制区域的号段类型，包括以下三种类型。
* SUPI（Subscriber Permanent Identifier，用户永久标识）
* GPSI（Generic Public Subscription Identifier，一般公共用户标识）
* PEI（Permanent Equipment Identifier，永久设备标识）
resareaid | 限制区域标识 | 参数可选性: 任选
参数类型: 数字
参数范围: 1-1024 | 该参数用于配置根据UE的号段，对UE的接入区域进行限制的标识。 一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:40:00,869 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档4 - 文档4:
TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Director还支持多数据中心的主机集群策略统一管理，支持的集群策略包括DPM统一管理和DRS统一管理。DPM策略包括DPM启用配置，DPM策略配置。
DRS(Dynamic Resource Scheduling, 动态资源调度)策略包括DRS启用配置，DRS策略配置。
* 主机管理
主机是运行了虚拟化软件的物理服务器，用以运行虚拟机。主机为虚拟机提供CPU(Central Processing Unit, 中央处理器)和内存资源，以及图形处理器、USB(Universal Serial Bus, 通用串行总线)设备、网络连接和存储访问等能力。同一台主机可以同时运行多台虚拟机。
主机管理包括将主机加入主机集群、从主机集群中移除主机、主机信息查询等。
* 虚拟机管理
虚拟机是在物理服务器上划分出来的一台或者多台虚拟化的计算机系统。
虚拟机管理的功能包括查询虚拟机列表、查看虚拟机详情、虚拟机操作（启动、停止、暂停、备份、快照、资源规格调整）。
* 裸金属管理
TECS Director提供了将物理机作为计算资源，类似虚拟机一样，直接分配给用户使用的管理功能。系统支持物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。
* 亲和组、反亲和组管理
TECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。
* 块存储管理
存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。
* 文件存储管理
TECS Director提供文件存储（共享文件）管理功能，支持文件存储（共享文件）从创建到删除的整个生命周期管理。
* 对象存储管理
TECS Director提供对象存储管理功能，支持对象存储从创建到删除的整个生命周期管理。
* 网络管理
* 物理网络设备状态监控，包括中兴通讯自研及各厂商主流交换机、路由器设备。
* 云网络管理：支持虚拟网络、子网、虚拟路由、端口、安全组、虚拟防火墙、虚拟负载均衡等网络资源的生命周期管理，包括创建、删除、查看等，同时支持网络QoS(Quality of Service, 服务质量)策略配置。
* 支持网络配置：支持IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；支持虚机配置SR-IOV网卡；支持NFV(Network Functions Virtualization, 网络功能虚拟化)包括vFW/vLB的配置开通。支持相关策略配置。
* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为虚机构建一套逻辑隔离的虚拟网络环境，可自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。
支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持虚机访问外部网络。
* 镜像管理
TECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟机时使用。
镜像管理功能包括镜像仓库管理和云环境镜像管理。
镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。
云环境镜像管理包括镜像的发布、查阅、删除，支时向多个云环境发布镜像，发布的镜像文件来源于镜像仓库。
容器资源池虚拟资源管理
TECS Director容器资源池的虚拟资源管理功能包括：
* 容器云环境管理
容器云管理包括在数据中心中添加容器云、删除容器云、编辑容器云以及对容器云资源的运维和监控。
* 节点管理
容器云节点分为master节点和minion节点，master节点用于承载管理组件，minion节点用于承载容器应用。
节点管理功能包括节点查询、节点标签管理等。

文档5 - 文档5:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档6 - 文档6:
55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强制关闭的连接数目
* C559010005 重传块数目
* C559010006 发送无序块数目
* C559010007 接收无序块数目
* C559010008 发送数据块数目
* C559010009 接收数据块数目
* C559010010 INIT发送数目
* C559010011 INIT接收数目
* C559010012 INITACK信息块发送数目
* C559010013 INITACK信息块接收数目
* C559010014 COOKIE信息块发送数目
* C559010015 COOKIE信息块接收数目
* C559010016 COOKIEACK信息块发送数目
* C559010017 COOKIEACK信息块接收数目
* C559010018 HEARTBEAT信息块发送数目
* C559010019 HEARTBEAT信息块接收数目
* C559010020 HBACK信息块发送数目
* C559010021 HBACK信息块接收数目
* C559010022 ABORT信息块发送数目
* C559010023 ABORT信息块接收数目
* C559010024 SHUTDOWN信息块发送数目
* C559010025 SHUTDOWN信息块接收数目
* C559010026 SHUTACK信息块发送数目
* C559010027 SHUTACK信息块接收数目
* C559010028 ShutDownComplete发送数目
* C559010029 ShutDownComplete接收数目
* C559010030 ERROR信息块发送数目
* C559010031 ERROR信息块接收数目
* C559010032 ECNE信息块发送数目
* C559010033 ECNE信息块接收数目
* C559010034 CWR信息块发送数目
* C559010035 CWR信息块接收数目
* C559010036 错误数据包接收数目
* C559010037 OOTB报文接收数目
* C559010038 偶联存活期间ULP发起的数据请求数目
* C559010039 偶联存活期间ULP发送到SCTP的数据请求数目
* C559010040 ULP发起的数据请求数目
* C559010041 ULP发送到SCTP的数据请求数目
* C559010042 SCTP发送到ULP的数据请求数目
* C559010043 上层的abort请求次数
* C559010044 接收到对端的Abort次数
* C559010045 重传断链次数
* C559010046 当前连接数目
* C559010047 收到上层数据的字节数(Byte)
* C559010048 发送的有效字节数(Byte)
* C559010049 上层读取的数据字节数(Byte)
* C559010050 接收的有效字节数(Byte)
* C559010051 超时重传块数目
* C559010052 快速重传块数目
* C559010053 发送的报文数
* C559010054 接收的报文数
* C559010055 发送的Sack报文数
* C559010056 接收的Sack报文数
* C559010057 收到的TSN乱序chunk数
* C559010058 收到的重复chunk数
* C559010059 发送的分片chunk数
* C559010060 接收的分片chunk数
* C559010061 INIT控制块IP地址重复
* C559010062 ULP传入的实例号无效
* C559010063 发送ULP数据时资源耗尽
* C559010064 发送ULP数据时偶联ID或流号无效
* C559010065 无效的偶联ID
* C559010066 同步消息获取ULPID失败
* C559010067 从数据库获取偶联信息失败
* C559010068 计算CRC32或者Adler32校验和失败
* C559010069 计算MD5认证码失败
* C559010070 Cookie超时
* C559010071 实例的状态是Idle
* C559010072 偶联的状态错误
* C559010073 路径中断次数
* C559010074 主板发往备板的控制消息个数
* C559010075 主板发往备板的数据消息个数
* C559010076 备收到的控制消息个数
* C559010077 备收到的数据消息个数
* C559010078 主转备数据消息发送失败次数
* C559010079 主备倒换过程中丢弃的上层请求个数
* C559010080 主备板SCTP版本号不一致
* C559010081 忽略主备板SCTP版本号不一致
* C559010082 收到的SACK中累计TSN比以前累计确认的TSN小的数量
* C559010083 收到的SACK中累计TSN比发送报文的最大TSN大的数量

文档7 - 文档7:
特性配置
本节包含以下内容：
* 配置说明
* 配置前提
* 配置过程
* 配置实例
* 调整特性
* 测试用例
* 常见问题处理
配置说明
当网络中IPv4地址资源不足时，可以使用IPv6地址并部署IPv4和IPv6双栈接口实现数据传输。
配置前提
* AMF支持同时配置IPv4和IPv6的GTPC地址
* AMF与邻接NF正常通信
配置过程
1. 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型| IPV6地址
---|---
GTPC| 2FFF:20:100::16/128
HTTP| 2FFF:0:100::16/128
配置步骤
步骤| 命令| 说明
---|---|---
1| SET DEFAULTHTTPCLIENTID:DEFAULTHTTPIPV4ID=1,DEFAULTHTTPSIPV4ID=1,DEFAULTHTTPIPV6ID=1,DEFAULTHTTPSIPV6ID=1| 配置默认HTTP客户端模板标识
2| ADD CLIENTPROFILE:ID=2,IPV4ADDR="2FFF:0:100::16",STARTPORT=20000,ENDPORT=30000,VPNID=0,CONNNUM=2,CONNELASTIC="SWITCH_ON",RESPBODYMAXLENGTH=10240,RESPTIMER=30,MAXCONCURRENTSTREAMS=1000,KEEPALIVETIMER=30,KEEPALIVESWITCH="SWITCH_ON",HTTPVERSION="HTTP_2",TLSCERTID=0| 客户端模板配置
3| SET AMFGTPCADDRCFG:AMFGTPCADDRESS="2FFF:20:100::16",AMFN26VRF=1| AMF GTPC地址配置
调整特性
本特性不涉及调整特性。
测试用例
无。
常见问题处理
无。

文档8 - 文档8:
一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。
* AMF下某个TA Group（包含一个或者多个TA）区域。
该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
numberseg | 号段 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-16 | 该参数用于配置UE的号段，AMF对此号码的UE的接入区域会进行限制，该号段的类型由ADD NUMSEGRESTAREACFG命令中的参数“号段类型”来指定。 不配置该参数（即将该参数配置为NULL）时，表示该号段为通配号段，即针对任意号段都生效。
numbertype | 号段类型 | 参数可选性: 任选
参数类型: 枚举，参见枚举定义
参数范围: 0-2 | 该参数用于配置限制区域的号段类型，包括以下三种类型。
* SUPI（Subscriber Permanent Identifier，用户永久标识）
* GPSI（Generic Public Subscription Identifier，一般公共用户标识）
* PEI（Permanent Equipment Identifier，永久设备标识）
resareaid | 限制区域标识 | 参数可选性: 任选
参数类型: 数字
参数范围: 1-1024 | 该参数用于配置根据UE的号段，对UE的接入区域进行限制的标识。 一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:40:00,869 utils.llm.openai_llm INFO: OpenAILLM completion_stream prompt: 你是一名知识问答助手，仅根据下方检索到的参考资料来回答用户问题。请遵循以下严格的规则：
请严格遵循以下要求：
1. 你的回答必须仅基于提供的“参考资料”内容；
2. 如果“参考资料”中没有与问题相关的信息，请直接回答：“抱歉，我暂时还没学会这些知识。” 不要编造、猜测或引用未提供的内容；
3. 回答要准确、简洁，不添加主观判断或额外补充说明；
4. 禁止加入模型自身观点、解释过程或语言风格润色，只需客观作答。
5. 你回答的语气应该专业、柔和，把检索到的知识当做是你已经理解的知识作答
---
参考资料：
文档1 - 文档1:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见创建密钥对。
9. 单击发布虚机按钮。
相关任务
* 发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档2 - 文档2:
发布虚机
摘要
本节介绍发布虚机的操作步骤。
前提
* 使用组织管理员账户登录TECS Director。
* 已上传并发布镜像。
* 已创建网络。
* 已创建虚机规格。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择运营→租户资源管理→组织资源管理，打开组织资源管理页面，单击组织名称，打开组织的详情页面。
2. 单击详情页面中的虚拟机图标，打开虚拟机页面，如图1所示。
图1 虚拟机页面
3. 单击+发布虚机按钮，打开发布虚机-基本信息页面，根据规划填写相应参数，如图2所示。
图2 发布虚机-基本信息
说明：
组织管理员批量创建虚机的个数上限为50。
选择不同的部署策略需设置不同的参数。
如果…| 那么…
---|---
按云环境部署| 根据需求选择云环境和虚机规格。
按VDC部署| 根据需求选择VDC和虚机规格。
4. 单击下一步按钮，打开发布虚机-启动源页面，为虚机选择启动源，如图3所示。
图3 发布虚机-启动源
5. 单击下一步按钮，打开发布虚机-云硬盘页面，为虚机选择是否增加云硬盘，如图4所示。
图4 发布虚机-云硬盘
6. 单击下一步按钮，打开发布虚机-网络页面，为虚机增加网卡，如图5所示。
图5 发布虚机-网络
7. 单击下一步按钮，打开发布虚机-高级配置页面，如图6所示。
图6 发布虚机-高级配置
8. 根据规划填写相应配置参数，用户可根据需要勾选秘钥对配置虚机，秘钥对的创建步骤参见“创建秘钥对”。
9. 单击发布虚机按钮。
相关任务
发布完成的虚机可在虚机列表中进行以下操作：
如果...| 那么...
---|---
打开虚机控制台|
1. 单击操作列的控制台按钮。
2. 在弹出的窗口中输入密码进入控制台。
关闭虚机|
1. 单击操作列的下拉按钮，选择关机。
2. 在弹出的关机对话框中，再次单击关机按钮。
重启虚机|
* 硬重启：
1. 单击操作列的下拉按钮，选择硬重启。
2. 在弹出的硬重启对话框中，输入验证码，单击重启按钮。
* 软重启：
1. 单击操作列的下拉按钮，选择软重启。
2. 在弹出的软重启对话框中，输入验证码，单击重启按钮。
删除虚机|
1. 单击操作列的下拉按钮，选择删除。
2. 在弹出的删除对话框中，如果需要删除虚机挂载的云硬盘，可以一并勾选，单击确认按钮。
暂停虚机|
1. 单击操作列的下拉按钮，选择暂停。
2. 在弹出的暂停对话框中，再次单击暂停按钮。
挂起虚机|
1. 单击操作列的下拉按钮，选择挂起。
2. 在弹出的挂起对话框中，再次单击挂起按钮。
锁定虚机|
1. 单击操作列的下拉按钮，选择锁定。
2. 在弹出的锁定对话框中，再次单击锁定按钮。
修改虚机名称|
1. 单击操作列的下拉按钮，选择修改名称。
2. 在弹出的修改名称对话框中，输入新名称，单击保存按钮。
修改虚机类型|
1. 单击操作列的下拉按钮，选择修改类型。
2. 在弹出的修改类型对话框中，选择新类型，单击保存按钮。
调整虚机规格|
1. 单击操作列的下拉按钮，选择规格调整。
2. 在弹出的规格调整对话框中，选择新的规格，单击保存按钮。
在线扩容虚机|
1. 单击操作列的下拉按钮，选择在线扩容。
2. 在弹出的在线扩容对话框中，选择新的规格，单击保存按钮。
创建镜像快照|
1. 单击操作列的下拉按钮，选择创建镜像快照。
2. 在弹出的创建镜像快照对话框中，选择创建方式，输入快照名称，单击确认按钮。
配置CPU|
1. 单击操作列的下拉按钮，选择CPU配置。
2. 在弹出的CPU配置对话框中，输入频率上限和频率下限，单击保存按钮。
配置内存|
1. 单击操作列的下拉按钮，选择内存配置。
2. 在弹出的内存配置对话框中，输入内存上限和内存下限，单击保存按钮。
重建虚机|
1. 单击操作列的下拉按钮，选择重建。
2. 在弹出的重建对话框中，选择镜像和磁盘分区方式，单击确认按钮。
备份虚机|
1. 单击操作列的下拉按钮，选择虚机备份。
2.

文档3 - 文档3:
C100012062 虚机磁盘写时延峰值
* C100012064 虚机磁盘平均读时延
* C100012065 虚机磁盘平均写时延
* C100012066 虚机磁盘使用率
* C100012067 虚机磁盘IO时延
* C100013001 虚机网卡数目
* C100013002 虚机最大网卡数目
* C100013003 虚机最小网卡数目
* C100013004 虚机自启动以来虚机运行时长
* C100013005 虚机运行时长
* C100013006 虚机是否已安装VMTOOLS
* C100013007 虚机是否已运行VMTOOLS
* C100013008 虚机上电状态
* C100013009 虚机短暂停顿总时长
* C100013010 虚机短暂停顿时长
* C100013011 虚机短暂停顿总次数
* C100013012 虚机短暂停顿次数
* C100013013 自启动以来虚机调度延迟
* C100013014 虚机调度延迟
* C100013015 虚机时钟差异
* C100013016 虚机时钟差异最大值
* C100013017 虚机时钟差异最小值
* C100013018 虚机状态
* C100013019 虚机平均调度延迟
* C100013021 虚机下电时长
* C100040001 虚机端口流入速率
* C100040002 虚机端口流入速率峰值
* C100040003 虚机端口流入速率谷值
* C100040004 虚机端口流出速率
* C100040005 虚机端口流出速率峰值
* C100040006 虚机端口流出速率谷值
* C100040007 虚机端口入向带宽
* C100040008 虚机端口入向带宽峰值
* C100040009 虚机端口入向带宽谷值
* C100040010 虚机端口出向带宽
* C100040011 虚机端口出向带宽峰值
* C100040012 虚机端口出向带宽谷值
* C100040013 虚机端口流入包速率
* C100040014 虚机端口流入包最大速率
* C100040015 虚机端口流入包最小速率
* C100040016 虚机端口流出包速率
* C100040017 虚机端口流出包最大速率
* C100040018 虚机端口流出包最小速率
* C100040019 自启动以来虚机端口流入字节数
* C100040020 自启动以来虚机端口流出字节数
* C100040021 自启动以来虚机端口流入包数
* C100040022 自启动以来虚机端口流出包数
* C100040023 自启动以来虚机端口流入丢包数
* C100040024 自启动以来虚机端口流出丢包数
* C100040025 自启动以来虚机端口流入错包数
* C100040026 自启动以来虚机端口流出错包数
* C100040027 虚机端口流入字节数
* C100040028 虚机端口流出字节数
* C100040029 虚机端口流入包数
* C100040030 虚机端口流出包数
* C100040031 虚机端口流入丢包数
* C100040032 虚机端口流出丢包数
* C100040033 虚机端口流入错包数
* C100040034 虚机端口流出错包数

文档4 - 文档4:
TECS OpenStack在部署虚拟机时，调度器会根据虚拟机的属性选择合适的Host Aggregates。
主机集群的管理包括创建集群、删除主机集群，查询主机集群等。
同时TECS Director还支持多数据中心的主机集群策略统一管理，支持的集群策略包括DPM统一管理和DRS统一管理。DPM策略包括DPM启用配置，DPM策略配置。
DRS(Dynamic Resource Scheduling, 动态资源调度)策略包括DRS启用配置，DRS策略配置。
* 主机管理
主机是运行了虚拟化软件的物理服务器，用以运行虚拟机。主机为虚拟机提供CPU(Central Processing Unit, 中央处理器)和内存资源，以及图形处理器、USB(Universal Serial Bus, 通用串行总线)设备、网络连接和存储访问等能力。同一台主机可以同时运行多台虚拟机。
主机管理包括将主机加入主机集群、从主机集群中移除主机、主机信息查询等。
* 虚拟机管理
虚拟机是在物理服务器上划分出来的一台或者多台虚拟化的计算机系统。
虚拟机管理的功能包括查询虚拟机列表、查看虚拟机详情、虚拟机操作（启动、停止、暂停、备份、快照、资源规格调整）。
* 裸金属管理
TECS Director提供了将物理机作为计算资源，类似虚拟机一样，直接分配给用户使用的管理功能。系统支持物理裸机的发现、分配与部署、管理（开机/关机、重启、锁定/解锁、更新、重建、安装操作系统、裸金属生成镜像等）、删除等功能。
* 亲和组、反亲和组管理
TECS Director提供亲和组、反亲和组功能，通过亲和组将多台虚机部署在相同的宿主机上，通过反亲和组将多台虚机分散部署在不同的宿主机上。
* 块存储管理
存储管理包括物理存储设备的监控、云盘的创建、删除、查看、编辑和转让等。
* 文件存储管理
TECS Director提供文件存储（共享文件）管理功能，支持文件存储（共享文件）从创建到删除的整个生命周期管理。
* 对象存储管理
TECS Director提供对象存储管理功能，支持对象存储从创建到删除的整个生命周期管理。
* 网络管理
* 物理网络设备状态监控，包括中兴通讯自研及各厂商主流交换机、路由器设备。
* 云网络管理：支持虚拟网络、子网、虚拟路由、端口、安全组、虚拟防火墙、虚拟负载均衡等网络资源的生命周期管理，包括创建、删除、查看等，同时支持网络QoS(Quality of Service, 服务质量)策略配置。
* 支持网络配置：支持IP(Internet Protocol, 因特网协议)/VLAN(Virtual Local Area Network, 虚拟局域网)池配置管理，用户的IP(Internet Protocol, 因特网协议)地址和VLAN(Virtual Local Area Network, 虚拟局域网)选取来自相关资源池；支持虚机配置SR-IOV网卡；支持NFV(Network Functions Virtualization, 网络功能虚拟化)包括vFW/vLB的配置开通。支持相关策略配置。
* 虚拟私有云（Virtual Private Cloud，VPC）管理：基于云环境为虚机构建一套逻辑隔离的虚拟网络环境，可自定义子网、自行创建防火墙、VPN网关等，提升用户虚拟资源的安全性，简化用户的网络部署。
支持虚拟私有云的创建、修改、删除等能力，同时VPC通过出口/多出口、专线方式支持虚机访问外部网络。
* 镜像管理
TECS Director提供多个云环境的镜像统一管理，并支持将镜像分发到一个或多个环境，以便创建虚拟机时使用。
镜像管理功能包括镜像仓库管理和云环境镜像管理。
镜像仓库管理提供镜像文件的生命周期管理，包括镜像文件的上传、查阅和删除。
云环境镜像管理包括镜像的发布、查阅、删除，支时向多个云环境发布镜像，发布的镜像文件来源于镜像仓库。
容器资源池虚拟资源管理
TECS Director容器资源池的虚拟资源管理功能包括：
* 容器云环境管理
容器云管理包括在数据中心中添加容器云、删除容器云、编辑容器云以及对容器云资源的运维和监控。
* 节点管理
容器云节点分为master节点和minion节点，master节点用于承载管理组件，minion节点用于承载容器应用。
节点管理功能包括节点查询、节点标签管理等。

文档5 - 文档5:
使用heat模板创建虚机
摘要
TECS Director支持使用heat模板创建虚机、网络等资源。heat模板包括模板源和客户化参数两个yaml文件，用户将创建资源所需的参数配置在heat模板中，可以在TECS Director中使用heat模板实现资源创建。
本节介绍使用heat模板创建虚机的步骤。
前提
使用领域管理员账户登录TECS Director。
步骤
1. 单击TECS Director顶部菜单栏中的按钮，选择基础设施→虚拟资源→计算，打开计算页面。在左侧功能导航树中选择计算→栈，打开栈页面，如图1所示。
图1 栈页面
2. 单击添加栈按钮，打开添加栈页面，如图2所示。
图2 添加栈页面
3. 根据规划配置相关参数，并选择模板源文件和客户化参数文件。
4. 单击添加按钮，完成虚机创建。
结果
创建完成的虚机可以在虚机页面中进行查看。

文档6 - 文档6:
55901 SCTP协议栈测量
子主题：
* C559010001 接收的连接数目
* C559010002 发起的连接数目
* C559010003 友好关闭的连接数目
* C559010004 强制关闭的连接数目
* C559010005 重传块数目
* C559010006 发送无序块数目
* C559010007 接收无序块数目
* C559010008 发送数据块数目
* C559010009 接收数据块数目
* C559010010 INIT发送数目
* C559010011 INIT接收数目
* C559010012 INITACK信息块发送数目
* C559010013 INITACK信息块接收数目
* C559010014 COOKIE信息块发送数目
* C559010015 COOKIE信息块接收数目
* C559010016 COOKIEACK信息块发送数目
* C559010017 COOKIEACK信息块接收数目
* C559010018 HEARTBEAT信息块发送数目
* C559010019 HEARTBEAT信息块接收数目
* C559010020 HBACK信息块发送数目
* C559010021 HBACK信息块接收数目
* C559010022 ABORT信息块发送数目
* C559010023 ABORT信息块接收数目
* C559010024 SHUTDOWN信息块发送数目
* C559010025 SHUTDOWN信息块接收数目
* C559010026 SHUTACK信息块发送数目
* C559010027 SHUTACK信息块接收数目
* C559010028 ShutDownComplete发送数目
* C559010029 ShutDownComplete接收数目
* C559010030 ERROR信息块发送数目
* C559010031 ERROR信息块接收数目
* C559010032 ECNE信息块发送数目
* C559010033 ECNE信息块接收数目
* C559010034 CWR信息块发送数目
* C559010035 CWR信息块接收数目
* C559010036 错误数据包接收数目
* C559010037 OOTB报文接收数目
* C559010038 偶联存活期间ULP发起的数据请求数目
* C559010039 偶联存活期间ULP发送到SCTP的数据请求数目
* C559010040 ULP发起的数据请求数目
* C559010041 ULP发送到SCTP的数据请求数目
* C559010042 SCTP发送到ULP的数据请求数目
* C559010043 上层的abort请求次数
* C559010044 接收到对端的Abort次数
* C559010045 重传断链次数
* C559010046 当前连接数目
* C559010047 收到上层数据的字节数(Byte)
* C559010048 发送的有效字节数(Byte)
* C559010049 上层读取的数据字节数(Byte)
* C559010050 接收的有效字节数(Byte)
* C559010051 超时重传块数目
* C559010052 快速重传块数目
* C559010053 发送的报文数
* C559010054 接收的报文数
* C559010055 发送的Sack报文数
* C559010056 接收的Sack报文数
* C559010057 收到的TSN乱序chunk数
* C559010058 收到的重复chunk数
* C559010059 发送的分片chunk数
* C559010060 接收的分片chunk数
* C559010061 INIT控制块IP地址重复
* C559010062 ULP传入的实例号无效
* C559010063 发送ULP数据时资源耗尽
* C559010064 发送ULP数据时偶联ID或流号无效
* C559010065 无效的偶联ID
* C559010066 同步消息获取ULPID失败
* C559010067 从数据库获取偶联信息失败
* C559010068 计算CRC32或者Adler32校验和失败
* C559010069 计算MD5认证码失败
* C559010070 Cookie超时
* C559010071 实例的状态是Idle
* C559010072 偶联的状态错误
* C559010073 路径中断次数
* C559010074 主板发往备板的控制消息个数
* C559010075 主板发往备板的数据消息个数
* C559010076 备收到的控制消息个数
* C559010077 备收到的数据消息个数
* C559010078 主转备数据消息发送失败次数
* C559010079 主备倒换过程中丢弃的上层请求个数
* C559010080 主备板SCTP版本号不一致
* C559010081 忽略主备板SCTP版本号不一致
* C559010082 收到的SACK中累计TSN比以前累计确认的TSN小的数量
* C559010083 收到的SACK中累计TSN比发送报文的最大TSN大的数量

文档7 - 文档7:
特性配置
本节包含以下内容：
* 配置说明
* 配置前提
* 配置过程
* 配置实例
* 调整特性
* 测试用例
* 常见问题处理
配置说明
当网络中IPv4地址资源不足时，可以使用IPv6地址并部署IPv4和IPv6双栈接口实现数据传输。
配置前提
* AMF支持同时配置IPv4和IPv6的GTPC地址
* AMF与邻接NF正常通信
配置过程
1. 执行SET AMFGTPCADDRCFG命令，配置AMF GTPC地址。
2. 执行SET DEFAULTHTTPCLIENTID命令，配置默认HTTP客户端模板标识。
配置实例
数据规划
接口类型| IPV6地址
---|---
GTPC| 2FFF:20:100::16/128
HTTP| 2FFF:0:100::16/128
配置步骤
步骤| 命令| 说明
---|---|---
1| SET DEFAULTHTTPCLIENTID:DEFAULTHTTPIPV4ID=1,DEFAULTHTTPSIPV4ID=1,DEFAULTHTTPIPV6ID=1,DEFAULTHTTPSIPV6ID=1| 配置默认HTTP客户端模板标识
2| ADD CLIENTPROFILE:ID=2,IPV4ADDR="2FFF:0:100::16",STARTPORT=20000,ENDPORT=30000,VPNID=0,CONNNUM=2,CONNELASTIC="SWITCH_ON",RESPBODYMAXLENGTH=10240,RESPTIMER=30,MAXCONCURRENTSTREAMS=1000,KEEPALIVETIMER=30,KEEPALIVESWITCH="SWITCH_ON",HTTPVERSION="HTTP_2",TLSCERTID=0| 客户端模板配置
3| SET AMFGTPCADDRCFG:AMFGTPCADDRESS="2FFF:20:100::16",AMFN26VRF=1| AMF GTPC地址配置
调整特性
本特性不涉及调整特性。
测试用例
无。
常见问题处理
无。

文档8 - 文档8:
一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。
* AMF下某个TA Group（包含一个或者多个TA）区域。
该参数是预先已经通过ADD RESTRICTAREACFG命令配置的限制区域标识（resareaid）。
## 输出参数说明
标识 | 名称 | 类型 | 说明
---|---|---|---
numberseg | 号段 | 参数可选性: 任选
参数类型: 字符串
参数范围: 1-16 | 该参数用于配置UE的号段，AMF对此号码的UE的接入区域会进行限制，该号段的类型由ADD NUMSEGRESTAREACFG命令中的参数“号段类型”来指定。 不配置该参数（即将该参数配置为NULL）时，表示该号段为通配号段，即针对任意号段都生效。
numbertype | 号段类型 | 参数可选性: 任选
参数类型: 枚举，参见枚举定义
参数范围: 0-2 | 该参数用于配置限制区域的号段类型，包括以下三种类型。
* SUPI（Subscriber Permanent Identifier，用户永久标识）
* GPSI（Generic Public Subscription Identifier，一般公共用户标识）
* PEI（Permanent Equipment Identifier，永久设备标识）
resareaid | 限制区域标识 | 参数可选性: 任选
参数类型: 数字
参数范围: 1-1024 | 该参数用于配置根据UE的号段，对UE的接入区域进行限制的标识。 一个限制区域可以是以下范围：
* 整个AMF所管理的区域。
* AMF下某个PLMN区域。

文档9 - 文档9:
订购中兴云容器集群
摘要
介绍如何订购中兴云容器集群。
步骤
1. 单击userportal页面顶部菜单栏中产品目录列表，选择云基础计算→容器→中兴云容器集群，打开产品控制台页面，如图1所示。
图1 控制台页面
2.

文档10 - 文档10:
查看备份恢复日志
摘要
TECS Director支持查看备份恢复日志，用户可以查看每次执行备份恢复和容量清理的执行记录。
本节介绍查看备份恢复日志的步骤。
前提
使用领域管理员账户登录TECS Director
步骤
1.
---
---
用户问题：发布虚机时最多可以为虚机分配几块网卡？
---
请根据上述要求，给出规范且可靠的回答：
2025-08-01 00:40:00,874 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:40:00,874 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:40:00,874 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): dashscope.aliyuncs.com:443
2025-08-01 00:40:02,404 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:40:02,404 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:40:02,404 urllib3.connectionpool DEBUG: https://dashscope.aliyuncs.com:443 "POST /compatible-mode/v1/chat/completions HTTP/1.1" 200 None
2025-08-01 00:40:02,407 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:40:02,407 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-08-01 00:40:02,407 rag.pipeline.executor DEBUG: Pipeline执行完成
