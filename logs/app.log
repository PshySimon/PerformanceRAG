2025-07-22 22:35:49,323 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/加载文件中...
2025-07-22 22:35:49,326 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-22 22:35:49,326 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-22 22:35:49,326 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-22 22:35:49,327 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-22 22:35:49,327 rag.components.loader.file_loader INFO: 成功加载4个文档
2025-07-22 22:35:49,327 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-22 22:35:49,328 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-22 22:35:49,328 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-22 22:35:49,328 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-22 22:59:06,397 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/加载文件中...
2025-07-22 22:59:06,399 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-22 22:59:06,400 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-22 22:59:06,400 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-22 22:59:06,400 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-22 22:59:06,401 rag.components.loader.file_loader INFO: 成功加载4个文档
2025-07-22 22:59:06,401 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-22 22:59:06,401 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-22 22:59:06,401 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-22 22:59:06,401 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:21:53,132 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:21:53,132 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:21:53,133 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:21:53,133 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:26:01,046 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:26:01,047 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:26:01,047 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:26:01,048 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:27:20,624 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:27:20,625 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:27:20,625 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:27:20,625 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:27:20,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:27:20,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:27:20,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:27:20,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:27:20,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:27:20,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:27:20,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:27:20,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:27:20,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:27:20,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:27:20,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:27:20,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:27:20,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:27:20,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:27:20,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:27:20,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:27:20,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:27:20,636 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:27:20,640 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:27:20,641 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:27:20,641 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:27:20,642 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:27:20,642 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:27:20,643 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:27:20,643 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 00:27:20,643 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 00:27:20,643 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:27:20,643 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 00:27:20,645 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:27:20,645 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:27:20,645 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:27:20,645 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:27:20,646 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:27:20,646 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 00:27:20,646 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:27:20,646 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 00:27:20,647 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:27:20,647 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 00:27:20,647 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:27:20,647 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 00:27:20,647 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 00:27:20,648 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:27:20,648 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:27:20,648 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:27:20,649 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:27:20,649 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:27:20,649 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:27:20,650 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:27:20,650 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:27:20,650 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:27:20,650 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:27:20,652 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:27:20,652 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:27:20,652 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:27:20,652 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:27:20,653 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:27:20,653 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:27:20,653 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:27:20,653 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:27:20,657 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:27:20,658 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:27:20,658 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:27:20,658 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:39:12,675 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:39:12,676 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:39:12,676 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:39:12,676 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:39:12,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:39:12,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:39:12,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:39:12,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:39:12,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:39:12,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:39:12,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:39:12,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:39:12,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:39:12,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:39:12,685 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:39:12,685 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:39:12,685 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:39:12,685 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:39:12,687 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:39:12,688 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:39:12,688 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:39:12,689 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:39:12,694 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:39:12,695 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:39:12,695 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:39:12,696 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:39:12,696 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:39:12,697 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:39:12,697 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 00:39:12,697 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 00:39:12,697 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:39:12,697 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 00:39:12,699 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:39:12,699 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:39:12,699 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:39:12,699 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:39:12,700 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:39:12,700 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 00:39:12,700 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:39:12,700 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 00:39:12,701 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:39:12,701 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 00:39:12,702 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:39:12,702 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 00:39:12,702 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 00:39:12,703 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:39:12,703 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:39:12,703 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:39:12,704 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:39:12,705 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:39:12,708 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:39:12,708 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:39:12,708 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:39:12,708 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:39:12,709 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:39:12,709 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:39:12,709 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:39:12,710 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:39:12,713 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:39:12,714 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:39:12,714 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:39:12,714 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:39:12,714 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 00:39:12,756 rag.components.splitter.splitter_utils INFO: 使用TextSplitter进行二次分割
2025-07-23 00:41:20,798 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:41:20,799 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:41:20,799 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:41:20,799 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:41:20,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:41:20,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:41:20,804 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:41:20,804 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:41:20,805 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:41:20,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:41:20,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:41:20,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:41:20,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:41:20,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:41:20,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:41:20,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:41:20,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:41:20,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:41:20,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:41:20,815 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:41:20,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:41:20,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:41:20,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:41:20,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 00:41:20,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 00:41:20,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:41:20,817 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 00:41:20,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:41:20,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:41:20,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:41:20,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:41:20,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:41:20,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 00:41:20,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:41:20,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 00:41:20,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:41:20,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 00:41:20,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:41:20,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 00:41:20,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 00:41:20,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:41:20,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:41:20,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:41:20,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:41:20,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:41:20,825 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:41:20,826 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:41:20,826 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:41:20,826 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:41:20,827 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:41:20,829 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:41:20,829 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:41:20,829 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:41:20,829 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:41:20,830 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:41:20,830 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:41:20,830 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:41:20,830 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:41:20,834 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:41:20,835 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:41:20,835 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:41:20,835 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:41:20,835 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 00:41:20,847 rag.components.splitter.splitter_utils INFO: 使用TextSplitter进行二次分割
2025-07-23 00:42:18,244 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 00:42:18,245 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 00:42:18,245 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 00:42:18,245 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 00:42:18,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:42:18,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:42:18,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:42:18,249 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:42:18,249 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:42:18,249 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:42:18,250 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:42:18,250 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:42:18,250 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:42:18,250 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:42:18,253 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:42:18,253 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:42:18,253 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:42:18,253 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:42:18,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:42:18,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:42:18,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:42:18,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:42:18,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:42:18,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:42:18,260 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:42:18,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:42:18,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:42:18,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:42:18,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 00:42:18,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 00:42:18,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:42:18,262 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 00:42:18,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:42:18,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:42:18,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:42:18,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:42:18,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:42:18,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 00:42:18,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:42:18,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 00:42:18,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:42:18,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 00:42:18,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:42:18,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 00:42:18,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 00:42:18,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 00:42:18,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 00:42:18,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 00:42:18,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 00:42:18,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 00:42:18,271 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:42:18,271 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:42:18,271 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:42:18,272 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:42:18,273 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 00:42:18,273 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 00:42:18,273 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 00:42:18,273 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 00:42:18,276 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 00:42:18,276 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 00:42:18,276 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 00:42:18,276 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 00:42:18,277 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 00:42:18,277 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 00:42:18,277 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 00:42:18,277 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 00:42:18,277 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:42:18,277 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 00:42:18,291 rag.components.splitter.splitter_utils INFO: 使用TextSplitter进行二次分割
2025-07-23 00:42:18,291 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:42:18,291 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 00:42:18,291 rag.components.splitter.splitter_utils INFO: 语义分割后仍有超大节点，使用TextSplitter进行最终分割
2025-07-23 00:42:18,291 rag.components.splitter.splitter_utils INFO: 使用TextSplitter进行二次分割
2025-07-23 00:42:18,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:42:18,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:42:18,294 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 00:42:18,294 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 00:42:18,294 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 00:42:18,294 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 00:42:18,294 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 00:42:18,294 rag.components.splitter.splitter_utils INFO: 使用语义分割器进行二次分割
2025-07-23 00:42:18,294 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 00:42:18,294 rag.components.splitter.splitter_utils INFO: 使用TextSplitter进行二次分割
2025-07-23 00:42:18,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:42:18,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:42:18,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:42:18,297 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:42:18,297 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 00:42:18,297 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 00:42:18,298 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 00:42:18,298 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 00:42:18,298 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 00:42:18,298 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 00:42:18,299 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 00:42:18,299 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 00:42:18,299 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 08:10:31,610 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 08:10:31,611 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 08:10:31,611 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 08:10:31,612 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 08:12:20,986 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 08:12:20,987 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 08:12:20,987 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 08:12:20,987 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 08:12:20,991 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:12:20,991 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:12:20,991 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:12:20,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:12:20,993 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:12:20,995 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:12:20,995 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:12:20,995 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:12:20,995 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:12:20,996 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:12:20,996 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:12:20,996 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:12:20,997 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:12:21,001 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:12:21,002 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:12:21,002 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:12:21,002 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:12:21,003 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:12:21,003 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:12:21,003 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:12:21,004 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 08:12:21,004 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 08:12:21,004 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:12:21,004 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 08:12:21,004 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:12:21,006 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 08:12:21,007 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:12:21,007 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 08:12:21,007 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:12:21,008 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 08:12:21,009 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:12:21,009 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 08:12:21,009 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 08:12:21,010 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:12:21,010 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:12:21,010 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:12:21,010 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:12:21,011 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:12:21,014 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:12:21,014 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:12:21,014 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:12:21,014 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:12:21,015 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:12:21,015 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:12:21,015 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:12:21,015 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:12:21,019 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:12:21,019 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:12:21,019 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 08:12:21,019 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:12:21,033 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 08:12:21,033 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:12:21,033 rag.components.splitter.splitter_utils INFO: 使用text分割器进行二级退化分割
2025-07-23 08:12:21,035 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:12:21,035 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:12:21,037 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:12:21,037 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 08:12:21,037 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 08:12:21,037 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:12:21,037 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 08:12:21,037 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAI API密钥未设置，请通过参数传入或设置OPENAI_API_KEY环境变量，将使用启发式方法进行分割
2025-07-23 08:12:21,037 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:12:21,040 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 08:12:21,041 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:12:21,041 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 08:12:21,042 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:12:21,042 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 08:12:21,042 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:12:21,042 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 08:12:21,042 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 08:37:01,910 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 08:37:01,910 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 08:37:01,911 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 08:37:01,911 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 08:37:01,914 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:37:01,914 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:37:01,914 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:37:01,916 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:37:01,917 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:37:01,919 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:37:01,919 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:37:01,919 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:37:01,919 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:37:01,921 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:37:01,921 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:37:01,921 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:37:01,921 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:37:01,926 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:37:01,927 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:37:01,927 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:37:01,927 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:37:01,927 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:37:01,928 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:37:01,928 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:37:01,929 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:37:01,929 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 08:37:01,929 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 08:37:01,929 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:37:01,929 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 08:37:01,929 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:37:01,931 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:37:01,931 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:37:01,931 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:37:01,932 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:37:01,934 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:37:01,934 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 08:37:01,934 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:37:01,935 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 08:37:01,936 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:37:01,936 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 08:37:01,937 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:37:01,937 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 08:37:01,937 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 08:37:01,938 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:37:01,938 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:37:01,938 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:37:01,939 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:37:01,942 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:37:01,942 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:37:01,942 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:37:01,942 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:37:01,943 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:37:01,943 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:37:01,943 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:37:01,943 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:37:01,947 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:37:01,947 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:37:01,947 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:37:01,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:37:01,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:37:01,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:37:01,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:37:01,948 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:38:05,108 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 08:38:05,109 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 08:38:05,109 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 08:38:05,109 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 08:38:05,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:38:05,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:38:05,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:38:05,114 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:38:05,115 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:38:05,117 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:38:05,117 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:38:05,117 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:38:05,118 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:38:05,118 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:38:05,118 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:38:05,119 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:38:05,119 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:38:05,124 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:38:05,125 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:38:05,125 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:38:05,125 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:38:05,126 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:38:05,126 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:38:05,126 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:38:05,127 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 08:38:05,127 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 08:38:05,127 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:38:05,127 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 08:38:05,127 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 08:38:05,129 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:38:05,129 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:38:05,129 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:38:05,129 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:38:05,129 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:38:05,130 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 08:38:05,130 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:38:05,130 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 08:38:05,131 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:38:05,131 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 08:38:05,131 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:38:05,131 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 08:38:05,131 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 08:38:05,133 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 08:38:05,134 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 08:38:05,134 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 08:38:05,134 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 08:38:05,134 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 08:38:05,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:38:05,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:38:05,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:38:05,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:38:05,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 08:38:05,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 08:38:05,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 08:38:05,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 08:38:05,143 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 08:38:05,144 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 08:38:05,144 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 08:38:05,208 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 08:38:05,208 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:38:05,222 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-47088ee7-3da2-4d5a-8b45-c9a3b64b9ee1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,234 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,235 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 08:38:05,235 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16db2ae60>
2025-07-23 08:38:05,235 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:05,235 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,235 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 08:38:05,236 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,236 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:05,236 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 08:38:05,236 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16db4c7c0> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 08:38:05,292 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16db2b1c0>
2025-07-23 08:38:05,292 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,292 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,292 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,292 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,292 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,481 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47314f17532310854823726e0059842e8d54d62a2cd4444a669b4b08c327;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838059ecdbb0b069c4d58'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,482 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,482 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,482 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,482 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,482 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,483 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47314f17532310854823726e0059842e8d54d62a2cd4444a669b4b08c327;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838059ecdbb0b069c4d58'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,483 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,483 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,487 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,487 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,488 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.627+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,489 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7e4ccaa5-38a2-40b6-a35d-d5b6c073be37', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': '6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,489 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,490 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,490 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,490 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,490 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,491 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,550 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083805a4ae014449e64fab'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,550 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,550 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,550 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,551 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,551 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,551 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083805a4ae014449e64fab'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,551 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,551 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,551 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,552 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,552 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.759+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,552 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-314c856f-266e-499f-863f-9b40d52977a8', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'Perf基于最新版本Linux内核的perf_events接口', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,553 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,553 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,553 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,553 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,554 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,554 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,610 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838053635119d76c54516'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,611 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,612 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,612 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,612 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,612 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,613 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838053635119d76c54516'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,613 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,613 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,613 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,614 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,614 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.781+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,615 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c0345c84-0ae8-48fb-bfe0-be2a386d9e1a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': '这篇文章通过示例展示了Perf工具的使用', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,616 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,617 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,617 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,617 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,617 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,618 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,671 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838056ef303e962a443ab'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,672 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,673 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,674 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,674 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,674 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,674 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838056ef303e962a443ab'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,674 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,675 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,675 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,675 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,675 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.875+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,676 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d7ad37ac-8d64-4a65-b49c-aa5221674a27', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': '命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,678 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,678 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,679 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,679 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,679 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,679 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,741 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083805a5eb654701d2464e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,742 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,742 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,743 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,743 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,743 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,743 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083805a5eb654701d2464e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,744 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,744 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,744 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,745 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,745 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.937+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,746 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-de06b381-820e-401a-943d-e5c4fff70947', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': '命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,748 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,748 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,749 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,749 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,749 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,749 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,806 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:05 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380536cda7ca7b244064'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,807 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,807 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,808 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,808 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,808 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,808 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:05 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380536cda7ca7b244064'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,809 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,809 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,809 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,809 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,810 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:05.964+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,811 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-57dea2d7-e913-4f5c-8320-69eb1bf991de', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': '支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,812 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,812 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,813 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,813 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,813 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,813 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,870 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838062baf8a7049744674'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,871 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,872 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,872 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,873 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,873 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,873 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838062baf8a7049744674'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,873 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,874 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,874 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,874 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,874 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.038+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,876 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-679b241c-a49c-4b4a-a845-5f96c5ad4d65', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,877 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,877 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,878 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,878 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,878 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,879 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,935 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083806085877627768445a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:05,937 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:05,937 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,938 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:05,938 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:05,938 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:05,938 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083806085877627768445a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:05,939 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:05,939 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:05,939 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:05,939 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:05,940 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.115+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:05,941 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-085e8423-f037-4d03-92bb-18b81c73f01c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:05,942 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:05,943 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:05,943 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:05,943 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:05,943 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:05,944 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,003 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083806606e5dac45b74c84'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,005 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,005 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,006 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,006 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,006 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,006 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083806606e5dac45b74c84'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,007 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,007 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,007 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,007 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,008 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.162+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,009 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a22878a4-5522-4238-8375-ddcf3b5330cb', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'buildid-list    List the buildids in a perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,010 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,011 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,011 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,011 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,012 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,012 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,071 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838065877178748b44cc6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,072 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,073 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,073 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,074 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,074 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,074 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838065877178748b44cc6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,074 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,074 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,075 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,075 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,075 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.236+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,076 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-de2bfa07-8693-4e50-950c-09feeb5ef105', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data file\ndiff            Read two perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,077 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,077 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,078 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,078 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,078 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,078 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,131 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380654a2d073b492443a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,133 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,133 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,133 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,134 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,134 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,134 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380654a2d073b492443a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,134 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,134 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,135 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,135 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,135 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.299+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,137 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-94652a46-0dac-4b13-b1d5-b7207e01ad00', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,138 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,138 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,139 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,139 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,139 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,139 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,192 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083806ebb18f759fb448df'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,193 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,193 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,193 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,193 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,193 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,193 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083806ebb18f759fb448df'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,194 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,194 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,194 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,194 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,194 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.364+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,194 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-129e601c-5923-4ebb-a058-9fc993e75917', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data\nreport          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,195 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,195 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,195 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,195 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,195 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,195 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,254 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083806af571e3de7ca4f87'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,255 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,255 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,255 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,255 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,255 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,255 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083806af571e3de7ca4f87'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,255 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,255 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,255 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,256 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,256 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.409+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,256 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c726df7b-2408-4d94-ab03-cee85e52fe22', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,257 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,257 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,257 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,257 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,257 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,257 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,311 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380692fcfb198f89450f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,312 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,312 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,312 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,312 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,312 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,312 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380692fcfb198f89450f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,312 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,313 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,313 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,313 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,313 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.497+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,313 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0593418f-4be8-4bd1-890b-80e799b51247', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7760>, 'json_data': {'input': 'data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,314 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,314 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,314 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,314 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,314 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,314 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,366 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083806388394635ce64c6f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,367 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,367 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,367 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,367 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,367 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,367 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083806388394635ce64c6f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,368 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,368 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,368 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,368 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,368 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.570+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,449 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 08:38:06,449 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:38:06,449 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-da8b2492-5707-42b9-a8e6-c9c1b0083f35', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '在per-thread模式下，只监控指定的线程', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,449 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,450 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 08:38:06,450 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16dbcca00>
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,450 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 08:38:06,450 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16dbad8c0> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 08:38:06,482 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16dbc3160>
2025-07-23 08:38:06,482 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,482 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,483 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,483 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,483 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,533 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47315017532310866728759e008398c7d7810e154bc59b7bbeb4cac34a2f;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380646093ee82cd94592'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,533 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,533 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,534 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,534 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,534 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,534 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47315017532310866728759e008398c7d7810e154bc59b7bbeb4cac34a2f;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380646093ee82cd94592'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,534 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,534 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,534 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,534 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,534 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.688+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,535 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e90621a7-baf2-4a8e-b859-9b3085fa5eed', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '计数和采样只在该线程上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,535 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,535 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,535 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,535 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,536 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,536 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,584 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838065cfa75419a324cd6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,585 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,585 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,585 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,585 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,585 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,585 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838065cfa75419a324cd6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,585 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,585 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,586 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,586 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,586 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.774+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,586 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d1114dd8-2a36-484a-a4be-de24f8d56615', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '在per-process模式下，进程中的所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,587 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,587 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,587 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,587 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,587 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,587 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,637 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380638548f8851354a0a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,637 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,637 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,637 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,637 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,638 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,638 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380638548f8851354a0a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,638 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,638 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,638 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,638 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,638 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.828+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,639 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-dfe4dfcc-ba82-4695-8fc2-bdd813b35878', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '计数和采样在进程级别被合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,640 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,640 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,640 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,640 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,640 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,640 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,691 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838064c7278dec8a1494e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,692 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,692 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,692 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,693 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,693 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,693 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838064c7278dec8a1494e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,693 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,693 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,694 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,694 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,694 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.853+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,695 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4875bdd1-ebec-4917-9573-5f6bf3dcb1d6', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '在per-cpu模式下，指定处理器上所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,696 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,696 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,697 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,697 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,697 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,698 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,768 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:06 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380676b0b8dbc4fa4710'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,769 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,770 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,771 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,771 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,771 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,771 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:06 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380676b0b8dbc4fa4710'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,771 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,772 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,772 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,772 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,772 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:06.932+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,774 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-1f5cd87c-a973-4932-82b2-2addbabcf4f7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '计数和采样在每个CPU上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,775 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,776 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,776 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,777 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,777 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,777 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,834 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380691d7dfa6662d4b6c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:06,837 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:06,837 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,838 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:06,838 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:06,838 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:06,838 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380691d7dfa6662d4b6c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:06,838 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:06,839 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:06,839 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:06,839 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:06,840 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.019+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:06,840 rag.components.splitter.splitter_utils INFO: 使用text分割器进行二级退化分割
2025-07-23 08:38:06,844 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:38:06,845 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:38:06,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 08:38:06,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 08:38:06,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 08:38:06,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 08:38:06,848 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 08:38:06,926 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 08:38:06,926 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 08:38:06,926 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-14364894-a76c-4b36-934f-19b47ec42621', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Multi-language Performance Analysis Guide\n多语言性能分析指南\n\nIntroduction 介绍\nPerformance analysis is crucial for system optimization', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:06,926 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:06,926 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 08:38:06,927 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30cc1a380>
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 08:38:06,927 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 08:38:06,927 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16dab7440> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 08:38:06,960 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30cc1a3b0>
2025-07-23 08:38:06,960 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:06,961 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:06,961 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:06,961 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:06,961 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,028 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=1a0c380d17532310871501091e0058cc4793dfe9598faff165bae26a9db342;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083807f930ab4e5ae44709'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,028 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,028 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,029 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,029 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,029 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,029 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=1a0c380d17532310871501091e0058cc4793dfe9598faff165bae26a9db342;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083807f930ab4e5ae44709'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,029 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,029 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,029 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,029 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,029 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.192+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,030 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-218ad044-0c92-4414-85b0-9d05efa5fc21', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '性能分析对系统优化至关重要', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,030 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,030 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,031 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,031 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,031 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,031 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,095 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380752bc1bcb77ed4629'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,096 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,096 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,097 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,097 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,097 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,097 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380752bc1bcb77ed4629'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,097 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,097 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,098 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,098 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,098 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.264+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,098 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4ed71baa-c240-44e4-8854-e85c76175a8e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'We need to understand both English and Chinese documentation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,099 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,099 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,100 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,100 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,100 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,100 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,171 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838070869307457244497'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,172 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,185 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,186 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,186 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,186 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,186 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838070869307457244497'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,186 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,186 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,187 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,187 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,187 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.339+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,187 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-03eda7cb-f14a-48fc-a76c-9f5e0618c63e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '我们需要理解中英文文档', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,188 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,189 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,189 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,189 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,189 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,189 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,252 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083807370e5692b07a4876'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,253 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,253 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,253 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,253 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,253 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,253 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083807370e5692b07a4876'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,254 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,254 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,254 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,254 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,254 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.415+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,254 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a9465ebf-ad0d-4119-b9fe-f9d246faee88', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Hardware Events 硬件事件\nCPU cycles are fundamental performance metrics', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,255 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,255 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,255 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,255 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,256 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,256 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,315 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380747a8072ab12e4549'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,316 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,316 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,316 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,316 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,316 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,316 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380747a8072ab12e4549'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,316 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,316 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,316 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,316 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,316 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.483+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,317 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-08075da6-f3ba-4d09-92e9-7ce8c9f01ce7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'CPU周期是基本的性能指标', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,317 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,317 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,317 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,318 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,318 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,318 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,387 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083807212eb4b2a9934a70'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,387 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,387 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,387 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,387 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,387 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,387 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083807212eb4b2a9934a70'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,388 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,388 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,388 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,388 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,388 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.552+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,388 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-678ab07a-065c-4b6e-9d65-609c7e65ba23', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Memory access patterns affect overall performance', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,389 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,389 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,389 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,390 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,390 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,390 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,458 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838074de78d604ff842e8'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,459 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,459 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,460 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,460 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,460 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,460 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838074de78d604ff842e8'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,460 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,461 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,461 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,461 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,461 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.622+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,462 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d64b8007-585d-42ec-9411-5d10421e9c3d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '内存访问模式影响整体性能', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,463 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,463 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,464 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,464 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,464 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,464 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,529 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838073109e187b5184186'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,530 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,530 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,531 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,531 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,531 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,532 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838073109e187b5184186'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,532 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,532 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,533 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,533 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,533 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.707+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,534 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2447f7ba-1bfe-4807-a6f1-04f71efe340b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Cache misses indicate performance bottlenecks', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,535 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,536 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,536 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,536 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,537 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,537 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,601 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838075ae6689815814d2a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,603 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,603 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,604 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,604 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,604 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,605 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838075ae6689815814d2a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,605 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,605 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,606 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,606 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,606 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.767+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,607 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-86142c59-6cfd-4a73-97b2-105035e537a4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '缓存未命中表示性能瓶颈', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,609 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,609 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,610 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,610 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,611 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,611 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,672 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838077eb862730c994b93'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,673 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,674 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,674 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,674 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,674 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,675 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838077eb862730c994b93'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,675 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,675 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,675 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,676 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,676 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.859+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,677 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0ddddfcb-f469-4792-874d-83d5ca79e590', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Software Events 软件事件\nContext switches occur frequently in multi-threaded applications', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,678 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,679 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,679 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,679 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,680 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,680 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,741 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380729aecc1d22db4ee6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,742 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,742 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,743 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,743 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,743 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,743 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380729aecc1d22db4ee6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,744 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,744 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,744 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,744 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,745 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.903+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,746 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ebc8cd1c-4c17-4f04-98ba-4198d74b67af', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '上下文切换在多线程应用中频繁发生', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,747 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,748 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,748 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,749 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,749 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,749 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,811 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:07 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083807b6fc41471fbd423f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,813 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,813 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,814 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,814 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,814 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,814 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:07 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083807b6fc41471fbd423f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,815 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,815 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,815 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,816 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,816 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:07.972+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,817 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0b67b41b-84f6-410e-a320-6863553db43e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Page faults indicate memory pressure', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,818 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,819 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,819 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,819 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,820 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,820 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,881 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808aba0edb267ed4cbd'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,882 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,883 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,884 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,884 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,884 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,884 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808aba0edb267ed4cbd'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,885 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,885 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,886 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,886 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,886 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.044+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,887 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-afe5b3a4-887b-4151-b89e-70043a96fb90', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '页面错误表示内存压力', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,888 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,889 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,889 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,889 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,890 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,890 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,956 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808d9ef445999984da6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:07,958 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:07,958 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,959 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:07,959 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:07,959 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:07,959 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808d9ef445999984da6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:07,960 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:07,960 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:07,960 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:07,960 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:07,961 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.117+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:07,961 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-8e583c84-a464-41f5-a8d8-fc4450e5ae2d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'System calls are expensive operations', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:07,963 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:07,963 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:07,964 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:07,965 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:07,965 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:07,965 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,034 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838082a461fb6e4e8470e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,036 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,037 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,037 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,037 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,037 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,038 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838082a461fb6e4e8470e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,038 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,038 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,039 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,039 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,039 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.204+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,040 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-335424f2-fbc6-4ee8-a1cd-ef259117cafc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '系统调用是昂贵的操作', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,043 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,043 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,044 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,044 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,044 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,045 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,108 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838083ab8850deb054685'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,108 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,108 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,109 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,109 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,109 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,109 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838083ab8850deb054685'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,109 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,109 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,110 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,110 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,110 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.323+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,110 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ad85813b-7288-4f72-8d77-b943a333cf5d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Analysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,111 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,111 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,112 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,112 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,112 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,112 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,181 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838082c60090763554882'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,182 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,183 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,183 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,183 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,183 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,184 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838082c60090763554882'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,184 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,184 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,184 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,185 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,185 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.384+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,186 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b231705e-288d-4eae-8b70-9bfbff630bd6', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Perf是Linux性能分析的主要工具', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,187 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,188 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,188 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,188 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,189 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,189 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,259 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838085a90d559bd3345de'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,260 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,261 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,262 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,262 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,262 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,262 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838085a90d559bd3345de'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,262 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,263 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,263 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,263 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,264 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.436+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,264 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d7b06a2b-265b-47ce-9133-1eea6c037fc8', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Top provides real-time system monitoring', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,266 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,266 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,267 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,267 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,267 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,267 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,332 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808750972768b544d6b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,332 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,332 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,332 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,332 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,333 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,333 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808750972768b544d6b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,333 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,333 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,333 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,333 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,333 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.493+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,334 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-85228f97-0d6b-49f7-ad01-42a49247896a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Top提供实时系统监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,334 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,334 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,334 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,334 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,334 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,335 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,393 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838089c0e5278a4994991'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,393 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,393 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,393 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,393 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,393 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,393 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838089c0e5278a4994991'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,393 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,393 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,394 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,394 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,394 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.561+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,394 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c59c13dc-8458-4526-b51c-8261407e5ba6', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Htop offers an improved interface over top', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,394 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,395 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,395 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,395 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,395 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,395 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,461 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380878851c385a924cc1'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,461 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,461 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,461 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,461 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,461 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,462 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380878851c385a924cc1'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,462 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,462 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,462 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,462 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,462 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.613+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,463 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a8baca2a-c823-4c6c-9061-d00c3461cd8c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Htop提供比top更好的界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,464 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,464 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,464 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,464 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,464 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,464 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,529 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808e57e71f4687b4b18'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,529 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,530 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,530 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,530 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,530 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,531 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808e57e71f4687b4b18'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,531 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,531 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,531 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,531 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,532 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.686+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,532 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-70102061-2a46-4e80-baf0-f91966515e59', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Best Practices 最佳实践\nAlways start with a baseline measurement', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,534 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,534 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,534 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,534 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,535 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,535 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,595 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808d948c1f8d47644d9'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,596 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,597 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,597 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,597 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,598 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,598 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808d948c1f8d47644d9'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,598 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,598 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,599 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,599 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,599 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.759+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,600 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bf3e31e6-f0f1-48de-b8d3-b8a26fe925be', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '始终从基线测量开始', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,602 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,602 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,603 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,603 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,603 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,603 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,671 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083808687e3181af0740c9'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,672 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,672 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,672 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,672 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,672 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,673 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083808687e3181af0740c9'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,673 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,673 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,673 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,673 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,674 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.834+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,674 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a7c00cca-34fe-47a3-abd6-b6e6aef9417b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Monitor both user and kernel space', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,675 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,675 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,675 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,675 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,676 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,676 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,735 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380847af9249e3994899'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,736 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,736 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,737 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,737 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,737 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,737 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380847af9249e3994899'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,738 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,738 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,738 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,738 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,739 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:08.898+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,740 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c4974727-f98e-4411-825c-a96721f0b860', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '同时监控用户空间和内核空间', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,741 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,742 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,742 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,743 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,743 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,743 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,809 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:08 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838086122b714a364405b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,810 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,811 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,812 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,812 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,812 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,812 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:08 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838086122b714a364405b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,813 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,813 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,813 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,813 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,814 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.021+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,814 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-fa45aeca-f7d4-4fb9-9d9e-0cc705e8e0c3', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Use appropriate sampling rates', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,816 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,816 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,817 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,817 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,817 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,818 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,877 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838094634a00e75034731'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,879 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,879 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,880 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,880 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,880 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,880 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838094634a00e75034731'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,881 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,881 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,881 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,881 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,882 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.046+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,883 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bb93c9cb-d205-4691-b6e5-ee4bcfe99078', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '使用适当的采样率', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,884 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,885 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,885 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,886 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,886 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,886 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,952 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083809bac59ca7903e4920'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:08,953 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:08,954 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,955 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:08,955 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:08,955 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:08,955 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083809bac59ca7903e4920'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:08,955 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:08,956 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:08,956 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:08,956 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:08,957 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.158+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:08,957 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-3a57ca8e-b10e-491e-9d7b-db7e295e8f87', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Common Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:08,959 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:08,960 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:08,961 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:08,961 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:08,961 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:08,961 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,021 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838099a5752cf07314683'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,022 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,023 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,023 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,023 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,023 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,024 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838099a5752cf07314683'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,024 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,024 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,025 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,025 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,025 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.191+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,026 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7de1bccd-5df5-4a3d-b563-dea75ce474f9', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '高CPU使用率可能表示算法效率低下', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,028 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,028 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,029 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,029 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,029 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,029 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,089 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083809ef5ea339ceac4d7d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,090 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,090 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,090 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,090 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,090 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,091 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083809ef5ea339ceac4d7d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,091 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,091 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,091 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,091 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,091 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.251+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,092 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bc9cf83f-ca21-4b40-a5f1-e3196525ed84', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Memory leaks cause gradual performance degradation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,092 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,093 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,093 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,093 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,093 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,093 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,155 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838090ae135e3237f41f2'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,155 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,155 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,156 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,156 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,156 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,156 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838090ae135e3237f41f2'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,156 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,156 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,157 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,157 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,157 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.326+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,158 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c56a7eba-b0bd-4051-ab0e-e5e744c1a35c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '内存泄漏导致性能逐渐下降', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,158 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,159 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,159 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,159 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,159 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,159 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,222 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072308380946e92b1cf4524570'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,223 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,223 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,224 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,224 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,224 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,224 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072308380946e92b1cf4524570'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,225 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,225 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,225 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,225 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,226 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.393+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,227 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-61f831ea-8c93-4fcf-abce-7cfec8db9182', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'I/O bottlenecks limit overall throughput', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,228 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,229 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,231 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,231 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,233 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,234 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,293 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838093dc7c545c2684d05'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,295 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,295 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,295 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,296 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,296 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,296 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838093dc7c545c2684d05'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,296 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,297 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,297 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,297 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,297 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.463+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,299 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-cd7d4770-46ba-4a92-90d1-f890b7e5e871', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'I/O瓶颈限制整体吞吐量', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,300 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,301 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,301 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,301 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,302 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,302 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,363 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230838097b4a4dc61ae84cec'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,364 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,365 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,365 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,366 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,366 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,368 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230838097b4a4dc61ae84cec'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,387 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,387 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,388 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,388 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,389 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.571+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,404 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e5bf4a5b-2d50-45f6-af7a-918776ccd6f3', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': 'Optimization Techniques 优化技术\nProfile before optimizing', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,408 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,412 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,414 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,414 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,420 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,421 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,488 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083809f54706dba94046a5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,488 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,488 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,488 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,488 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,488 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,488 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083809f54706dba94046a5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,488 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,488 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,489 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,489 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,489 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.654+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,489 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a5639941-a52b-4802-99d4-527721bf9b1e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16dad7880>, 'json_data': {'input': '在优化之前进行性能分析', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 08:38:09,489 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings
2025-07-23 08:38:09,489 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,490 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 08:38:09,490 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,490 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 08:38:09,490 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 08:38:09,552 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'Date', b'Wed, 23 Jul 2025 00:38:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723083809765ae2bc95454244'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 08:38:09,552 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "HTTP/1.1 404 Not Found"
2025-07-23 08:38:09,553 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 08:38:09,553 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 08:38:09,553 httpcore.http11 DEBUG: response_closed.started
2025-07-23 08:38:09,553 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 08:38:09,553 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings "404 Not Found" Headers([('date', 'Wed, 23 Jul 2025 00:38:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723083809765ae2bc95454244'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 08:38:09,553 openai._base_client DEBUG: request_id: None
2025-07-23 08:38:09,553 openai._base_client DEBUG: Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/openai/_base_client.py", line 1024, in request
    response.raise_for_status()
  File "/Users/caixiaomeng/miniconda3/envs/py310/lib/python3.10/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://open.bigmodel.cn/api/paas/v4/embeddings/embeddings'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
2025-07-23 08:38:09,553 openai._base_client DEBUG: Not retrying
2025-07-23 08:38:09,553 openai._base_client DEBUG: Re-raising status error
2025-07-23 08:38:09,553 rag.components.splitter.splitter_utils WARNING: 嵌入相似度计算失败: Error code: 404 - {'timestamp': '2025-07-23T00:38:09.718+00:00', 'status': 404, 'error': 'Not Found', 'path': '/v4/embeddings/embeddings'}，将使用启发式方法
2025-07-23 08:38:09,556 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:38:09,556 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:38:09,556 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:38:09,556 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:38:09,557 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 08:38:09,557 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 08:38:09,557 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 08:38:09,557 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 08:38:09,558 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 08:38:09,558 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 08:38:09,559 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 08:38:09,559 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 08:38:09,560 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:18:42,275 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 09:18:42,276 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 09:18:42,276 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 09:18:42,277 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 09:18:42,281 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:18:42,281 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:18:42,281 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:18:42,282 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:18:42,282 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:18:42,282 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:18:42,283 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:18:42,283 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:18:42,283 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:18:42,283 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:18:42,286 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:18:42,286 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:18:42,286 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:18:42,286 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:18:42,287 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:18:42,287 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:18:42,287 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:18:42,287 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:18:42,292 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:18:42,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:18:42,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:18:42,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:18:42,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:18:42,293 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:18:42,294 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:18:42,294 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:18:42,294 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:18:42,294 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:18:42,295 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:18:42,295 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:18:42,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:18:42,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 09:18:42,296 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 09:18:42,297 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:18:42,297 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:18:42,297 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:18:42,299 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:18:42,299 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:18:42,300 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:18:42,300 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:18:42,300 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:18:42,300 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 09:18:42,301 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:18:42,301 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 09:18:42,301 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:18:42,301 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 09:18:42,302 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:18:42,302 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 09:18:42,302 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:18:42,303 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:18:42,303 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:18:42,303 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:18:42,304 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:18:42,305 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:18:42,308 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:18:42,309 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:18:42,309 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:18:42,309 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:18:42,311 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:18:42,311 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:18:42,311 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:18:42,312 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:18:42,317 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:18:42,318 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:18:42,318 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:18:42,318 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAIEmbedding.__init__() missing 1 required positional argument: 'batch_size'，将使用启发式方法进行分割
2025-07-23 09:18:42,318 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:18:42,330 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAIEmbedding.__init__() missing 1 required positional argument: 'batch_size'，将使用启发式方法进行分割
2025-07-23 09:18:42,330 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:18:42,331 rag.components.splitter.splitter_utils INFO: 使用text分割器进行二级退化分割
2025-07-23 09:18:42,333 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:18:42,333 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:18:42,334 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:18:42,334 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 09:18:42,334 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 09:18:42,334 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:18:42,334 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:18:42,334 rag.components.splitter.splitter_utils WARNING: 初始化嵌入客户端失败: OpenAIEmbedding.__init__() missing 1 required positional argument: 'batch_size'，将使用启发式方法进行分割
2025-07-23 09:18:42,334 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:18:42,336 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:18:42,337 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:18:42,337 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:18:42,337 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:18:42,337 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:18:42,337 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 09:18:42,338 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:18:42,338 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 09:18:42,339 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:18:42,339 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 09:18:42,340 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:18:42,340 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 09:18:42,341 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:25:24,831 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 09:25:24,832 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 09:25:24,832 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 09:25:24,832 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 09:25:24,836 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:25:24,836 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:25:24,836 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:25:24,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:25:24,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:25:24,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:25:24,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:25:24,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:25:24,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:25:24,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:25:24,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:25:24,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:25:24,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:25:24,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:25:24,842 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:25:24,842 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:25:24,842 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:25:24,843 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:25:24,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:25:24,848 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:25:24,849 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:25:24,849 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:25:24,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:25:24,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:25:24,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:25:24,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 09:25:24,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 09:25:24,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:25:24,851 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:25:24,851 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:25:24,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:25:24,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:25:24,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:25:24,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:25:24,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:25:24,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 09:25:24,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:25:24,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 09:25:24,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:25:24,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 09:25:24,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:25:24,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 09:25:24,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:25:24,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:25:24,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:25:24,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:25:24,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:25:24,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:25:24,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:25:24,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:25:24,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:25:24,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:25:24,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:25:24,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:25:24,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:25:24,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:25:24,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:25:24,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:25:24,866 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:25:24,923 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:25:24,923 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:25:24,937 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-cf50bbea-653e-4ea7-9b13-0c94d67cda19', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:24,949 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:24,949 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 09:25:24,950 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f856e60>
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:25:24,950 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 09:25:24,950 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16f8808c0> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 09:25:25,039 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f8571c0>
2025-07-23 09:25:25,039 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,048 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,048 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,052 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,052 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,289 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:25 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47318e17532339253002450e78c1b457efaace8fa8f6ddca58ebd3521f56;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925251a81c57ca1854ad6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:25,290 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:25,290 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,312 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:25,312 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:25,313 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:25,313 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:25 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47318e17532339253002450e78c1b457efaace8fa8f6ddca58ebd3521f56;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925251a81c57ca1854ad6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:25,313 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:25,320 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-198ff7d2-bb62-4239-ac55-f5a088682df1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:25,320 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:25,320 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,320 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,320 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,320 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,320 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,471 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:25 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092525767e4d42a8344960'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:25,471 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:25,472 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,491 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:25,491 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:25,491 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:25,491 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:25 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092525767e4d42a8344960'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:25,492 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:25,501 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-589e3e5d-4e72-4dc5-accb-aa0fab388a0e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:25,501 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:25,502 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,502 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,502 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,502 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,502 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,601 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:25 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092525a29d847ba0334ebe'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:25,602 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:25,602 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,620 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:25,620 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:25,620 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:25,621 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:25 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092525a29d847ba0334ebe'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:25,621 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:25,631 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-29a14e37-bd33-42db-8568-cc11d628d407', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'Perf基于最新版本Linux内核的perf_events接口', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:25,632 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:25,632 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,632 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,632 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,632 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,632 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,733 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:25 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925258f79fa63db244234'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:25,733 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:25,734 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,751 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:25,751 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:25,751 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:25,751 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:25 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925258f79fa63db244234'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:25,752 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:25,768 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e55a9d3f-759c-4fd7-a5c6-cf6ae19126f0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'Perf基于最新版本Linux内核的perf_events接口', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:25,768 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:25,768 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,769 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,769 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,769 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,769 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,892 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092526be110abb73a94fd6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:25,893 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:25,894 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,910 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:25,910 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:25,911 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:25,911 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092526be110abb73a94fd6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:25,911 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:25,928 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c198d438-2298-4f8f-95b4-981a15d339fc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '这篇文章通过示例展示了Perf工具的使用', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:25,929 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:25,929 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:25,929 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:25,930 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:25,930 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:25,930 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,028 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925263e543b80d5da406f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,029 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,030 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,048 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,049 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,049 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,049 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925263e543b80d5da406f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,050 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,066 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6b94b24e-15e9-4c30-99db-d59c84b5ff2d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '这篇文章通过示例展示了Perf工具的使用', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,066 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,067 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,067 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,067 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,067 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,067 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,175 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309252678cc0635dc0d4738'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,176 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,177 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,193 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,193 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,194 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,194 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309252678cc0635dc0d4738'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,194 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,210 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6a43fa45-be0a-45e6-a43e-71ad4bcd34f7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,211 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,211 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,212 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,212 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,212 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,212 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,310 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925263994c62571cc4fa5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,311 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,312 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,327 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,328 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,328 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,328 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925263994c62571cc4fa5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,328 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,344 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e7e59b78-0890-471c-8be4-a9459be0c35b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,345 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,345 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,345 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,345 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,345 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,346 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,470 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925269172e8f865d44f01'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,471 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,472 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,473 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,473 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,473 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,473 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925269172e8f865d44f01'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,474 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,492 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-22cc9f05-2d85-4921-bf6e-cb1ee93e97ec', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,493 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,493 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,494 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,494 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,494 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,494 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,585 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925267eb08ab1e4384200'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,585 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,585 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,602 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,602 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,602 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,602 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925267eb08ab1e4384200'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,602 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,609 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a5017c9f-afc0-4f90-9c64-6e6a32f935d1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,610 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,610 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,610 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,610 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,610 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,610 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,713 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:26 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925264a17e004017345f3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,714 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,714 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,732 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,732 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,732 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,732 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:26 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925264a17e004017345f3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,733 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,745 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-614aa82a-3fa0-45ac-a55d-b08c00064e81', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,746 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,746 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,746 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,746 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,746 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,746 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,847 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092527e52d9361c32b4212'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:26,848 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:26,848 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,881 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:26,882 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:26,882 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:26,882 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092527e52d9361c32b4212'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:26,883 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:26,903 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a2352d38-1354-4733-a378-dbec710ba322', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:26,904 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:26,904 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:26,904 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:26,905 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:26,905 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:26,905 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,003 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309252745ce6724ca374f97'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,004 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,005 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,021 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,021 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,022 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,022 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309252745ce6724ca374f97'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,022 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,039 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bd70dfc9-d43b-4ed4-8198-241286a31de0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,039 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,039 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,040 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,040 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,040 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,040 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,143 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092527b5c46db1a74c42c7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,144 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,145 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,160 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,160 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,160 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,161 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092527b5c46db1a74c42c7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,161 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,178 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-8096f6ee-a743-4307-b0e8-458836a3faa4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,179 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,179 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,179 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,179 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,180 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,180 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,277 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092527aab338ab70a84eb1'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,278 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,279 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,306 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,306 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,307 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,307 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092527aab338ab70a84eb1'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,307 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,315 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ded730a4-9b9b-4dac-889a-9c81577c98c9', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,315 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,315 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,315 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,315 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,315 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,316 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,412 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925279f01f379cdff4e22'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,413 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,413 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,471 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,472 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,472 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,473 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925279f01f379cdff4e22'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,473 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,493 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d4f9b0bb-8c8d-45f5-b8d6-11e128c2c180', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,494 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,494 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,495 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,495 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,495 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,495 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,591 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925277dca22ab7d7c4a3a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,592 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,593 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,593 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,594 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,594 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,594 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925277dca22ab7d7c4a3a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,594 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,610 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-441e9d0a-b165-4be0-85ff-2be698b84ee2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'buildid-list    List the buildids in a perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,611 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,611 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,611 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,611 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,612 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,612 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,717 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:27 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925276d7a9de371a9479d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,717 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,718 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,736 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,736 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,736 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,736 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:27 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925276d7a9de371a9479d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,736 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,747 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7e542161-6b46-442e-94be-87ef48e00554', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80ba30>, 'json_data': {'input': 'buildid-list    List the buildids in a perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,747 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,748 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,748 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,748 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,748 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,748 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,854 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528bef7b21414e14ebe'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,855 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,855 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,857 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,857 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,857 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,857 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528bef7b21414e14ebe'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,857 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:27,869 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f64856a2-7c9b-4216-b4b8-4a48507c0991', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80ba30>, 'json_data': {'input': 'data file\ndiff            Read two perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:27,870 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:27,870 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,870 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:27,871 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,871 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:27,871 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:27,973 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528e9e4c830cbb54a9b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:27,974 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:27,974 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:27,988 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:27,989 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:27,989 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:27,989 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528e9e4c830cbb54a9b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:27,990 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,005 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6dc7e47a-7336-4053-a2a6-ece2590d8eee', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data file\ndiff            Read two perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,006 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,006 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,006 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,006 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,006 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,006 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,109 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528e2007f5c69d84fc0'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,110 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,110 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,124 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,125 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,125 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,125 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528e2007f5c69d84fc0'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,126 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,142 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-17db4d29-e6c9-4caf-90dc-b035c5f58648', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,143 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,143 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,143 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,144 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,144 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,144 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,246 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528894854c794d04033'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,248 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,248 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,262 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,263 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,263 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,263 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528894854c794d04033'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,263 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,280 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-554d127c-3194-4d55-a8b7-d38f7c0eadb1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,280 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,281 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,281 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,281 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,281 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,281 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,393 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528df5518afdd404471'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,395 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,395 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,396 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,397 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,397 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,397 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528df5518afdd404471'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,397 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,415 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bb99772a-3b3d-433c-bb2d-e4d7f84b7176', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data\nreport          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,416 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,416 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,417 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,417 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,417 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,417 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,568 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528a83ad7d451d64b4a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,571 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,571 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,573 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,573 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,574 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,574 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528a83ad7d451d64b4a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,575 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,591 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6fb7c759-20de-4edd-825d-266e4b64f73f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data\nreport          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,592 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,592 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,593 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,593 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,593 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,593 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,698 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:28 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925286b361ff28b8e499a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,699 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,699 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,699 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,699 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,699 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,699 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:28 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925286b361ff28b8e499a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,699 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,708 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5ca6092f-dd99-45e7-b09e-bfa2cb2d1db2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,708 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,708 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,708 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,709 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,709 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,709 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,807 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092528d047be655be54966'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,808 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,808 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,809 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,809 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,809 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,809 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092528d047be655be54966'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,809 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,819 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-145ab886-be5a-4987-859f-5f8ee65afe7b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,820 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,820 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,820 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,820 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,821 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,821 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,908 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092529bb79bb1efab6458f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:28,909 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:28,909 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,911 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:28,911 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:28,911 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:28,911 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092529bb79bb1efab6458f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:28,911 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:28,925 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-547e871a-95ed-4e4f-92fb-474532f68c49', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:28,925 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:28,926 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:28,926 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:28,926 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:28,926 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:28,926 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,026 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925293b0ef73f6f84458b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,027 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,028 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,030 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,030 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,030 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,030 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925293b0ef73f6f84458b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,031 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,049 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-27a3d9e2-317e-4566-882e-ec12fe851d51', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,050 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,050 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,050 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,050 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,051 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,051 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,145 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092529f55c5d5afedd43bf'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,147 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,147 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,149 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,149 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,149 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,149 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092529f55c5d5afedd43bf'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,150 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,168 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-20481194-1c49-4224-b6d6-c334a18d1b5f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80b9a0>, 'json_data': {'input': '硬件事件\nPMU硬件事件取决与特定的CPU，由CPU供应商提供文档', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,168 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,168 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,169 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,169 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,169 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,169 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,267 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092529aa08fcaf309b4f21'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,268 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,268 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,271 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,271 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,271 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,272 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092529aa08fcaf309b4f21'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,272 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,367 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:25:29,367 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:25:29,367 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-75dd7061-0896-4be2-961a-b855f9825d09', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '在per-thread模式下，只监控指定的线程', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,367 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,367 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 09:25:29,368 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f8b8f70>
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:25:29,368 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 09:25:29,368 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16f8810c0> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 09:25:29,469 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f8bb6d0>
2025-07-23 09:25:29,469 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,470 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,470 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,470 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,470 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,661 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:29 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a472f8217532339297225443e005a5d273554413e14fd27561dabe4350df2;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092529ca937bc8844845f3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,663 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,663 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,689 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,690 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,690 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,691 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:29 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a472f8217532339297225443e005a5d273554413e14fd27561dabe4350df2;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092529ca937bc8844845f3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,691 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,709 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ef943937-c3eb-499a-a889-67de23d96112', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样只在该线程上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,710 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,710 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,710 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,711 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,711 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,711 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,811 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092530ff2c1252acef4087'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,811 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,811 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,842 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,843 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,843 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,843 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092530ff2c1252acef4087'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,843 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,851 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ea1bee88-62e0-4bc6-a2af-86d475d1efec', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样只在该线程上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,852 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,852 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,852 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,852 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,852 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,852 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,948 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309253050e1e0ea9ac942bd'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:29,949 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:29,949 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,964 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:29,964 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:29,964 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:29,964 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309253050e1e0ea9ac942bd'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:29,965 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:29,978 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a6aab360-f034-4b6a-bb5d-3ede30efc4b0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '在per-process模式下，进程中的所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:29,978 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:29,979 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:29,979 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:29,979 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:29,979 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:29,979 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,073 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092530c32f851c3c884dab'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:30,074 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:30,074 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,086 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:30,087 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:30,087 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:30,087 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092530c32f851c3c884dab'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:30,088 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:30,106 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-af350439-a472-4759-90f0-daba1b4b15be', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '在per-process模式下，进程中的所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:30,106 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:30,107 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,107 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:30,107 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,107 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:30,107 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,195 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092530bccf87d807dd4a2c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:30,196 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:30,197 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,226 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:30,226 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:30,226 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:30,227 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092530bccf87d807dd4a2c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:30,227 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:30,247 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c852322e-d1a8-44ea-afd0-5bc1fbea529f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样在进程级别被合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:30,247 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:30,248 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,248 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:30,248 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,248 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:30,248 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,350 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309253082c6b8a7dd034311'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:30,352 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:30,352 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,382 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:30,382 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:30,383 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:30,383 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309253082c6b8a7dd034311'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:30,384 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:30,403 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6eb6be1b-0343-487b-aca5-3cb1031b47a5', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样在进程级别被合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:30,404 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:30,405 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,405 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:30,405 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,405 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:30,405 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,496 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092530dc77fbe038e54f07'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:30,498 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:30,498 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,528 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:30,528 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:30,528 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:30,529 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092530dc77fbe038e54f07'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:30,529 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:30,547 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a1d88561-83f1-418f-a80d-db397f2c87f6', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '在per-cpu模式下，指定处理器上所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:30,548 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:30,548 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,549 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:30,549 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,549 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:30,549 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,693 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:30 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092530b7ed7298f22a4100'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:30,694 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:30,695 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,696 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:30,696 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:30,696 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:30,697 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:30 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092530b7ed7298f22a4100'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:30,697 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:30,716 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b29acbfd-11c7-41d9-977c-ddb985d90afa', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '在per-cpu模式下，指定处理器上所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:30,717 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:30,717 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:30,718 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:30,718 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:30,718 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:30,718 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:31,257 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:31 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925318ceff88573f545fe'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:31,259 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:31,259 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:31,288 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:31,289 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:31,289 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:31,290 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:31 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230925318ceff88573f545fe'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:31,290 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:31,309 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c7527cc0-dab9-41ee-946d-bff233d7ce12', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样在每个CPU上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:31,310 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:31,310 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:31,310 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:31,311 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:31,311 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:31,311 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:31,401 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:31 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309253149ed0b9bc56e42ae'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:31,402 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:31,402 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:31,473 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:25:31,474 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:31,474 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:25:31,474 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:25:31 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309253149ed0b9bc56e42ae'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:25:31,475 openai._base_client DEBUG: request_id: None
2025-07-23 09:25:31,494 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-af3cfda0-5921-4c33-b00b-7a95206cf96c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16f80bbe0>, 'json_data': {'input': '计数和采样在每个CPU上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:25:31,495 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:25:31,495 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:25:31,495 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:25:31,495 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:25:31,495 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:25:31,496 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:25:31,586 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:25:31 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230925313a7c4a5d62464954'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:25:31,588 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:25:31,588 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:25:31,604 httpcore.http11 DEBUG: receive_response_body.failed exception=KeyboardInterrupt()
2025-07-23 09:25:31,604 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:25:31,604 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:36,844 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 09:27:36,845 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 09:27:36,845 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 09:27:36,845 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md
2025-07-23 09:27:36,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:27:36,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:27:36,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:27:36,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:27:36,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:27:36,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:27:36,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:27:36,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:27:36,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:27:36,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:27:36,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:27:36,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:27:36,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:27:36,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:27:36,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:27:36,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:27:36,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:27:36,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:27:36,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:27:36,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:27:36,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:27:36,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:27:36,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:27:36,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:27:36,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:27:36,861 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:27:36,861 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:27:36,861 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:27:36,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:27:36,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:27:36,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:27:36,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 09:27:36,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 09:27:36,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:27:36,863 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:27:36,863 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:27:36,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:27:36,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:27:36,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:27:36,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:27:36,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:27:36,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 09:27:36,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:27:36,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 09:27:36,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:27:36,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 09:27:36,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:27:36,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 09:27:36,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:27:36,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:27:36,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:27:36,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 09:27:36,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 09:27:36,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:27:36,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:27:36,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:27:36,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:27:36,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 09:27:36,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: record, report, annotate, script, bench等。

支持的命...
2025-07-23 09:27:36,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: buildid-list    List the buildids in a perf.dat...
2025-07-23 09:27:36,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 09:27:36,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 09:27:36,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 09:27:36,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 09:27:36,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 09:27:36,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 09:27:36,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]

使用模式
Perf支持多种使用模式，包括per...
2025-07-23 09:27:36,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 09:27:36,879 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:27:36,937 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:27:36,937 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:27:36,951 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-db0c6524-fb04-4575-9dfc-fdb6928eb60d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:36,961 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:36,961 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 09:27:36,962 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16be52e00>
2025-07-23 09:27:36,962 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:36,962 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:36,962 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 09:27:36,962 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:36,962 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:36,963 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 09:27:36,963 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16be788c0> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 09:27:37,021 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16be53160>
2025-07-23 09:27:37,021 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,022 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,022 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,022 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,022 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,248 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:37 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47318117532340572752224e005bc7abaf8927c2be9c3a43ec302fa7ca97;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092737684ec39902ab4d0b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:37,251 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:37,251 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,280 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:37,281 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:37,281 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:37,281 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:37 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47318117532340572752224e005bc7abaf8927c2be9c3a43ec302fa7ca97;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092737684ec39902ab4d0b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:37,282 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:37,301 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-fc58026f-bcd9-4709-8d5c-2a6681c1022a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:37,302 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:37,302 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,303 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,303 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,303 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,303 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,410 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:37 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927370f793d8b7a7946f8'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:37,410 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:37,410 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,472 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:37,472 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:37,472 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:37,472 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:37 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927370f793d8b7a7946f8'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:37,472 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:37,486 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-622eb544-bca6-40b7-a436-bbeafde4d7b1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:37,487 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:37,487 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,487 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,487 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,487 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,487 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,585 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:37 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309273769b66c8fc6c94fcb'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:37,586 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:37,586 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,603 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:37,603 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:37,603 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:37,604 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:37 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309273769b66c8fc6c94fcb'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:37,604 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:37,619 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-79e56501-6218-46cc-a1e5-66868a804a32', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'Perf基于最新版本Linux内核的perf_events接口', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:37,620 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:37,620 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,620 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,620 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,620 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,621 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,731 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:37 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092737c4d156d5e4004079'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:37,732 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:37,732 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,748 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:37,748 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:37,749 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:37,749 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:37 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092737c4d156d5e4004079'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:37,749 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:37,763 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2a24b6f3-19c5-4875-b321-3d8e475b6737', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'Perf基于最新版本Linux内核的perf_events接口', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:37,764 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:37,764 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,764 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,764 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,764 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,764 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,865 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092738c2d9c6a5239b4da5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:37,866 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:37,866 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,883 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:37,883 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:37,883 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:37,884 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092738c2d9c6a5239b4da5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:37,884 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:37,902 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-357f6b80-ac40-4302-ae28-8f9fcb77e6d3', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '这篇文章通过示例展示了Perf工具的使用', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:37,903 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:37,903 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:37,903 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:37,904 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:37,904 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:37,904 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,007 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309273849d6a5832e6044f3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,009 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,009 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,023 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,024 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,024 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,024 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309273849d6a5832e6044f3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,025 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,040 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ebe086ef-f3d5-4c92-a331-a74be14de876', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '这篇文章通过示例展示了Perf工具的使用', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,040 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,040 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,041 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,041 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,041 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,041 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,147 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927380bc796498d6a43ab'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,147 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,148 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,149 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,149 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,149 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,149 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927380bc796498d6a43ab'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,149 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,157 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f6d02bd6-709b-4e4e-b3ce-d4d6f6df4e69', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,158 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,158 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,158 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,158 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,158 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,158 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,261 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092738a8e5648c55de41ea'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,261 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,261 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,277 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,277 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,277 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,277 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092738a8e5648c55de41ea'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,277 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,291 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-24c54578-c11f-4e0c-a5c0-a4fd58551b56', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,292 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,292 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,292 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,292 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,292 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,292 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,398 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927385634962b68224c71'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,399 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,400 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,401 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,402 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,402 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,402 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927385634962b68224c71'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,402 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,420 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e6437029-ad7b-4e40-83f4-6d5478e17e3a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,421 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,421 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,422 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,422 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,422 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,422 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,567 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309273895f16aeb439748aa'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,568 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,569 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,582 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,583 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,583 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,583 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309273895f16aeb439748aa'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,584 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,601 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7dc176dc-2537-4b3d-9e9b-8ca3098b5e07', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,601 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,602 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,602 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,602 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,602 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,602 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,707 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:38 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927389134f69d9efd4b44'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,709 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,709 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,711 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,711 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,711 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,712 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:38 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927389134f69d9efd4b44'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,712 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,730 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-db459a93-d4f9-4157-9d16-9f02e16ab515', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,731 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,731 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,732 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,732 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,732 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,732 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,845 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739620ccee6703b42ae'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,847 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,848 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,850 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,851 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,851 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,851 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739620ccee6703b42ae'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,851 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:38,866 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bd29b76e-cb6b-4ad4-8ab7-d814a62ddf07', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:38,867 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:38,867 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,867 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:38,867 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,867 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:38,867 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:38,972 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739ffce2c311ad74078'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:38,973 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:38,974 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:38,990 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:38,990 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:38,991 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:38,991 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739ffce2c311ad74078'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:38,991 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,010 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ab1afa81-e276-4ac0-8a65-b466510c55ab', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,011 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,011 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,011 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,011 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,011 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,011 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,119 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739c6ed9093d89b482d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,120 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,121 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,135 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,136 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,136 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,136 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739c6ed9093d89b482d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,136 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,149 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c0baff49-b7d6-4f1d-ba60-09f1aee8fb71', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,150 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,150 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,150 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,150 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,151 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,151 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,253 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739e354eb86cd1140b0'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,253 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,253 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,269 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,269 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,269 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,269 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739e354eb86cd1140b0'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,270 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,280 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9a708287-6299-4ea8-a517-c1b85744b488', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,280 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,281 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,281 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,281 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,281 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,281 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,388 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739450e62c5ef764b2d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,389 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,389 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,404 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,404 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,405 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,405 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739450e62c5ef764b2d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,405 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,420 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-3df53c85-4a21-48b4-9b5d-90b7715cbec0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,421 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,421 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,421 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,421 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,421 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,422 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,555 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927394ba6f2211f5d4adc'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,557 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,557 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,583 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,584 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,584 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,584 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927394ba6f2211f5d4adc'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,585 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,600 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9510312d-5af9-47b0-819b-05415dadcce7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'buildid-list    List the buildids in a perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,601 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,601 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,601 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,601 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,601 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,601 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,701 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:39 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092739a3c57e2d563942c0'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,702 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,703 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,728 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,728 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,729 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,729 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:39 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092739a3c57e2d563942c0'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,729 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,749 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4d43e36b-e34f-44f2-a408-1cabfc5109da', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03b50>, 'json_data': {'input': 'buildid-list    List the buildids in a perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,750 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,750 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,750 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,751 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,751 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,751 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,844 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092740fd2b3a9111d44a15'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,846 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,846 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,848 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,848 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,848 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,848 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092740fd2b3a9111d44a15'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,849 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:39,867 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-adb7fc7b-cfb1-43a1-9969-9d889548e051', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03b50>, 'json_data': {'input': 'data file\ndiff            Read two perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:39,868 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:39,868 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,869 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:39,869 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,869 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:39,869 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:39,956 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274084580bc9d65e4d0c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:39,958 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:39,959 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:39,996 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:39,997 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:39,997 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:39,997 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274084580bc9d65e4d0c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:39,998 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,017 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-153f946d-966b-430a-a7d1-6ca434ee3f15', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data file\ndiff            Read two perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,018 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,018 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,019 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,019 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,019 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,019 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,116 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927408b99a9d8b22e44e3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,118 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,119 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,121 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,121 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,121 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,121 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927408b99a9d8b22e44e3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,122 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,140 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f1ca04ed-2d3a-41a6-a4c8-f9ae4627e13c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,140 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,141 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,141 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,141 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,141 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,141 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,250 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927406f84683d92d54961'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,250 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,251 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,265 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,265 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,265 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,265 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927406f84683d92d54961'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,265 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,272 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5662e8a5-0460-4f81-8a0b-48e4a75c0982', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,273 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,273 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,273 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,273 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,273 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,273 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,367 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927400d2718d69c644406'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,368 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,368 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,382 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,382 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,382 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,382 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927400d2718d69c644406'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,382 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,394 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-02f2ac3b-04d9-4697-b045-484c5a24a2ee', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data\nreport          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,395 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,395 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,395 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,395 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,395 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,395 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,502 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927408b79976eaf7f46a7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,503 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,503 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,505 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,505 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,505 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,505 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927408b79976eaf7f46a7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,505 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,524 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-47b2664b-c256-4b91-acf0-5e3eb4e3e11f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data\nreport          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,525 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,525 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,525 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,525 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,526 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,526 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,620 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927409a9289702ef24fef'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,622 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,622 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,623 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,624 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,624 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,624 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927409a9289702ef24fef'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,624 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,641 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b41c502b-8873-4573-9913-dcf39917b25a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,641 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,642 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,642 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,642 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,642 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,642 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,747 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:40 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927408c80ba52e1784cfe'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,748 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,749 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,761 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,761 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,761 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,762 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:40 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927408c80ba52e1784cfe'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,762 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,778 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d49eb1fe-6733-41c2-a6c3-1119c4c4d991', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,779 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,779 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,779 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,780 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,780 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,780 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,884 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:41 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092741bb86e8fbccfd43fb'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:40,885 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:40,886 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,888 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:40,888 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:40,888 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:40,888 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:41 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092741bb86e8fbccfd43fb'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:40,888 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:40,906 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d2e51af0-043b-4b1b-9a9b-c7c255c9f4fc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:40,907 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:40,907 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:40,908 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:40,908 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:40,908 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:40,908 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,015 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:41 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092741d1a15a96377642aa'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,017 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,017 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,020 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,020 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,020 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,020 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:41 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092741d1a15a96377642aa'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,021 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:41,037 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bac8b116-261a-4abb-8076-4b895abdd63c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': 'data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:41,038 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:41,038 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,038 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,038 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,039 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,039 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,135 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:41 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092741eb40b907e3d343d7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,136 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,137 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,150 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,151 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,151 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,151 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:41 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092741eb40b907e3d343d7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,152 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:41,167 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c8c001cb-ef24-4b61-8325-d86aa637c9c2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03a30>, 'json_data': {'input': '硬件事件\nPMU硬件事件取决与特定的CPU，由CPU供应商提供文档', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:41,168 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:41,168 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,169 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,169 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,169 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,169 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,271 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:41 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927413725dd10d1e048cc'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,272 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,272 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,287 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,288 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,288 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,288 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:41 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927413725dd10d1e048cc'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,288 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:41,365 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:27:41,365 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:27:41,366 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9c8725c2-87e7-4d10-a585-d80a8c0b919d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '在per-thread模式下，只监控指定的线程', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:41,366 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:41,366 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 09:27:41,366 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16beb10f0>
2025-07-23 09:27:41,366 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:41,366 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,366 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 09:27:41,367 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,367 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:41,367 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 09:27:41,367 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16be79740> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 09:27:41,468 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16beb13f0>
2025-07-23 09:27:41,468 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,468 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,468 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,468 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,468 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,685 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:41 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47318317532340617225617e008257cbb3fa93507f1ae4bde361c65ab13b;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092741878b4ef79d9543c2'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,686 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,687 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,720 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,721 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,721 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,721 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:41 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47318317532340617225617e008257cbb3fa93507f1ae4bde361c65ab13b;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092741878b4ef79d9543c2'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,722 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:41,740 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-131fc133-fe11-4a10-a2a8-f5dcf0a39eba', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样只在该线程上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:41,741 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:41,741 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,741 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,741 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,742 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,742 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,833 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092742c75132a458694d3a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,833 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,834 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,868 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,868 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,868 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,868 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092742c75132a458694d3a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,868 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:41,880 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c2f7b772-f62c-4a7c-81ff-d94edb7f5796', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样只在该线程上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:41,880 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:41,881 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,881 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:41,881 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,881 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:41,881 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:41,980 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927424c4624435ae54697'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:41,980 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:41,981 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:41,996 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:41,997 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:41,997 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:41,997 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927424c4624435ae54697'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:41,997 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,011 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-27295209-73eb-4ee5-a6b1-962a0835a334', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '在per-process模式下，进程中的所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,012 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,012 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,012 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,012 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,012 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,012 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,115 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092742f9123c02e7dd4276'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,117 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,117 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,118 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,119 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,119 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,119 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092742f9123c02e7dd4276'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,119 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,138 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-79870652-6a6c-4fd5-8653-ca9b6e64f974', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '在per-process模式下，进程中的所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,138 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,139 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,139 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,139 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,139 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,139 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,241 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927427bc9bfa6caf84edb'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,242 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,243 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,256 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,256 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,257 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,257 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927427bc9bfa6caf84edb'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,257 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,274 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-dd6cf99b-dbd7-41d8-955d-9ea27f3994a2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样在进程级别被合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,275 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,275 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,276 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,276 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,276 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,276 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,372 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092742ca8b196a450a4b18'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,372 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,372 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,392 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,392 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,392 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,392 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092742ca8b196a450a4b18'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,392 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,399 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-123223ed-b0fd-4459-92a2-71a29d2231f0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样在进程级别被合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,399 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,399 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,400 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,400 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,400 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,400 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,499 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927421c31b4b5c5094886'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,500 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,500 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,516 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,516 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,516 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,516 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927421c31b4b5c5094886'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,517 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,528 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-aa689c30-f0d8-48d8-b20e-6fd3f65c7b6e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '在per-cpu模式下，指定处理器上所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,528 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,528 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,528 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,529 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,529 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,529 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,630 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:42 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927427a4b25d73f80411a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,631 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,631 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,647 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,648 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,648 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,648 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:42 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927427a4b25d73f80411a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,649 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,666 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-497aee95-eb05-4762-a01e-8d558569ce42', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '在per-cpu模式下，指定处理器上所有线程都被监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,667 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,667 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,667 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,668 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,668 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,668 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,777 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092742ee254c70a7314913'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,779 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,779 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,793 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,794 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,794 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,794 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092742ee254c70a7314913'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,795 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,809 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-983d269a-d21b-4e4a-8e94-f398950e8691', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样在每个CPU上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,809 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,809 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,810 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,810 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,810 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,810 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,923 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927432e62ba6f6e1446d7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:42,925 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:42,925 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,942 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:42,942 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:42,942 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:42,942 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927432e62ba6f6e1446d7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:42,942 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:42,956 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a654ef5a-0799-470b-95b5-48a2576d37fd', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '计数和采样在每个CPU上合计', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:42,957 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:42,957 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:42,957 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:42,957 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:42,957 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:42,957 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,060 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092743a00a7f2bd3d14aaa'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:43,061 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:43,062 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,088 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:43,089 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:43,089 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:43,089 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092743a00a7f2bd3d14aaa'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:43,090 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:43,108 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-956a814c-f8a3-47bd-b9f4-29ef2d380bc8', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03ac0>, 'json_data': {'input': '性能分析示例\n以下是一个使用perf进行性能分析的示例：\n\n1', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:43,109 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:43,109 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,110 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:43,110 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,110 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:43,110 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,240 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274338b783eba2d6459c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:43,242 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:43,242 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,257 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:43,257 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:43,257 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:43,257 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274338b783eba2d6459c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:43,258 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:43,275 rag.components.splitter.splitter_utils INFO: 使用text分割器进行二级退化分割
2025-07-23 09:27:43,278 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:27:43,278 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:27:43,280 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 09:27:43,280 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 页面错误表示内存压力。
System calls are expensive operatio...
2025-07-23 09:27:43,280 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 内存泄漏导致性能逐渐下降。
I/O bottlenecks limit overall thr...
2025-07-23 09:27:43,281 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 09:27:43,281 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:27:43,352 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:27:43,353 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:27:43,353 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5e32af76-82d3-4981-bb80-f1255670795c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Multi-language Performance Analysis Guide\n多语言性能分析指南\n\nIntroduction 介绍\nPerformance analysis is crucial for system optimization', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:43,353 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:43,353 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 09:27:43,354 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16bec3430>
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 09:27:43,354 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 09:27:43,354 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x16b797e40> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 09:27:43,484 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16bec3460>
2025-07-23 09:27:43,485 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,485 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:43,485 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,485 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:43,485 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,687 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a47314f17532340637418070e00678723e16c04145c9bb9fee413005b8991;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274384d4a690f11342ac'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:43,690 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:43,690 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,733 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:43,734 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:43,734 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:43,734 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a47314f17532340637418070e00678723e16c04145c9bb9fee413005b8991;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274384d4a690f11342ac'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:43,735 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:43,754 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-289442be-1ac5-4407-839d-6032a09247a2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '性能分析对系统优化至关重要', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:43,755 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:43,756 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,756 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:43,756 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,756 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:43,756 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,877 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927449a209347733444f2'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:43,879 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:43,879 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,896 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:43,897 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:43,897 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:43,898 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927449a209347733444f2'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:43,898 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:43,917 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5ce0406e-97e9-4c9f-a235-a4d097cd4471', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '性能分析对系统优化至关重要', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:43,918 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:43,919 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:43,919 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:43,919 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:43,919 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:43,919 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,031 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092744f3dd61dc36df4bb4'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,033 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,033 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,034 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,034 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,034 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,035 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092744f3dd61dc36df4bb4'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,035 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,051 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c654f2e4-48ec-481b-ac90-eccc40990b2e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'We need to understand both English and Chinese documentation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,052 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,053 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,053 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,053 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,053 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,053 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,138 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927448fc4c90122624048'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,139 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,140 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,162 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,162 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,162 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,163 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927448fc4c90122624048'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,163 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,181 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5c2624e2-0c4b-40a8-b121-c6abb6fc8423', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'We need to understand both English and Chinese documentation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,182 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,182 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,183 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,183 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,183 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,183 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,289 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927448463ab75cb8e4cec'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,291 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,291 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,318 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,318 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,318 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,319 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927448463ab75cb8e4cec'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,319 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,337 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f1e47bd1-eb20-466c-bad2-b10fc5f718b2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '我们需要理解中英文文档', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,338 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,338 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,338 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,338 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,339 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,339 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,470 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274490d8a25a62cc44ad'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,471 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,471 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,493 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,493 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,493 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,493 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274490d8a25a62cc44ad'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,493 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,502 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d91088fa-b369-4e08-99ec-c4a2232cef36', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '我们需要理解中英文文档', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,502 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,503 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,503 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,503 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,503 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,503 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,621 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:44 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092744236d0aa40d364100'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,622 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,622 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,646 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,646 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,646 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,646 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:44 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092744236d0aa40d364100'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,646 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,659 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-541a84b3-e906-49c2-b72f-1b3815f77f40', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Hardware Events 硬件事件\nCPU cycles are fundamental performance metrics', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,660 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,660 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,660 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,660 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,660 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,660 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,777 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927441de4c03c9a554a11'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,778 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,779 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,797 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,798 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,798 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,798 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927441de4c03c9a554a11'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,798 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,816 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-51dfaff7-dce3-40bf-b75a-3b1d271280f5', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Hardware Events 硬件事件\nCPU cycles are fundamental performance metrics', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,817 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,817 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,818 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,818 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,818 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,818 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,938 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927455128f2093dca4bd9'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:44,939 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:44,940 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,958 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:44,958 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:44,958 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:44,958 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927455128f2093dca4bd9'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:44,958 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:44,972 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-3a95762b-4d9d-4629-b8c7-dbe8b057f5c9', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'CPU周期是基本的性能指标', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:44,973 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:44,973 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:44,973 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:44,973 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:44,973 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:44,973 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,078 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092745c4480c24edb7437e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,079 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,079 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,098 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,098 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,099 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,099 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092745c4480c24edb7437e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,099 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,114 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6fb8e7e1-39cf-4150-a2ca-151621ce687a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'CPU周期是基本的性能指标', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,115 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,115 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,115 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,115 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,115 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,115 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,212 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927455ed083e7add24151'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,213 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,214 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,232 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,232 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,232 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,233 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927455ed083e7add24151'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,233 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,250 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9558a5e7-c6b6-42d0-b2c2-ee276f62849d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Memory access patterns affect overall performance', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,250 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,251 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,251 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,251 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,251 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,251 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,340 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092745055da97b158c4dc2'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,342 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,342 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,361 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,361 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,361 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,362 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092745055da97b158c4dc2'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,362 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,380 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-91347a0e-4231-49d5-9341-3e0c8577cefd', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Memory access patterns affect overall performance', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,381 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,381 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,381 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,381 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,381 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,381 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,481 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092745a4a9c5339bd24502'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,482 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,483 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,502 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,503 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,503 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,503 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092745a4a9c5339bd24502'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,504 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,521 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-f0a9775d-f134-4c0c-8fa9-4409235ca8d4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '内存访问模式影响整体性能', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,522 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,522 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,523 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,523 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,523 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,523 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,641 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:45 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927452f17ebad48b24fe5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,641 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,642 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,662 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,663 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,663 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,663 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:45 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927452f17ebad48b24fe5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,663 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,674 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e2096eef-468a-4f8c-ae14-fed243d9c5dd', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '内存访问模式影响整体性能', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,674 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,674 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,675 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,675 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,675 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,675 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,782 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092745947f8431610c4116'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,783 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,784 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,784 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,784 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,785 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,785 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092745947f8431610c4116'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,785 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,803 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-44fd1597-ca8b-4a80-aa87-c7359cc158d7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Cache misses indicate performance bottlenecks', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,803 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,804 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,804 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,804 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,804 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,804 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,907 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927467bce64e4a9e34312'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:45,909 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:45,909 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,930 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:45,931 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:45,931 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:45,931 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927467bce64e4a9e34312'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:45,932 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:45,951 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c0f030e6-6898-4595-868e-36fd300094fc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Cache misses indicate performance bottlenecks', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:45,953 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:45,953 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:45,953 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:45,953 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:45,954 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:45,954 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,061 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927465cd0ace70ff2445c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,062 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,063 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,064 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,064 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,064 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,065 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927465cd0ace70ff2445c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,065 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,083 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-655bab1f-3df2-462d-9c11-c20857049141', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '缓存未命中表示性能瓶颈', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,083 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,084 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,084 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,084 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,084 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,084 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,201 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092746bfe29d5988074e50'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,202 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,203 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,203 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,204 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,204 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,204 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092746bfe29d5988074e50'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,204 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,223 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4a504134-10c4-4dee-b087-ee689883a8ee', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '缓存未命中表示性能瓶颈', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,223 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,224 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,224 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,224 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,224 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,224 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,324 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927462366b0aa546b4f82'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,325 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,326 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,329 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,329 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,329 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,329 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927462366b0aa546b4f82'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,330 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,346 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7331da42-7f46-4d6b-9a12-cdc6d1689427', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Software Events 软件事件\nContext switches occur frequently in multi-threaded applications', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,347 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,347 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,348 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,348 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,348 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,348 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,469 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092746761a291b7fa54e0d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,470 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,470 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,472 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,472 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,472 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,472 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092746761a291b7fa54e0d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,473 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,493 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-66df0bc5-911a-48b4-83bd-029587e0ce63', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Software Events 软件事件\nContext switches occur frequently in multi-threaded applications', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,494 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,494 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,495 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,495 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,495 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,495 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,588 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927466f9298dc90984a8d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,589 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,589 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,589 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,589 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,589 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,590 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927466f9298dc90984a8d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,590 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,601 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-cb64765f-cb25-4ffe-9722-0ca402d9abb7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '上下文切换在多线程应用中频繁发生', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,602 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,602 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,602 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,602 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,602 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,602 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,701 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927462cb69ea66098469d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,701 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,702 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,702 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,703 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,703 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,703 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927462cb69ea66098469d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,703 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,713 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2b39e77f-6966-431b-90b0-feee7892a60a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '上下文切换在多线程应用中频繁发生', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,713 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,713 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,714 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,714 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,714 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,714 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,813 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092747687d5049d1bd4008'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,813 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,813 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,843 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,844 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,844 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,844 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092747687d5049d1bd4008'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,844 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,853 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c4841fb5-1994-43f7-b63d-fc17bdd868fa', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Page faults indicate memory pressure', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,854 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,854 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,854 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,854 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,854 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,854 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,949 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927474521c736d9ad4147'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:46,949 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:46,950 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,968 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:46,968 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:46,968 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:46,968 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927474521c736d9ad4147'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:46,969 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:46,983 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-d04ee368-e53b-4c6e-aecb-ca4b65b0de4a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Page faults indicate memory pressure', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:46,984 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:46,984 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:46,984 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:46,984 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:46,984 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:46,985 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,091 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927476cd1114f8ade4fb8'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,093 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,093 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,111 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,112 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,112 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,112 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927476cd1114f8ade4fb8'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,113 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,129 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-15e8a8b9-f510-4949-82d0-3ebbd752ed6c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '页面错误表示内存压力', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,129 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,129 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,130 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,130 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,130 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,130 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,229 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927470d1495bfec33498b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,231 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,231 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,233 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,233 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,234 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,234 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927470d1495bfec33498b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,234 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,251 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-386fd4b4-92a6-4d3e-880e-3f118e5d11bf', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '页面错误表示内存压力', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,252 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,252 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,253 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,253 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,253 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,253 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,352 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274775fef44798d74c23'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,353 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,354 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,371 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,371 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,372 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,372 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274775fef44798d74c23'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,372 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,386 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0fe9073a-8786-4e2b-80d4-258f237ea468', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'System calls are expensive operations', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,387 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,387 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,387 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,387 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,387 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,387 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,503 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092747b867c4aeb6d44ff1'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,504 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,504 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,505 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,506 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,506 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,506 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092747b867c4aeb6d44ff1'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,506 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,521 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bf53eedc-4eaf-4b97-892f-dad228539050', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'System calls are expensive operations', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,522 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,522 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,522 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,522 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,522 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,523 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,627 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092747ba11261fe89e4e84'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,628 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,629 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,645 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,646 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,646 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,646 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092747ba11261fe89e4e84'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,646 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,661 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-c6a3bd74-1f19-4285-b244-b95e802253ea', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '系统调用是昂贵的操作', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,661 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,661 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,662 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,662 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,662 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,662 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,759 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092747e9ad8b7d2ff04e70'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,759 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,759 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,760 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,761 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,761 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,761 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092747e9ad8b7d2ff04e70'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,761 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,771 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-427f2a98-26f2-41aa-9581-c7a7165901c2', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '系统调用是昂贵的操作', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,771 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,771 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,772 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,772 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,772 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,772 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,877 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274844305e7ac4414454'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:47,877 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:47,877 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,879 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:47,879 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:47,879 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:47,879 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274844305e7ac4414454'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:47,880 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:47,897 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4f2ab03a-850f-4e4c-b94a-f8d93f7562af', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Analysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:47,897 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:47,898 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:47,898 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:47,898 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:47,898 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:47,898 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,003 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092748c41ecaa135294954'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,004 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,005 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,006 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,006 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,006 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,006 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092748c41ecaa135294954'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,007 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,022 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2f4bf374-7850-4850-b60b-8a13585bd244', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Analysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,022 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,022 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,023 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,023 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,023 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,023 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,126 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092748c10f1da583cc4ea1'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,128 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,129 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,131 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,131 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,131 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,132 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092748c10f1da583cc4ea1'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,132 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,146 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-468d2dde-1a8f-4090-afd8-5d6a23e398ce', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Perf是Linux性能分析的主要工具', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,147 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,147 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,148 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,148 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,148 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,148 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,261 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092748d1203fb1b5914da3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,263 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,263 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,265 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,265 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,265 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,265 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092748d1203fb1b5914da3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,266 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,285 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-17ea53df-9936-4762-ad5d-4c005b9f562c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Analysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis Perf是Linux性能分析的主要工具', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,285 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,286 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,286 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,286 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,286 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,286 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,384 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274808e88c33faf44412'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,386 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,386 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,388 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,388 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,388 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,388 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274808e88c33faf44412'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,389 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,406 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0767b413-7daa-4c8d-89f0-1c9fc37a92ec', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Top provides real-time system monitoring', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,407 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,407 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,408 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,408 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,408 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,408 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,506 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092748721a8b51ff8e4986'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,507 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,508 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,510 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,510 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,510 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,510 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092748721a8b51ff8e4986'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,511 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,527 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-02098ebb-4735-47b7-8691-c9cbb25c4c98', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Top provides real-time system monitoring', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,527 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,528 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,528 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,528 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,528 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,528 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,632 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274865c6caee90f34fad'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,633 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,634 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,635 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,635 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,636 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,636 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274865c6caee90f34fad'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,636 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,654 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6e3048ac-1e7a-41ef-b0a2-aaecb5df1610', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Top提供实时系统监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,654 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,655 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,655 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,655 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,655 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,655 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,758 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:48 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927488a739b4e2b9d41ec'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,758 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,758 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,777 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,777 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,777 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,777 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:48 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927488a739b4e2b9d41ec'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,777 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,784 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-807e9780-d4da-4151-9435-c487c2681263', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Top提供实时系统监控', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,785 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,785 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,785 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,785 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,785 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,785 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,878 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927499a590a71be0d4c9d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:48,879 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:48,879 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,881 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:48,881 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:48,881 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:48,881 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927499a590a71be0d4c9d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:48,881 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:48,892 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0fd6b637-35e9-4d4f-8931-966c993eb2f9', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Htop offers an improved interface over top', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:48,892 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:48,893 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:48,893 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:48,893 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:48,893 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:48,893 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,002 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927493eb56e2289c04f7f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,003 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,003 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,005 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,005 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,005 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,005 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927493eb56e2289c04f7f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,005 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,024 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e8b7ccbe-01da-401a-b007-d6468138b541', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Htop offers an improved interface over top', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,025 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,025 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,026 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,026 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,026 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,026 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,124 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092749b3a7518e37a048f3'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,125 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,126 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,127 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,128 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,128 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,128 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092749b3a7518e37a048f3'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,128 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,144 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-3c87a3a2-29ae-4efe-8d73-884a1b6e066e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Htop提供比top更好的界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,144 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,145 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,145 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,145 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,145 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,145 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,241 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927494563863d1b7743af'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,242 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,243 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,245 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,245 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,245 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,245 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927494563863d1b7743af'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,246 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,265 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b40147d1-3ca6-42be-97e1-7ff35eeea42b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Htop offers an improved interface over top Htop提供比top更好的界面', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,265 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,266 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,266 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,266 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,266 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,266 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,358 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927493536c1c9109c401d'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,360 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,360 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,381 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,381 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,381 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,381 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927493536c1c9109c401d'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,382 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,392 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2cab2eae-0b1b-4035-87a5-6d9d8f19b4b1', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Best Practices 最佳实践\nAlways start with a baseline measurement', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,393 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,393 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,393 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,393 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,393 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,393 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,492 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309274949f0d66faa2344cb'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,493 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,493 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,495 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,495 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,495 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,496 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309274949f0d66faa2344cb'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,496 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,511 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-4cb51100-8cac-49e9-bebf-53be50f6ddfd', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Best Practices 最佳实践\nAlways start with a baseline measurement', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,512 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,512 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,512 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,512 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,512 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,513 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,618 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927499e373ee7bdda471a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,620 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,620 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,634 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,634 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,634 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,634 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927499e373ee7bdda471a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,634 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,648 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-3979776d-395c-43e0-b6a7-f024186d0e4e', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '始终从基线测量开始', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,649 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,649 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,649 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,649 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,649 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,649 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,740 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:49 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092749810e140f0be844af'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,741 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,741 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,742 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,742 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,743 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,743 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:49 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092749810e140f0be844af'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,743 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,761 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-dec5db7f-c548-40cf-b310-40d3f58d0ae0', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '始终从基线测量开始', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,762 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,762 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,763 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,763 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,763 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,763 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,862 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309275049e24bf9e0f14a6b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,862 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,862 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,863 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,863 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,863 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,863 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309275049e24bf9e0f14a6b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,864 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,872 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9485f2ee-3a87-4839-85c5-6e7ecb72bc67', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Monitor both user and kernel space', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,872 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,872 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,872 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,873 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,873 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,873 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,969 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927505b7f2af18dc14248'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:49,970 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:49,970 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,972 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:49,972 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:49,972 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:49,973 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927505b7f2af18dc14248'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:49,973 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:49,986 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-0d4637e2-907a-4ad7-9445-1fed54e64520', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Monitor both user and kernel space', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:49,987 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:49,987 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:49,987 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:49,987 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:49,987 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:49,987 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,097 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072309275069466450ce724df7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,098 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,098 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,099 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,099 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,099 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,099 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072309275069466450ce724df7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,100 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,118 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5434f0c2-460b-4e9f-aa7f-037ead11ae3f', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '同时监控用户空间和内核空间', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,119 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,119 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,119 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,119 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,119 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,119 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,216 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927500a54b607d52d4267'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,217 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,218 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,220 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,220 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,220 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,220 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927500a54b607d52d4267'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,221 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,239 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b114b752-e602-4b52-85dd-2ede1d7e6e17', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '同时监控用户空间和内核空间', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,240 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,240 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,240 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,240 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,241 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,241 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,335 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927506190e209cbc0424e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,337 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,338 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,339 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,339 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,339 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,340 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927506190e209cbc0424e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,340 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,358 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-14db64b1-f8b4-48a7-b95c-fdff841dbc6d', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Use appropriate sampling rates', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,358 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,359 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,359 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,359 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,359 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,359 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,470 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092750995d6c16b63c43b7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,472 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,473 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,475 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,475 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,475 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,475 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092750995d6c16b63c43b7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,475 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,495 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b23ca832-12c0-4cdd-8932-74044e259a3a', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Use appropriate sampling rates', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,496 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,496 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,496 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,496 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,496 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,497 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,586 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927505448db1a47c34648'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,587 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,588 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,590 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,590 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,590 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,590 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927505448db1a47c34648'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,591 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,608 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-399248dd-48e5-4fe1-9cb6-f8fee9495ec9', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '使用适当的采样率', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,609 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,609 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,609 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,609 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,610 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,610 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,711 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:50 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927505d24ac8d832d477a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,713 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,713 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,716 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,716 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,716 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,716 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:50 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927505d24ac8d832d477a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,717 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,735 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b081c967-f466-493c-bb3f-69368c939707', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Use appropriate sampling rates 使用适当的采样率', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,736 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,736 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,737 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,737 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,737 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,737 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,941 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927511da7dc1733e04671'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:50,942 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:50,942 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,978 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:50,979 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:50,979 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:50,979 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927511da7dc1733e04671'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:50,979 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:50,989 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2bc4e43b-724e-4c10-94a8-ce6d1c2a45cb', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Common Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:50,989 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:50,989 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:50,990 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:50,990 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:50,990 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:50,990 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,090 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751db468df5899a439c'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,091 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,091 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,126 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,126 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,126 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,127 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751db468df5899a439c'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,127 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,143 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-28eae7f0-b9a3-442a-9df8-3bf26177ba98', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Common Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,144 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,144 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,145 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,145 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,145 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,145 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,237 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751dbd191de3d3c4def'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,238 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,238 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,240 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,240 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,240 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,241 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751dbd191de3d3c4def'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,241 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,258 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a23e251d-2763-4f4c-b953-c2b319c33ccc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '高CPU使用率可能表示算法效率低下', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,259 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,259 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,260 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,260 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,260 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,260 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,353 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751fcbe02f1d3aa430f'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,354 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,355 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,356 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,357 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,357 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,357 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751fcbe02f1d3aa430f'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,357 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,376 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9bca7c16-4f65-4653-9d2e-a3d9e2d687db', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '高CPU使用率可能表示算法效率低下', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,376 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,377 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,377 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,377 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,377 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,377 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,474 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751701f65bf03624edd'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,476 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,477 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,479 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,480 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,480 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,481 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751701f65bf03624edd'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,481 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,497 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-cf0f753f-e2b9-48db-a3c1-74b6083460d4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Memory leaks cause gradual performance degradation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,498 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,498 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,498 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,498 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,499 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,499 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,589 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751a66a0a61a0a94b32'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,590 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,591 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,595 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,595 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,596 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,596 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751a66a0a61a0a94b32'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,596 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,615 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-50c42207-6230-4d2b-b8e0-cb54ea20e4dc', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Memory leaks cause gradual performance degradation', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,616 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,616 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,617 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,617 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,617 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,617 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,708 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:51 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092751e15ead64e6a54ff8'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,709 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,710 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,711 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,712 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,712 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,712 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:51 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092751e15ead64e6a54ff8'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,712 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,730 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-a763756b-80c6-4476-b151-cf43e8188dd4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '内存泄漏导致性能逐渐下降', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,731 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,731 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,731 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,731 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,732 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,732 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,824 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927520214b9c3f8f84ef7'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,825 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,825 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,826 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,826 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,826 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,826 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927520214b9c3f8f84ef7'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,826 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,835 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-5c53a39a-c7e6-44df-9b36-3119a39de434', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '内存泄漏导致性能逐渐下降', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,836 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,836 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,836 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,836 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,836 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,836 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,928 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927528613b6ae2d4f4818'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:51,929 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:51,929 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,930 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:51,930 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:51,930 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:51,930 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927528613b6ae2d4f4818'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:51,930 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:51,939 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9f460ed8-eb13-4b86-ba6b-9fbc02d45dc7', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'I/O bottlenecks limit overall throughput', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:51,939 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:51,939 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:51,939 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:51,939 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:51,940 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:51,940 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,031 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092752d4959e0e7c8d48e5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,031 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,031 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,034 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,034 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,034 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,035 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092752d4959e0e7c8d48e5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,035 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,045 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-7f3a2346-7601-44b3-a7c5-1b7c2bf8de53', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'I/O bottlenecks limit overall throughput', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,045 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,045 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,045 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,045 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,046 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,046 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,131 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927523ff42cc9af1946c6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,132 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,132 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,139 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,139 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,139 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,139 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927523ff42cc9af1946c6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,140 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,153 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-49bc7b15-8769-48d5-b954-c5d8225b2777', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'I/O瓶颈限制整体吞吐量', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,154 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,154 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,154 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,154 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,155 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,155 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,244 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092752050cca94bd484789'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,245 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,245 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,247 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,247 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,247 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,247 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092752050cca94bd484789'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,247 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,266 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9e1467c6-68c8-4260-8efd-2c54d5049bba', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'I/O瓶颈限制整体吞吐量', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,267 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,267 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,267 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,267 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,267 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,267 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,366 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092752515119c4d5d34783'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,368 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,369 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,371 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,371 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,371 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,371 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092752515119c4d5d34783'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,372 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,389 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-eae35762-a043-4834-a97a-c61d97d1d5ec', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Optimization Techniques 优化技术\nProfile before optimizing', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,390 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,390 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,390 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,390 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,390 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,390 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,487 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507230927529476255f0e3f461a'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,489 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,489 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,492 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,492 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,492 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,492 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507230927529476255f0e3f461a'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,493 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,515 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9a4a8884-0c58-45bb-9918-cc45f45398d4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Optimization Techniques 优化技术\nProfile before optimizing', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,515 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,516 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,516 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,516 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,516 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,516 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,613 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092752643eabbf85b34bbb'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,614 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,615 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,618 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,618 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,618 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,618 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092752643eabbf85b34bbb'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,619 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,635 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-1526e6f0-7c90-464a-8a71-3a1ffa1f0ebf', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '在优化之前进行性能分析', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,636 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,636 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,636 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,637 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,637 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,637 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,727 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:52 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092752760db19c5a0b45a9'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,728 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,728 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,730 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,731 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,731 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,731 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:52 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092752760db19c5a0b45a9'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,731 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,750 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-97d4f2a7-45c2-470d-80e5-bfa8fcc04beb', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': '在优化之前进行性能分析', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,750 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,751 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,751 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,751 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,751 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,751 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,851 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:53 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092753f62f0e93046b4d43'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,852 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,853 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,855 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,856 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,856 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,856 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:53 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092753f62f0e93046b4d43'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,856 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,871 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-bfe4ce72-0b72-4fc7-95b9-3f26c2faf824', 'post_parser': <function Embeddings.create.<locals>.parser at 0x16be03eb0>, 'json_data': {'input': 'Focus on the biggest bottlenecks first', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 09:27:52,871 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 09:27:52,872 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,872 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 09:27:52,872 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,872 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 09:27:52,872 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 09:27:52,959 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 01:27:53 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723092753c0861b5aa61f4db5'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 09:27:52,961 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:27:52,961 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 09:27:52,963 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 09:27:52,963 httpcore.http11 DEBUG: response_closed.started
2025-07-23 09:27:52,963 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 09:27:52,964 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 01:27:53 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723092753c0861b5aa61f4db5'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 09:27:52,964 openai._base_client DEBUG: request_id: None
2025-07-23 09:27:52,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:27:52,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:27:52,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:27:52,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:27:52,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南

## 1. 概述

### 1.1 什么是Per...
2025-07-23 09:27:52,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 安装和配置

### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持per...
2025-07-23 09:27:52,990 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 基本命令

### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**...
2025-07-23 09:27:52,990 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 高级功能

### 4.1 事件类型

#### 硬件事件
- CPU周期
- 指令数
- 缓...
2025-07-23 09:27:52,991 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 实际应用场景

### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf ...
2025-07-23 09:27:52,991 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: **确定目标**：明确要分析的性能问题
2. **选择工具**：根据问题选择合适的perf命令...
2025-07-23 09:27:52,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 与其他工具集成

### 7.1 与gdb集成
```bash
perf record -g ...
2025-07-23 09:27:52,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 故障排除

### 8.1 常见错误
- **权限不足**：检查perf_event_para...
2025-07-23 09:27:52,992 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通...
2025-07-23 09:37:37,573 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:37:37,573 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:37:37,573 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:37:37,575 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:37:37,575 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 09:37:37,588 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 09:37:37,652 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:37:37,653 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:37:37,968 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,099 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,242 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,359 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,477 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,595 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,725 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,845 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:38,969 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,092 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,220 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,342 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,475 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,598 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,707 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:39,930 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,076 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,227 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,349 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,470 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,590 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,698 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,820 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:40,955 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,074 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,192 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,306 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,413 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,585 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,703 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:41,799 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:37:41,799 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:37:41,955 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,074 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,196 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,329 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,471 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,586 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,688 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,818 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:42,947 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,151 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,274 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,407 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,430 rag.components.splitter.splitter_utils INFO: 使用text分割器进行二级退化分割
2025-07-23 09:37:43,435 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 09:37:43,509 rag.components.splitter.splitter_utils INFO: 成功初始化OpenAI嵌入客户端，模型: embedding-3
2025-07-23 09:37:43,509 rag.components.splitter.splitter_utils INFO: 使用semantic分割器进行一级退化分割
2025-07-23 09:37:43,655 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,803 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:43,957 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,077 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,192 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,320 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,472 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,602 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,700 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,823 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:44,953 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,058 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,262 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,397 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,579 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,687 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,801 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:45,919 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,025 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,128 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,231 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,336 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,471 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,597 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,706 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,800 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:46,921 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,038 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,136 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,242 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,345 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,563 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,705 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,810 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:47,921 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,031 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,159 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,267 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,388 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,491 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,604 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,714 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,826 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:48,936 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,069 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,180 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,306 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,413 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,562 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,675 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,793 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:49,913 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,026 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,140 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,255 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,372 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,497 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,616 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,742 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:50,870 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,002 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,107 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,225 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,338 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,472 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,576 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,697 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,808 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:51,915 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:52,021 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:52,120 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 09:37:52,234 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 11:46:59,877 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 11:46:59,878 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 11:46:59,878 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 11:46:59,880 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 11:46:59,880 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 11:46:59,897 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 11:46:59,897 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 11:46:59,897 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 11:46:59,899 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 11:46:59,899 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,542 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 16:24:34,542 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,542 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,544 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 16:24:34,544 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,557 rag.components.splitter.splitter_utils WARNING: 发现2个超过最大chunk_size的节点
2025-07-23 16:24:34,557 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,557 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 16:24:34,560 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 16:24:34,560 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 21:41:07,104 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/加载文件中...
2025-07-23 21:41:07,108 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 21:41:07,109 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 21:41:07,110 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:41:07,111 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:41:07,112 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:41:07,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:41:07,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:41:07,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:41:07,113 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:41:07,114 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-23 21:42:13,527 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/加载文件中...
2025-07-23 21:42:13,530 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 21:42:13,530 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 21:42:13,531 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 21:42:13,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:42:13,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:42:13,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:42:13,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:42:13,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:42:13,534 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:42:13,534 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-23 21:42:13,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 21:42:13,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 代码审查和质量保证
人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风...
2025-07-23 21:42:13,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 这些模型通过分析数百万行代码进行训练，学会了编程语言的语法和语义规则。生成的代码不仅语法正确，...
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 代码审查和质量保证
人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风...
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: AI系统能够分析项目进度数据，预测完成时间，识别潜在的风险和瓶颈。通过机器学习算法，项目管理工...
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 然而，AI并不是要替代开发者，而是要增强他们的能力。
2025-07-23 21:42:13,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。
2025-07-23 21:42:13,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 21:42:13,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。
...
2025-07-23 21:42:13,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 21:42:13,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 21:42:13,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 21:42:13,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data file
bench           General framework for...
2025-07-23 21:42:13,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。
...
2025-07-23 21:42:13,806 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 21:42:13,806 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: event]
L1-icache-loads                         ...
2025-07-23 21:42:13,806 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-stores              ...
2025-07-23 21:42:13,806 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-store-misses       ...
2025-07-23 21:42:13,806 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
branch-loads            ...
2025-07-23 21:42:13,807 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 21:42:13,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 21:42:13,808 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 21:42:13,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 21:42:13,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Top提供实时系统监控。
Htop offers an improved interface ...
2025-07-23 21:42:13,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 21:42:13,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:42:13,809 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:42:13,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:42:13,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:42:13,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:42:13,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:42:13,810 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:42:13,811 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:42:13,812 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:42:13,812 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:42:13,812 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:42:13,812 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:42:13,813 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:42:13,813 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:42:13,813 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:42:13,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:42:13,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:42:13,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:42:13,814 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:42:13,815 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:42:13,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:42:13,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:42:13,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:42:13,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:42:13,816 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:42:13,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:42:13,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:42:13,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:42:13,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:42:13,817 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:42:13,818 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:42:13,818 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:42:13,818 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:42:13,818 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:42:13,818 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:42:13,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:42:13,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:42:13,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:42:13,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:42:13,819 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:42:13,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:42:13,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:42:13,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:42:13,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:42:13,820 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:42:13,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:42:13,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:42:13,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:42:13,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:42:13,821 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:42:13,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:42:13,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:42:13,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:42:13,822 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:42:13,823 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:42:13,823 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:42:13,823 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:42:13,823 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:42:13,823 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:42:13,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:42:13,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:42:13,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:42:13,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:42:13,824 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:42:13,825 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:42:13,825 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:42:13,825 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:42:13,825 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:45:48,758 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/加载文件中...
2025-07-23 21:45:48,760 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 21:45:48,761 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 21:45:48,762 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 21:45:48,762 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:45:48,762 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:45:48,762 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:45:48,762 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:45:48,763 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:45:48,764 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:45:48,766 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 代码审查和质量保证
人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风...
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 这些模型通过分析数百万行代码进行训练，学会了编程语言的语法和语义规则。生成的代码不仅语法正确，...
2025-07-23 21:45:48,950 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。
2025-07-23 21:45:48,951 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 代码审查和质量保证
人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风...
2025-07-23 21:45:48,951 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: AI系统能够分析项目进度数据，预测完成时间，识别潜在的风险和瓶颈。通过机器学习算法，项目管理工...
2025-07-23 21:45:48,951 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 然而，AI并不是要替代开发者，而是要增强他们的能力。
2025-07-23 21:45:48,951 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。
2025-07-23 21:45:48,954 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 21:45:48,954 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。
...
2025-07-23 21:45:48,954 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 21:45:48,954 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 21:45:48,955 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 21:45:48,955 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data file
bench           General framework for...
2025-07-23 21:45:48,955 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。
...
2025-07-23 21:45:48,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 21:45:48,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: event]
L1-icache-loads                         ...
2025-07-23 21:45:48,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-stores              ...
2025-07-23 21:45:48,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-store-misses       ...
2025-07-23 21:45:48,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
branch-loads            ...
2025-07-23 21:45:48,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 使用perf stat收集性能计数器统计信息：
perf stat -B -ecycles:u...
2025-07-23 21:45:48,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 21:45:48,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 21:45:48,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 21:45:48,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Top提供实时系统监控。
Htop offers an improved interface ...
2025-07-23 21:45:48,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 首先关注最大的瓶颈。
Measure the impact of changes. 测量变更的...
2025-07-23 21:45:48,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:45:48,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:45:48,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:45:48,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:45:48,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:45:48,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:45:48,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:45:48,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:45:48,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:45:48,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:45:48,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:45:48,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:45:48,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:45:48,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:45:48,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:45:48,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:45:48,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:45:48,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:45:48,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:45:48,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:45:48,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:45:48,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:45:48,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:45:48,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:45:48,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:45:48,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:45:48,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:45:48,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:45:48,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:45:48,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:45:48,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:45:48,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:45:48,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:45:48,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:45:48,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:45:48,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:45:48,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:45:48,973 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:45:48,973 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:45:48,973 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:45:48,973 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:45:48,974 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:45:48,974 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:45:48,974 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:45:48,974 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:45:48,974 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:45:48,975 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:45:48,975 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:45:48,975 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:45:48,975 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:45:48,976 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:45:48,976 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:45:48,976 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:45:48,976 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:45:48,976 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:45:48,977 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:45:48,977 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:45:48,977 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:45:48,977 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:45:48,978 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:45:48,978 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:45:48,978 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:45:48,978 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:45:48,978 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:45:48,979 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:45:48,979 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:45:48,979 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:45:48,980 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:45:48,980 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:45:48,980 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:45:48,980 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:45:48,981 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:45:48,981 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:47:11,529 rag.components.loader.file_loader INFO: 从/Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/recursive_splitter_data.md加载文件中...
2025-07-23 21:47:11,530 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:47:11,531 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:47:11,532 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:47:11,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:47:11,533 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:47:11,534 rag.components.loader.file_loader INFO: 成功加载39个文档
2025-07-23 21:47:11,535 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:47:11,535 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 21:47:11,535 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:47:11,535 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 21:47:11,535 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:47:11,536 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 21:47:11,536 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:47:11,536 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 21:47:11,536 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:47:11,537 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 21:47:11,537 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:47:11,537 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 21:47:11,537 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:47:11,537 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 21:47:11,538 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:47:11,538 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 21:47:11,538 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:47:11,538 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 21:47:11,539 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:47:11,539 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 21:47:11,539 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:47:11,539 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:47:11,540 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 21:47:11,541 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:47:11,541 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 21:47:11,541 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:47:11,542 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 21:47:11,542 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:47:11,542 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 21:47:11,542 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:47:11,543 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 21:47:11,543 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:47:11,543 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 21:47:11,543 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:47:11,543 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 21:47:11,544 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:47:11,544 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 21:47:11,544 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:47:11,545 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 21:47:11,545 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:47:11,545 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 21:47:11,545 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:47:11,546 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 21:47:11,546 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:47:11,546 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 21:47:11,546 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:47:11,546 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 21:47:11,547 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:47:11,547 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 21:47:11,547 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:47:11,547 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 21:47:11,547 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:47:11,548 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 21:47:11,548 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:47:11,548 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 21:47:11,549 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:47:11,549 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 21:47:11,549 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:47:11,549 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 21:47:11,550 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:47:11,550 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 21:47:11,550 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:47:11,550 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 21:47:11,550 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:47:11,551 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 21:47:11,551 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:47:11,551 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 21:47:11,551 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:47:11,552 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 21:47:11,552 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:47:11,552 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 21:47:11,552 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 21:47:11,553 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 22:03:16,941 __main__ INFO: 开始BM25索引器示例
2025-07-23 22:03:16,941 __main__ INFO: 创建BM25索引器...
2025-07-23 22:03:16,941 __main__ INFO: 初始化索引器...
2025-07-23 22:03:16,941 __main__ INFO: 加载测试数据...
2025-07-23 22:03:16,942 __main__ INFO: 加载了 4 个文档
2025-07-23 22:03:16,942 __main__ INFO: 开始索引文档...
2025-07-23 22:03:16,944 __main__ INFO: 索引结果: {'indexed': True, 'document_count': 4, 'index_name': 'test_documents', 'metadata': {'component': 'test_bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}}
2025-07-23 22:03:16,944 __main__ INFO: 成功索引 4 个文档
2025-07-23 22:03:16,944 __main__ INFO: 
=== 搜索测试 ===
2025-07-23 22:03:16,944 __main__ INFO: 
搜索查询: '性能分析工具'
2025-07-23 22:03:16,945 __main__ INFO:   未找到相关结果
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: 'perf命令使用'
2025-07-23 22:03:16,945 __main__ INFO:   未找到相关结果
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: '人工智能代码生成'
2025-07-23 22:03:16,945 __main__ INFO:   未找到相关结果
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: 'machine learning algorithms'
2025-07-23 22:03:16,945 __main__ INFO:   结果 1: Multi-language Performance Analysis Guide (得分: 1.1211)
2025-07-23 22:03:16,945 __main__ INFO:   结果 2: Multi-language Performance Analysis Guide (得分: 1.1211)
2025-07-23 22:03:16,945 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (得分: 1.1211)
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: 'CPU cycles performance'
2025-07-23 22:03:16,945 __main__ INFO:   结果 1: Linux性能分析工具Perf完整指南 (得分: 0.4111)
2025-07-23 22:03:16,945 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 0.4111)
2025-07-23 22:03:16,945 __main__ INFO:   结果 3: Linux性能分析工具Perf完整指南 (得分: 0.4111)
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: '缓存未命中'
2025-07-23 22:03:16,945 __main__ INFO:   未找到相关结果
2025-07-23 22:03:16,945 __main__ INFO: 
搜索查询: '深度学习模型'
2025-07-23 22:03:16,945 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 1.4743)
2025-07-23 22:03:16,945 __main__ INFO:   结果 2: 人工智能在软件开发中的应用 (得分: 1.4743)
2025-07-23 22:03:16,945 __main__ INFO:   结果 3: 人工智能在软件开发中的应用 (得分: 1.4743)
2025-07-23 22:03:16,945 __main__ INFO: 
=== 文档获取测试 ===
2025-07-23 22:03:16,945 __main__ INFO: 获取文档: 人工智能在软件开发中的应用
2025-07-23 22:03:16,945 __main__ INFO: 内容长度: 1030 字符
2025-07-23 22:03:16,945 __main__ INFO: 
=== 索引统计 ===
2025-07-23 22:03:16,945 __main__ INFO: 索引文档数: 12
2025-07-23 22:03:16,945 __main__ INFO: BM25索引已创建，文档数量: 12
2025-07-23 22:03:16,946 __main__ INFO: 平均文档长度: 251.00 个词
2025-07-23 22:03:16,946 __main__ INFO: 
BM25索引器示例完成!
2025-07-23 22:40:28,625 __main__ INFO: 开始BM25索引器示例
2025-07-23 22:40:28,625 __main__ INFO: 创建BM25索引器...
2025-07-23 22:40:28,626 __main__ INFO: 初始化索引器...
2025-07-23 22:40:28,627 __main__ INFO: 创建索引...
2025-07-23 22:40:28,627 __main__ INFO: 索引创建成功
2025-07-23 22:40:28,627 __main__ INFO: 加载测试数据...
2025-07-23 22:40:28,627 __main__ INFO: 加载了 4 个文档
2025-07-23 22:40:28,628 __main__ INFO: 开始索引文档...
2025-07-23 22:40:28,630 __main__ INFO: 成功索引 4 个文档
2025-07-23 22:40:28,630 __main__ INFO: 
=== 搜索测试 ===
2025-07-23 22:40:28,630 __main__ INFO: 
搜索查询: '性能分析工具'
2025-07-23 22:40:28,630 __main__ INFO:   未找到相关结果
2025-07-23 22:40:28,630 __main__ INFO: 
搜索查询: 'perf命令使用'
2025-07-23 22:40:28,630 __main__ INFO:   未找到相关结果
2025-07-23 22:40:28,630 __main__ INFO: 
搜索查询: '人工智能代码生成'
2025-07-23 22:40:28,630 __main__ INFO:   未找到相关结果
2025-07-23 22:40:28,630 __main__ INFO: 
搜索查询: 'machine learning algorithms'
2025-07-23 22:40:28,630 __main__ INFO:   结果 1: Multi-language Performance Analysis Guide (得分: 1.1471)
2025-07-23 22:40:28,630 __main__ INFO:   结果 2: Multi-language Performance Analysis Guide (得分: 1.1471)
2025-07-23 22:40:28,630 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (得分: 1.1471)
2025-07-23 22:40:28,630 __main__ INFO: 
搜索查询: 'CPU cycles performance'
2025-07-23 22:40:28,631 __main__ INFO:   结果 1: Linux性能分析工具Perf完整指南 (得分: 0.4206)
2025-07-23 22:40:28,631 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 0.4206)
2025-07-23 22:40:28,631 __main__ INFO:   结果 3: Linux性能分析工具Perf完整指南 (得分: 0.4206)
2025-07-23 22:40:28,631 __main__ INFO: 
搜索查询: '缓存未命中'
2025-07-23 22:40:28,631 __main__ INFO:   未找到相关结果
2025-07-23 22:40:28,631 __main__ INFO: 
搜索查询: '深度学习模型'
2025-07-23 22:40:28,631 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 1.5084)
2025-07-23 22:40:28,631 __main__ INFO:   结果 2: 人工智能在软件开发中的应用 (得分: 1.5084)
2025-07-23 22:40:28,631 __main__ INFO:   结果 3: 人工智能在软件开发中的应用 (得分: 1.5084)
2025-07-23 22:40:28,631 __main__ INFO: 
=== 文档获取测试 ===
2025-07-23 22:40:28,631 __main__ INFO: 获取文档: 人工智能在软件开发中的应用
2025-07-23 22:40:28,631 __main__ INFO: 内容长度: 1030 字符
2025-07-23 22:40:28,631 __main__ INFO: 
=== 多索引操作演示 ===
2025-07-23 22:40:28,631 __main__ INFO: 创建第二个索引...
2025-07-23 22:40:28,631 __main__ INFO: 第二个索引创建成功
2025-07-23 22:40:28,634 __main__ INFO: 在第二个索引中成功索引 2 个文档
2025-07-23 22:40:28,634 __main__ INFO: 在第二个索引中找到 0 个结果
2025-07-23 22:40:28,634 __main__ INFO: 
=== 索引统计 ===
2025-07-23 22:40:28,634 __main__ INFO: 索引文档数: 18
2025-07-23 22:40:28,634 __main__ INFO: BM25索引已创建，文档数量: 18
2025-07-23 22:40:28,634 __main__ INFO: 平均文档长度: 237.61 个词
2025-07-23 22:40:28,634 __main__ INFO: 
注意: delete_index 方法已被移除，如需删除索引请手动删除索引文件
2025-07-23 22:40:28,634 __main__ INFO: 
BM25索引器示例完成!
2025-07-23 22:46:30,444 __main__ INFO: 开始Elasticsearch索引器示例
2025-07-23 22:46:30,444 __main__ INFO: 检查Elasticsearch连接...
2025-07-23 22:46:30,517 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-23 22:46:30,583 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-23 22:46:30,583 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.066s]
2025-07-23 22:46:30,583 __main__ INFO: Elasticsearch连接正常
2025-07-23 22:46:30,583 __main__ INFO: 创建Elasticsearch索引器...
2025-07-23 22:46:30,583 __main__ INFO: 初始化索引器...
2025-07-23 22:46:30,604 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-23 22:46:30,619 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-23 22:46:30,619 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.015s]
2025-07-23 22:46:30,619 __main__ INFO: 检查索引状态...
2025-07-23 22:46:30,626 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /test_documents HTTP/1.1" 200 0
2025-07-23 22:46:30,627 elastic_transport.transport INFO: HEAD https://localhost:9200/test_documents [status:200 duration:0.007s]
2025-07-23 22:46:30,627 __main__ WARNING: 索引 test_documents 已存在
2025-07-23 22:46:30,627 __main__ INFO: 如果需要重新创建索引，请手动删除后重新运行
2025-07-23 22:46:30,627 __main__ INFO: 删除命令: curl -X DELETE 'https://localhost:9200/test_documents' -u elastic:sPxLec=NGSFmUT_7+74R -k
2025-07-23 22:46:30,627 __main__ INFO: 确保索引存在...
2025-07-23 22:46:30,629 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /test_documents HTTP/1.1" 200 0
2025-07-23 22:46:30,629 elastic_transport.transport INFO: HEAD https://localhost:9200/test_documents [status:200 duration:0.002s]
2025-07-23 22:46:30,629 __main__ INFO: 索引准备就绪
2025-07-23 22:46:30,629 __main__ INFO: 加载测试数据...
2025-07-23 22:46:30,630 __main__ INFO: 加载了 4 个文档
2025-07-23 22:46:30,630 __main__ INFO: 开始索引文档...
2025-07-23 22:46:30,631 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /test_documents HTTP/1.1" 200 0
2025-07-23 22:46:30,632 elastic_transport.transport INFO: HEAD https://localhost:9200/test_documents [status:200 duration:0.001s]
2025-07-23 22:46:30,677 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-23 22:46:30,679 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.040s]
2025-07-23 22:46:30,679 __main__ INFO: 索引结果: {'indexed': True, 'document_count': 4, 'index_name': 'test_documents', 'metadata': {'component': 'test_es_indexer', 'indexer_type': 'ESIndexerComponent'}}
2025-07-23 22:46:30,679 __main__ INFO: 成功索引 4 个文档
2025-07-23 22:46:30,679 __main__ INFO: 等待索引刷新...
2025-07-23 22:46:32,684 __main__ INFO: 
=== 搜索测试 ===
2025-07-23 22:46:32,685 __main__ INFO: 
搜索查询: '性能分析工具'
2025-07-23 22:46:32,764 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,765 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.079s]
2025-07-23 22:46:32,765 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (得分: 6.3795)
2025-07-23 22:46:32,765 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,765 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,765 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 6.1056)
2025-07-23 22:46:32,765 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,765 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,765 __main__ INFO:   结果 3: 人工智能在软件开发中的应用 (得分: 2.2132)
2025-07-23 22:46:32,766 __main__ INFO:     类别: AI Development
2025-07-23 22:46:32,766 __main__ INFO:     标签: AI, machine learning, software development
2025-07-23 22:46:32,766 __main__ INFO: 
搜索查询: 'perf命令使用'
2025-07-23 22:46:32,774 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,774 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.008s]
2025-07-23 22:46:32,775 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (得分: 6.6921)
2025-07-23 22:46:32,775 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,775 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,775 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 6.1953)
2025-07-23 22:46:32,775 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,775 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,775 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (得分: 2.2230)
2025-07-23 22:46:32,775 __main__ INFO:     类别: Performance Analysis
2025-07-23 22:46:32,775 __main__ INFO:     标签: performance, analysis, multilingual
2025-07-23 22:46:32,775 __main__ INFO: 
搜索查询: '人工智能代码生成'
2025-07-23 22:46:32,790 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,790 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.015s]
2025-07-23 22:46:32,791 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 21.0795)
2025-07-23 22:46:32,791 __main__ INFO:     类别: AI Development
2025-07-23 22:46:32,791 __main__ INFO:     标签: AI, machine learning, software development
2025-07-23 22:46:32,791 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 5.8458)
2025-07-23 22:46:32,791 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,791 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,791 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 3.1161)
2025-07-23 22:46:32,791 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,791 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,791 __main__ INFO: 
搜索查询: 'machine learning algorithms'
2025-07-23 22:46:32,798 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,798 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.007s]
2025-07-23 22:46:32,799 __main__ INFO:   结果 1: Multi-language Performance Analysis Guide (得分: 3.1472)
2025-07-23 22:46:32,799 __main__ INFO:     类别: Performance Analysis
2025-07-23 22:46:32,799 __main__ INFO:     标签: performance, analysis, multilingual
2025-07-23 22:46:32,799 __main__ INFO: 
搜索查询: 'CPU cycles performance'
2025-07-23 22:46:32,805 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,805 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.005s]
2025-07-23 22:46:32,805 __main__ INFO:   结果 1: Multi-language Performance Analysis Guide (得分: 7.1860)
2025-07-23 22:46:32,805 __main__ INFO:     类别: Performance Analysis
2025-07-23 22:46:32,805 __main__ INFO:     标签: performance, analysis, multilingual
2025-07-23 22:46:32,805 __main__ INFO:   结果 2: Linux性能分析工具Perf简介 (得分: 3.1547)
2025-07-23 22:46:32,805 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,805 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,805 __main__ INFO:   结果 3: Linux性能分析工具Perf完整指南 (得分: 2.2070)
2025-07-23 22:46:32,805 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,805 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,805 __main__ INFO: 
搜索查询: '缓存未命中'
2025-07-23 22:46:32,810 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,810 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.004s]
2025-07-23 22:46:32,810 __main__ INFO:   结果 1: Multi-language Performance Analysis Guide (得分: 3.7931)
2025-07-23 22:46:32,810 __main__ INFO:     类别: Performance Analysis
2025-07-23 22:46:32,810 __main__ INFO:     标签: performance, analysis, multilingual
2025-07-23 22:46:32,810 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 3.7898)
2025-07-23 22:46:32,810 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,810 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,810 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 3.5532)
2025-07-23 22:46:32,810 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,810 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,810 __main__ INFO: 
搜索查询: '深度学习模型'
2025-07-23 22:46:32,815 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,815 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.005s]
2025-07-23 22:46:32,815 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 12.6280)
2025-07-23 22:46:32,815 __main__ INFO:     类别: AI Development
2025-07-23 22:46:32,815 __main__ INFO:     标签: AI, machine learning, software development
2025-07-23 22:46:32,815 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 4.7229)
2025-07-23 22:46:32,815 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,815 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,815 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 0.8143)
2025-07-23 22:46:32,815 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,815 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,815 __main__ INFO: 
搜索查询: 'Linux tools'
2025-07-23 22:46:32,819 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,819 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.003s]
2025-07-23 22:46:32,819 __main__ INFO:   结果 1: Linux性能分析工具Perf完整指南 (得分: 4.3239)
2025-07-23 22:46:32,819 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,819 __main__ INFO:     标签: linux, perf, guide, tutorial
2025-07-23 22:46:32,819 __main__ INFO:   结果 2: Multi-language Performance Analysis Guide (得分: 3.2117)
2025-07-23 22:46:32,819 __main__ INFO:     类别: Performance Analysis
2025-07-23 22:46:32,819 __main__ INFO:     标签: performance, analysis, multilingual
2025-07-23 22:46:32,819 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 2.1150)
2025-07-23 22:46:32,819 __main__ INFO:     类别: Linux Tools
2025-07-23 22:46:32,819 __main__ INFO:     标签: linux, perf, performance, tools
2025-07-23 22:46:32,819 __main__ INFO: 
搜索查询: 'Elasticsearch'
2025-07-23 22:46:32,829 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,829 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.010s]
2025-07-23 22:46:32,829 __main__ INFO:   未找到相关结果
2025-07-23 22:46:32,829 __main__ INFO: 
=== 高级搜索测试 ===
2025-07-23 22:46:32,829 __main__ INFO: 
按类别搜索 'Linux Tools':
2025-07-23 22:46:32,833 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /test_documents/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,833 elastic_transport.transport INFO: POST https://localhost:9200/test_documents/_search [status:200 duration:0.003s]
2025-07-23 22:46:32,833 __main__ INFO:   结果 1: Linux性能分析工具Perf完整指南 (得分: 5.0170)
2025-07-23 22:46:32,833 __main__ INFO:   结果 2: Multi-language Performance Analysis Guide (得分: 3.2117)
2025-07-23 22:46:32,833 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 2.8082)
2025-07-23 22:46:32,833 __main__ INFO: 
=== 文档获取测试 ===
2025-07-23 22:46:32,835 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /test_documents/_doc/ai_development_doc HTTP/1.1" 200 0
2025-07-23 22:46:32,835 elastic_transport.transport INFO: GET https://localhost:9200/test_documents/_doc/ai_development_doc [status:200 duration:0.002s]
2025-07-23 22:46:32,835 __main__ INFO: 获取文档: 人工智能在软件开发中的应用
2025-07-23 22:46:32,835 __main__ INFO: 内容长度: 1030 字符
2025-07-23 22:46:32,835 __main__ INFO: 作者: AI Expert
2025-07-23 22:46:32,835 __main__ INFO: 
=== 索引统计 ===
2025-07-23 22:46:32,838 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /test_documents/_stats HTTP/1.1" 200 None
2025-07-23 22:46:32,838 elastic_transport.transport INFO: GET https://localhost:9200/test_documents/_stats [status:200 duration:0.003s]
2025-07-23 22:46:32,838 __main__ INFO: 索引名称: test_documents
2025-07-23 22:46:32,838 __main__ INFO: 文档数量: 4
2025-07-23 22:46:32,838 __main__ INFO: 存储大小: 68167 字节
2025-07-23 22:46:32,840 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /test_documents/_mapping HTTP/1.1" 200 None
2025-07-23 22:46:32,840 elastic_transport.transport INFO: GET https://localhost:9200/test_documents/_mapping [status:200 duration:0.001s]
2025-07-23 22:46:32,840 __main__ INFO: 映射字段数: 4
2025-07-23 22:46:32,840 __main__ INFO: 
=== 多索引操作演示 ===
2025-07-23 22:46:32,840 __main__ INFO: 创建临时索引: temp_test_index
2025-07-23 22:46:32,841 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /temp_test_index HTTP/1.1" 200 0
2025-07-23 22:46:32,841 elastic_transport.transport INFO: HEAD https://localhost:9200/temp_test_index [status:200 duration:0.001s]
2025-07-23 22:46:32,841 __main__ INFO: 临时索引 temp_test_index 创建成功
2025-07-23 22:46:32,842 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /temp_test_index HTTP/1.1" 200 0
2025-07-23 22:46:32,842 elastic_transport.transport INFO: HEAD https://localhost:9200/temp_test_index [status:200 duration:0.001s]
2025-07-23 22:46:32,859 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-23 22:46:32,863 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.020s]
2025-07-23 22:46:32,863 __main__ INFO: 成功向 temp_test_index 索引了 2 个文档
2025-07-23 22:46:32,877 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /temp_test_index/_search HTTP/1.1" 200 None
2025-07-23 22:46:32,877 elastic_transport.transport INFO: POST https://localhost:9200/temp_test_index/_search [status:200 duration:0.014s]
2025-07-23 22:46:32,878 __main__ INFO: 从 temp_test_index 搜索到 2 个结果
2025-07-23 22:46:32,878 __main__ INFO: 演示完成，如需删除临时索引 temp_test_index，请手动执行:
2025-07-23 22:46:32,878 __main__ INFO: curl -X DELETE 'https://localhost:9200/temp_test_index' -u elastic:sPxLec=NGSFmUT_7+74R -k
2025-07-23 22:46:32,878 __main__ INFO: 
Elasticsearch索引器示例完成!
2025-07-23 22:46:32,878 __main__ INFO: 
注意事项:
2025-07-23 22:46:32,878 __main__ INFO: - 索引删除功能已移除，如需删除索引请使用 Elasticsearch API 或管理工具
2025-07-23 22:46:32,878 __main__ INFO: - 所有方法现在都支持可选的 index_name 参数，提供更好的灵活性
2025-07-23 22:46:32,878 __main__ INFO: - 建议在生产环境中使用专门的索引管理工具
2025-07-23 22:50:16,152 __main__ INFO: 开始 Elasticsearch 向量索引器示例
2025-07-23 22:50:16,152 __main__ INFO: 初始化 OpenAI Embedding 客户端...
2025-07-23 22:50:16,259 __main__ ERROR: 示例执行失败: Using SOCKS proxy, but the 'socksio' package is not installed. Make sure to install httpx using `pip install httpx[socks]`.
2025-07-23 22:50:16,262 __main__ ERROR: Traceback (most recent call last):
  File "/Users/caixiaomeng/Projects/Python/PerformanceRag/examples/es_vector_indexer_example.py", line 138, in main
    embedding_client = OpenAIEmbedding(
  File "/Users/caixiaomeng/Projects/Python/PerformanceRag/rag/components/embedding/openai_embedding.py", line 48, in __init__
    self._init_client()
  File "/Users/caixiaomeng/Projects/Python/PerformanceRag/rag/components/embedding/openai_embedding.py", line 61, in _init_client
    self.client = openai.OpenAI(**client_kwargs)
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/openai/_client.py", line 154, in __init__
    super().__init__(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/openai/_base_client.py", line 861, in __init__
    self._client = http_client or SyncHttpxClientWrapper(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/openai/_base_client.py", line 791, in __init__
    super().__init__(**kwargs)
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/httpx/_client.py", line 697, in __init__
    self._mounts: dict[URLPattern, BaseTransport | None] = {
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/httpx/_client.py", line 700, in <dictcomp>
    else self._init_proxy_transport(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/httpx/_client.py", line 750, in _init_proxy_transport
    return HTTPTransport(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/httpx/_transports/default.py", line 191, in __init__
    raise ImportError(
ImportError: Using SOCKS proxy, but the 'socksio' package is not installed. Make sure to install httpx using `pip install httpx[socks]`.

2025-07-23 22:51:21,515 __main__ INFO: 开始 Elasticsearch 向量索引器示例
2025-07-23 22:51:21,515 __main__ INFO: 初始化 OpenAI Embedding 客户端...
2025-07-23 22:51:21,611 __main__ INFO: 创建 Elasticsearch 向量索引器...
2025-07-23 22:51:21,611 __main__ INFO: 初始化索引器...
2025-07-23 22:51:21,682 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-23 22:51:21,814 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-23 22:51:21,814 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.133s]
2025-07-23 22:51:21,815 __main__ INFO: 检查索引状态...
2025-07-23 22:51:21,817 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 404 0
2025-07-23 22:51:21,817 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:404 duration:0.002s]
2025-07-23 22:51:21,818 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 404 0
2025-07-23 22:51:21,818 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:404 duration:0.001s]
2025-07-23 22:51:22,026 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /vector_documents HTTP/1.1" 200 0
2025-07-23 22:51:22,028 elastic_transport.transport INFO: PUT https://localhost:9200/vector_documents [status:200 duration:0.210s]
2025-07-23 22:51:22,028 __main__ INFO: 向量索引准备就绪
2025-07-23 22:51:22,028 __main__ INFO: 加载测试数据...
2025-07-23 22:51:22,031 __main__ INFO: 加载了 4 个文档
2025-07-23 22:51:22,032 __main__ INFO: 生成文档向量...
2025-07-23 22:51:22,648 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-9bfe664c-1772-4edb-9684-4e66a41bbd77', 'post_parser': <function Embeddings.create.<locals>.parser at 0x102b82b90>, 'json_data': {'input': ['Multi-language Performance Analysis Guide\n多语言性能分析指南\n\nIntroduction 介绍\nPerformance analysis is crucial for system optimization. 性能分析对系统优化至关重要。\nWe need to understand both English and Chinese documentation. 我们需要理解中英文文档。\n\nHardware Events 硬件事件\nCPU cycles are fundamental performance metrics. CPU周期是基本的性能指标。\nMemory access patterns affect overall performance. 内存访问模式影响整体性能。\nCache misses indicate performance bottlenecks. 缓存未命中表示性能瓶颈。\n\nSoftware Events 软件事件\nContext switches occur frequently in multi-threaded applications. 上下文切换在多线程应用中频繁发生。\nPage faults indicate memory pressure. 页面错误表示内存压力。\nSystem calls are expensive operations. 系统调用是昂贵的操作。\n\nAnalysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis. Perf是Linux性能分析的主要工具。\nTop provides real-time system monitoring. Top提供实时系统监控。\nHtop offers an improved interface over top. Htop提供比top更好的界面。\n\nBest Practices 最佳实践\nAlways start with a baseline measurement. 始终从基线测量开始。\nMonitor both user and kernel space. 同时监控用户空间和内核空间。\nUse appropriate sampling rates. 使用适当的采样率。\n\nCommon Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms. 高CPU使用率可能表示算法效率低下。\nMemory leaks cause gradual performance degradation. 内存泄漏导致性能逐渐下降。\nI/O bottlenecks limit overall throughput. I/O瓶颈限制整体吞吐量。\n\nOptimization Techniques 优化技术\nProfile before optimizing. 在优化之前进行性能分析。\nFocus on the biggest bottlenecks first. 首先关注最大的瓶颈。\nMeasure the impact of changes. 测量变更的影响。\n\nConclusion 结论\nPerformance analysis requires both tools and understanding. 性能分析需要工具和理解。\nContinuous monitoring is essential for production systems. 持续监控对生产系统至关重要。\nDocument your findings for future reference. 记录发现以供将来参考。 ', '人工智能在软件开发中的应用\n\n人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，AI为开发者提供了强大的工具和平台。\n\n机器学习在代码分析中的应用\n机器学习算法可以分析大量代码库，识别常见的编程模式和最佳实践。通过训练模型识别代码质量指标，AI系统能够自动检测潜在的bug和性能问题。这种基于数据的方法比传统的静态分析工具更加智能和准确。\n\n深度学习在代码生成中的作用\n深度学习模型，特别是基于Transformer的架构，已经能够生成高质量的代码片段。这些模型通过分析数百万行代码进行训练，学会了编程语言的语法和语义规则。生成的代码不仅语法正确，还遵循了良好的编程实践。\n\n自然语言处理在需求分析中的价值\n自然语言处理技术使AI系统能够理解用自然语言描述的需求，并将其转换为技术规范。这种能力大大简化了需求收集和分析过程，减少了开发团队与客户之间的沟通成本。\n\n智能测试和调试工具\nAI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使用机器学习算法分析代码覆盖率，确保测试的全面性和有效性。在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。\n\n代码审查和质量保证\n人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风格、识别潜在的安全漏洞，并提供改进建议。这种自动化的审查过程提高了代码质量，减少了人工审查的工作量。\n\n持续集成和部署优化\n在CI/CD流程中，AI技术能够预测构建失败的可能性，优化测试执行顺序，并自动调整部署策略。通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。\n\n项目管理中的AI应用\n人工智能在项目管理中也发挥着重要作用。AI系统能够分析项目进度数据，预测完成时间，识别潜在的风险和瓶颈。通过机器学习算法，项目管理工具能够提供更准确的资源分配和任务调度建议。\n\n未来发展趋势\n随着AI技术的不断发展，我们可以预见更多创新的应用场景。从智能代码编辑器到自动化的系统架构设计，AI将继续推动软件开发行业的变革。开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。\n\n结论\n人工智能正在重塑软件开发的各个方面。从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者，而是要增强他们的能力。成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。 ', 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2.6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。Perf基于最新版本Linux内核的perf_events接口。这篇文章通过示例展示了Perf工具的使用。\n\n命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据。命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等。\n\n支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf.data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf.data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache.\nbuildid-list    List the buildids in a perf.data file\ndiff            Read two perf.data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf.data\nreport          Read perf.data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf.data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool.\n\n硬件事件\nPMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。\n\n软件事件\nPerf还支持一组通用软件事件，这些事件不依赖于硬件，由内核实现。软件事件包括：\ncpu-clock        [Software event]\ntask-clock       [Software event]\npage-faults      [Software event]\ncontext-switches [Software event]\ncpu-migrations   [Software event]\nminor-faults     [Software event]\nmajor-faults     [Software event]\nalignment-faults [Software event]\nemulation-faults [Software event]\n\n缓存事件\n缓存事件是硬件事件，但通常由内核以软件事件的形式提供，因为硬件不支持缓存事件。缓存事件包括：\nL1-dcache-loads                                [Hardware cache event]\nL1-dcache-load-misses                          [Hardware cache event]\nL1-dcache-stores                               [Hardware cache event]\nL1-dcache-store-misses                         [Hardware cache event]\nL1-dcache-prefetches                           [Hardware cache event]\nL1-dcache-prefetch-misses                      [Hardware cache event]\nL1-icache-loads                                [Hardware cache event]\nL1-icache-load-misses                          [Hardware cache event]\nL1-icache-prefetches                           [Hardware cache event]\nL1-icache-prefetch-misses                      [Hardware cache event]\nLLC-loads                                       [Hardware cache event]\nLLC-load-misses                                [Hardware cache event]\nLLC-stores                                      [Hardware cache event]\nLLC-store-misses                               [Hardware cache event]\nLLC-prefetch-misses                            [Hardware cache event]\ndTLB-loads                                      [Hardware cache event]\ndTLB-load-misses                               [Hardware cache event]\ndTLB-stores                                     [Hardware cache event]\ndTLB-store-misses                              [Hardware cache event]\ndTLB-prefetches                                [Hardware cache event]\ndTLB-prefetch-misses                           [Hardware cache event]\niTLB-loads                                      [Hardware cache event]\niTLB-load-misses                               [Hardware cache event]\nbranch-loads                                    [Hardware cache event]\nbranch-load-misses                             [Hardware cache event]\n\n使用模式\nPerf支持多种使用模式，包括per-thread、per-process、per-cpu和per-system。在per-thread模式下，只监控指定的线程。计数和采样只在该线程上合计。在per-process模式下，进程中的所有线程都被监控。计数和采样在进程级别被合计。在per-cpu模式下，指定处理器上所有线程都被监控。计数和采样在每个CPU上合计。\n\n性能分析示例\n以下是一个使用perf进行性能分析的示例：\n\n1. 使用perf stat收集性能计数器统计信息：\nperf stat -B -ecycles:u,instructions:u -a dd if=/dev/zero of=/dev/null count=2000000\n\n2. 使用perf record收集样本：\nperf record -a -g -e cycles sleep 10\n\n3. 使用perf report查看报告：\nperf report\n\n4. 使用perf annotate查看注释代码：\nperf annotate\n\n5. 使用perf script查看脚本输出：\nperf script\n\n这些命令提供了强大的性能分析功能，帮助开发者识别性能瓶颈并优化代码。 ', "# Linux性能分析工具Perf完整指南\n\n## 1. 概述\n\n### 1.1 什么是Perf\nPerf是一个基于Linux 2.6+系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。\n\n### 1.2 主要特性\n- 硬件事件监控\n- 软件事件分析\n- 缓存性能测量\n- 系统调用跟踪\n- 用户空间和内核空间分析\n\n## 2. 安装和配置\n\n### 2.1 系统要求\n- Linux内核版本 2.6.31+\n- 支持perf_events接口\n- 适当的权限设置\n\n### 2.2 安装方法\n```bash\n# Ubuntu/Debian\nsudo apt-get install linux-tools-common linux-tools-generic\n\n# CentOS/RHEL\nsudo yum install perf\n\n# 从源码编译\ngit clone https://github.com/torvalds/linux.git\ncd linux/tools/perf\nmake\n```\n\n## 3. 基本命令\n\n### 3.1 perf stat\n收集性能计数器统计信息。\n\n**基本用法：**\n```bash\nperf stat -e cycles,instructions -a sleep 5\n```\n\n**常用选项：**\n- `-e`: 指定事件\n- `-a`: 系统范围监控\n- `-p`: 指定进程ID\n- `-t`: 指定线程ID\n\n### 3.2 perf record\n记录性能数据到文件。\n\n**基本用法：**\n```bash\nperf record -g -e cycles -a sleep 10\n```\n\n**常用选项：**\n- `-g`: 记录调用栈\n- `-F`: 采样频率\n- `-o`: 输出文件\n\n### 3.3 perf report\n分析记录的性能数据。\n\n**基本用法：**\n```bash\nperf report -i perf.data\n```\n\n## 4. 高级功能\n\n### 4.1 事件类型\n\n#### 硬件事件\n- CPU周期\n- 指令数\n- 缓存命中/未命中\n- 分支预测\n\n#### 软件事件\n- 页面错误\n- 上下文切换\n- CPU迁移\n- 系统调用\n\n### 4.2 分析模式\n\n#### CPU分析\n```bash\nperf top -e cycles\n```\n\n#### 内存分析\n```bash\nperf mem record\nperf mem report\n```\n\n#### 锁分析\n```bash\nperf lock record\nperf lock report\n```\n\n## 5. 实际应用场景\n\n### 5.1 应用程序性能分析\n```bash\n# 分析特定程序\nperf record -g ./my_application\nperf report\n\n# 实时监控\nperf top -p $(pgrep my_application)\n```\n\n### 5.2 系统级性能分析\n```bash\n# 系统范围监控\nperf stat -a sleep 10\n\n# 分析系统调用\nperf trace -p $(pgrep my_application)\n```\n\n### 5.3 内核性能分析\n```bash\n# 内核函数分析\nperf record -g -e cycles -a sleep 10\nperf report --kernel\n\n# 内核模块分析\nperf probe --add function_name\nperf record -e probe:function_name -a\n```\n\n## 6. 最佳实践\n\n### 6.1 性能分析流程\n1. **确定目标**：明确要分析的性能问题\n2. **选择工具**：根据问题选择合适的perf命令\n3. **收集数据**：使用perf record收集性能数据\n4. **分析结果**：使用perf report分析数据\n5. **优化代码**：根据分析结果进行优化\n\n### 6.2 常见问题解决\n\n#### 权限问题\n```bash\n# 设置perf权限\necho -1 > /proc/sys/kernel/perf_event_paranoid\n```\n\n#### 采样频率调整\n```bash\n# 调整采样频率\nperf record -F 1000 -g -e cycles -a\n```\n\n#### 数据文件管理\n```bash\n# 压缩数据文件\nperf archive\n\n# 查看数据文件信息\nperf report --header-only\n```\n\n## 7. 与其他工具集成\n\n### 7.1 与gdb集成\n```bash\nperf record -g --call-graph dwarf ./my_application\nperf report --stdio\n```\n\n### 7.2 与火焰图集成\n```bash\n# 生成火焰图\nperf script | stackcollapse-perf.pl | flamegraph.pl > flamegraph.svg\n```\n\n### 7.3 与Python脚本集成\n```python\nimport subprocess\n\ndef run_perf_stat(command):\n    result = subprocess.run(['perf', 'stat', '-x', ','] + command,\n                          capture_output=True, text=True)\n    return result.stdout\n```\n\n## 8. 故障排除\n\n### 8.1 常见错误\n- **权限不足**：检查perf_event_paranoid设置\n- **内核不支持**：确认内核版本和配置\n- **事件不可用**：检查硬件支持\n\n### 8.2 调试技巧\n```bash\n# 查看可用事件\nperf list\n\n# 检查perf版本\nperf --version\n\n# 查看系统信息\nperf report --header-only\n```\n\n## 9. 总结\n\nPerf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通过合理使用perf的各种功能，可以有效地识别和解决性能问题，提升系统整体性能。\n\n### 9.1 关键要点\n- 选择合适的分析模式\n- 正确配置权限和参数\n- 结合其他工具使用\n- 持续监控和优化\n\n### 9.2 进一步学习\n- 阅读perf官方文档\n- 参与Linux内核社区\n- 实践各种分析场景\n- 分享经验和最佳实践 "], 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:51:22,663 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:51:22,664 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 22:51:22,664 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x177eb9fc0>
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:51:22,664 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 22:51:22,664 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x17715b540> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 22:51:22,697 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x177eb9ff0>
2025-07-23 22:51:22,697 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:51:22,697 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:51:22,697 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:51:22,697 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:51:22,697 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:51:23,031 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:51:23 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0a472f8917532822829267490e00537e265312c63bd7b03877600a8c0f443b;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723225122b1a6736840d24cdf'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:51:23,034 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:51:23,036 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:51:23,088 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:51:23,088 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:51:23,089 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:51:23,089 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:51:23 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0a472f8917532822829267490e00537e265312c63bd7b03877600a8c0f443b;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723225122b1a6736840d24cdf'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:51:23,090 openai._base_client DEBUG: request_id: None
2025-07-23 22:51:23,138 __main__ INFO: 成功生成 4 个向量，每个向量维度: 2048
2025-07-23 22:51:23,138 __main__ INFO: 开始索引文档和向量...
2025-07-23 22:51:23,145 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 200 0
2025-07-23 22:51:23,145 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:200 duration:0.007s]
2025-07-23 22:51:23,228 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-23 22:51:23,228 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.059s]
2025-07-23 22:51:23,228 rag.components.base ERROR: 索引文档失败: 4 document(s) failed to index.
2025-07-23 22:51:23,228 __main__ ERROR: 文档索引失败
2025-07-23 22:57:09,067 __main__ INFO: 开始 Elasticsearch 向量索引器示例
2025-07-23 22:57:09,068 __main__ INFO: 初始化 OpenAI Embedding 客户端...
2025-07-23 22:57:09,175 __main__ INFO: 创建 Elasticsearch 向量索引器...
2025-07-23 22:57:09,176 __main__ INFO: 初始化索引器...
2025-07-23 22:57:09,264 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-23 22:57:09,307 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-23 22:57:09,308 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.044s]
2025-07-23 22:57:09,308 __main__ INFO: 检查索引状态...
2025-07-23 22:57:09,313 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 200 0
2025-07-23 22:57:09,314 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:200 duration:0.006s]
2025-07-23 22:57:09,314 __main__ WARNING: 索引 vector_documents 已存在
2025-07-23 22:57:09,314 __main__ INFO: 如果需要重新创建索引，请手动删除后重新运行
2025-07-23 22:57:09,314 __main__ INFO: 删除命令: curl -X DELETE 'https://localhost:9200/vector_documents' -u elastic:sPxLec=NGSFmUT_7+74R -k
2025-07-23 22:57:09,316 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 200 0
2025-07-23 22:57:09,316 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:200 duration:0.002s]
2025-07-23 22:57:09,316 __main__ INFO: 向量索引准备就绪
2025-07-23 22:57:09,316 __main__ INFO: 加载测试数据...
2025-07-23 22:57:09,319 __main__ INFO: 加载了 4 个文档
2025-07-23 22:57:09,319 __main__ INFO: 生成文档向量...
2025-07-23 22:57:09,433 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e2ed52fa-d2d0-4b86-9758-0a36ba25a337', 'post_parser': <function Embeddings.create.<locals>.parser at 0x104292b90>, 'json_data': {'input': ['Multi-language Performance Analysis Guide\n多语言性能分析指南\n\nIntroduction 介绍\nPerformance analysis is crucial for system optimization. 性能分析对系统优化至关重要。\nWe need to understand both English and Chinese documentation. 我们需要理解中英文文档。\n\nHardware Events 硬件事件\nCPU cycles are fundamental performance metrics. CPU周期是基本的性能指标。\nMemory access patterns affect overall performance. 内存访问模式影响整体性能。\nCache misses indicate performance bottlenecks. 缓存未命中表示性能瓶颈。\n\nSoftware Events 软件事件\nContext switches occur frequently in multi-threaded applications. 上下文切换在多线程应用中频繁发生。\nPage faults indicate memory pressure. 页面错误表示内存压力。\nSystem calls are expensive operations. 系统调用是昂贵的操作。\n\nAnalysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis. Perf是Linux性能分析的主要工具。\nTop provides real-time system monitoring. Top提供实时系统监控。\nHtop offers an improved interface over top. Htop提供比top更好的界面。\n\nBest Practices 最佳实践\nAlways start with a baseline measurement. 始终从基线测量开始。\nMonitor both user and kernel space. 同时监控用户空间和内核空间。\nUse appropriate sampling rates. 使用适当的采样率。\n\nCommon Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms. 高CPU使用率可能表示算法效率低下。\nMemory leaks cause gradual performance degradation. 内存泄漏导致性能逐渐下降。\nI/O bottlenecks limit overall throughput. I/O瓶颈限制整体吞吐量。\n\nOptimization Techniques 优化技术\nProfile before optimizing. 在优化之前进行性能分析。\nFocus on the biggest bottlenecks first. 首先关注最大的瓶颈。\nMeasure the impact of changes. 测量变更的影响。\n\nConclusion 结论\nPerformance analysis requires both tools and understanding. 性能分析需要工具和理解。\nContinuous monitoring is essential for production systems. 持续监控对生产系统至关重要。\nDocument your findings for future reference. 记录发现以供将来参考。 ', '人工智能在软件开发中的应用\n\n人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，AI为开发者提供了强大的工具和平台。\n\n机器学习在代码分析中的应用\n机器学习算法可以分析大量代码库，识别常见的编程模式和最佳实践。通过训练模型识别代码质量指标，AI系统能够自动检测潜在的bug和性能问题。这种基于数据的方法比传统的静态分析工具更加智能和准确。\n\n深度学习在代码生成中的作用\n深度学习模型，特别是基于Transformer的架构，已经能够生成高质量的代码片段。这些模型通过分析数百万行代码进行训练，学会了编程语言的语法和语义规则。生成的代码不仅语法正确，还遵循了良好的编程实践。\n\n自然语言处理在需求分析中的价值\n自然语言处理技术使AI系统能够理解用自然语言描述的需求，并将其转换为技术规范。这种能力大大简化了需求收集和分析过程，减少了开发团队与客户之间的沟通成本。\n\n智能测试和调试工具\nAI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使用机器学习算法分析代码覆盖率，确保测试的全面性和有效性。在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。\n\n代码审查和质量保证\n人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风格、识别潜在的安全漏洞，并提供改进建议。这种自动化的审查过程提高了代码质量，减少了人工审查的工作量。\n\n持续集成和部署优化\n在CI/CD流程中，AI技术能够预测构建失败的可能性，优化测试执行顺序，并自动调整部署策略。通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。\n\n项目管理中的AI应用\n人工智能在项目管理中也发挥着重要作用。AI系统能够分析项目进度数据，预测完成时间，识别潜在的风险和瓶颈。通过机器学习算法，项目管理工具能够提供更准确的资源分配和任务调度建议。\n\n未来发展趋势\n随着AI技术的不断发展，我们可以预见更多创新的应用场景。从智能代码编辑器到自动化的系统架构设计，AI将继续推动软件开发行业的变革。开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。\n\n结论\n人工智能正在重塑软件开发的各个方面。从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者，而是要增强他们的能力。成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。 ', 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2.6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。Perf基于最新版本Linux内核的perf_events接口。这篇文章通过示例展示了Perf工具的使用。\n\n命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据。命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等。\n\n支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf.data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf.data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache.\nbuildid-list    List the buildids in a perf.data file\ndiff            Read two perf.data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf.data\nreport          Read perf.data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf.data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool.\n\n硬件事件\nPMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。\n\n软件事件\nPerf还支持一组通用软件事件，这些事件不依赖于硬件，由内核实现。软件事件包括：\ncpu-clock        [Software event]\ntask-clock       [Software event]\npage-faults      [Software event]\ncontext-switches [Software event]\ncpu-migrations   [Software event]\nminor-faults     [Software event]\nmajor-faults     [Software event]\nalignment-faults [Software event]\nemulation-faults [Software event]\n\n缓存事件\n缓存事件是硬件事件，但通常由内核以软件事件的形式提供，因为硬件不支持缓存事件。缓存事件包括：\nL1-dcache-loads                                [Hardware cache event]\nL1-dcache-load-misses                          [Hardware cache event]\nL1-dcache-stores                               [Hardware cache event]\nL1-dcache-store-misses                         [Hardware cache event]\nL1-dcache-prefetches                           [Hardware cache event]\nL1-dcache-prefetch-misses                      [Hardware cache event]\nL1-icache-loads                                [Hardware cache event]\nL1-icache-load-misses                          [Hardware cache event]\nL1-icache-prefetches                           [Hardware cache event]\nL1-icache-prefetch-misses                      [Hardware cache event]\nLLC-loads                                       [Hardware cache event]\nLLC-load-misses                                [Hardware cache event]\nLLC-stores                                      [Hardware cache event]\nLLC-store-misses                               [Hardware cache event]\nLLC-prefetch-misses                            [Hardware cache event]\ndTLB-loads                                      [Hardware cache event]\ndTLB-load-misses                               [Hardware cache event]\ndTLB-stores                                     [Hardware cache event]\ndTLB-store-misses                              [Hardware cache event]\ndTLB-prefetches                                [Hardware cache event]\ndTLB-prefetch-misses                           [Hardware cache event]\niTLB-loads                                      [Hardware cache event]\niTLB-load-misses                               [Hardware cache event]\nbranch-loads                                    [Hardware cache event]\nbranch-load-misses                             [Hardware cache event]\n\n使用模式\nPerf支持多种使用模式，包括per-thread、per-process、per-cpu和per-system。在per-thread模式下，只监控指定的线程。计数和采样只在该线程上合计。在per-process模式下，进程中的所有线程都被监控。计数和采样在进程级别被合计。在per-cpu模式下，指定处理器上所有线程都被监控。计数和采样在每个CPU上合计。\n\n性能分析示例\n以下是一个使用perf进行性能分析的示例：\n\n1. 使用perf stat收集性能计数器统计信息：\nperf stat -B -ecycles:u,instructions:u -a dd if=/dev/zero of=/dev/null count=2000000\n\n2. 使用perf record收集样本：\nperf record -a -g -e cycles sleep 10\n\n3. 使用perf report查看报告：\nperf report\n\n4. 使用perf annotate查看注释代码：\nperf annotate\n\n5. 使用perf script查看脚本输出：\nperf script\n\n这些命令提供了强大的性能分析功能，帮助开发者识别性能瓶颈并优化代码。 ', "# Linux性能分析工具Perf完整指南\n\n## 1. 概述\n\n### 1.1 什么是Perf\nPerf是一个基于Linux 2.6+系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。\n\n### 1.2 主要特性\n- 硬件事件监控\n- 软件事件分析\n- 缓存性能测量\n- 系统调用跟踪\n- 用户空间和内核空间分析\n\n## 2. 安装和配置\n\n### 2.1 系统要求\n- Linux内核版本 2.6.31+\n- 支持perf_events接口\n- 适当的权限设置\n\n### 2.2 安装方法\n```bash\n# Ubuntu/Debian\nsudo apt-get install linux-tools-common linux-tools-generic\n\n# CentOS/RHEL\nsudo yum install perf\n\n# 从源码编译\ngit clone https://github.com/torvalds/linux.git\ncd linux/tools/perf\nmake\n```\n\n## 3. 基本命令\n\n### 3.1 perf stat\n收集性能计数器统计信息。\n\n**基本用法：**\n```bash\nperf stat -e cycles,instructions -a sleep 5\n```\n\n**常用选项：**\n- `-e`: 指定事件\n- `-a`: 系统范围监控\n- `-p`: 指定进程ID\n- `-t`: 指定线程ID\n\n### 3.2 perf record\n记录性能数据到文件。\n\n**基本用法：**\n```bash\nperf record -g -e cycles -a sleep 10\n```\n\n**常用选项：**\n- `-g`: 记录调用栈\n- `-F`: 采样频率\n- `-o`: 输出文件\n\n### 3.3 perf report\n分析记录的性能数据。\n\n**基本用法：**\n```bash\nperf report -i perf.data\n```\n\n## 4. 高级功能\n\n### 4.1 事件类型\n\n#### 硬件事件\n- CPU周期\n- 指令数\n- 缓存命中/未命中\n- 分支预测\n\n#### 软件事件\n- 页面错误\n- 上下文切换\n- CPU迁移\n- 系统调用\n\n### 4.2 分析模式\n\n#### CPU分析\n```bash\nperf top -e cycles\n```\n\n#### 内存分析\n```bash\nperf mem record\nperf mem report\n```\n\n#### 锁分析\n```bash\nperf lock record\nperf lock report\n```\n\n## 5. 实际应用场景\n\n### 5.1 应用程序性能分析\n```bash\n# 分析特定程序\nperf record -g ./my_application\nperf report\n\n# 实时监控\nperf top -p $(pgrep my_application)\n```\n\n### 5.2 系统级性能分析\n```bash\n# 系统范围监控\nperf stat -a sleep 10\n\n# 分析系统调用\nperf trace -p $(pgrep my_application)\n```\n\n### 5.3 内核性能分析\n```bash\n# 内核函数分析\nperf record -g -e cycles -a sleep 10\nperf report --kernel\n\n# 内核模块分析\nperf probe --add function_name\nperf record -e probe:function_name -a\n```\n\n## 6. 最佳实践\n\n### 6.1 性能分析流程\n1. **确定目标**：明确要分析的性能问题\n2. **选择工具**：根据问题选择合适的perf命令\n3. **收集数据**：使用perf record收集性能数据\n4. **分析结果**：使用perf report分析数据\n5. **优化代码**：根据分析结果进行优化\n\n### 6.2 常见问题解决\n\n#### 权限问题\n```bash\n# 设置perf权限\necho -1 > /proc/sys/kernel/perf_event_paranoid\n```\n\n#### 采样频率调整\n```bash\n# 调整采样频率\nperf record -F 1000 -g -e cycles -a\n```\n\n#### 数据文件管理\n```bash\n# 压缩数据文件\nperf archive\n\n# 查看数据文件信息\nperf report --header-only\n```\n\n## 7. 与其他工具集成\n\n### 7.1 与gdb集成\n```bash\nperf record -g --call-graph dwarf ./my_application\nperf report --stdio\n```\n\n### 7.2 与火焰图集成\n```bash\n# 生成火焰图\nperf script | stackcollapse-perf.pl | flamegraph.pl > flamegraph.svg\n```\n\n### 7.3 与Python脚本集成\n```python\nimport subprocess\n\ndef run_perf_stat(command):\n    result = subprocess.run(['perf', 'stat', '-x', ','] + command,\n                          capture_output=True, text=True)\n    return result.stdout\n```\n\n## 8. 故障排除\n\n### 8.1 常见错误\n- **权限不足**：检查perf_event_paranoid设置\n- **内核不支持**：确认内核版本和配置\n- **事件不可用**：检查硬件支持\n\n### 8.2 调试技巧\n```bash\n# 查看可用事件\nperf list\n\n# 检查perf版本\nperf --version\n\n# 查看系统信息\nperf report --header-only\n```\n\n## 9. 总结\n\nPerf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通过合理使用perf的各种功能，可以有效地识别和解决性能问题，提升系统整体性能。\n\n### 9.1 关键要点\n- 选择合适的分析模式\n- 正确配置权限和参数\n- 结合其他工具使用\n- 持续监控和优化\n\n### 9.2 进一步学习\n- 阅读perf官方文档\n- 参与Linux内核社区\n- 实践各种分析场景\n- 分享经验和最佳实践 "], 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:57:09,451 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:57:09,451 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 22:57:09,452 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17954d570>
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:57:09,452 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 22:57:09,452 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x1781eb640> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 22:57:09,487 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17954d5a0>
2025-07-23 22:57:09,487 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:57:09,487 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:57:09,487 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:57:09,487 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:57:09,487 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:57:09,724 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:57:09 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0aef82e417532826297204027e007e73bdbfcbb0ac97da41fa9001180270a7;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723225709dbbe2f5126e3400e'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:57:09,725 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:57:09,725 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:57:09,795 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:57:09,795 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:57:09,795 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:57:09,795 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:57:09 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0aef82e417532826297204027e007e73bdbfcbb0ac97da41fa9001180270a7;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723225709dbbe2f5126e3400e'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:57:09,795 openai._base_client DEBUG: request_id: None
2025-07-23 22:57:09,819 __main__ INFO: 成功生成 4 个向量，每个向量维度: 2048
2025-07-23 22:57:09,819 __main__ INFO: 开始索引文档和向量...
2025-07-23 22:57:09,874 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-23 22:57:09,874 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.035s]
2025-07-23 22:57:09,874 __main__ ERROR: 文档索引失败: 4 document(s) failed to index.
2025-07-23 22:57:09,875 __main__ ERROR: Traceback (most recent call last):
  File "/Users/caixiaomeng/Projects/Python/PerformanceRag/examples/es_vector_indexer_example.py", line 237, in main
    success_count, failed_items = bulk(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/elasticsearch/helpers/actions.py", line 521, in bulk
    for ok, item in streaming_bulk(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/elasticsearch/helpers/actions.py", line 436, in streaming_bulk
    for data, (ok, info) in zip(
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/elasticsearch/helpers/actions.py", line 355, in _process_bulk_chunk
    yield from gen
  File "/Users/caixiaomeng/miniconda3/envs/rag/lib/python3.10/site-packages/elasticsearch/helpers/actions.py", line 274, in _process_bulk_chunk_success
    raise BulkIndexError(f"{len(errors)} document(s) failed to index.", errors)
elasticsearch.helpers.BulkIndexError: 4 document(s) failed to index.

2025-07-23 22:59:42,234 __main__ INFO: 开始 Elasticsearch 向量索引器示例
2025-07-23 22:59:42,234 __main__ INFO: 初始化 OpenAI Embedding 客户端...
2025-07-23 22:59:42,394 __main__ INFO: 创建 Elasticsearch 向量索引器...
2025-07-23 22:59:42,395 __main__ INFO: 初始化索引器...
2025-07-23 22:59:42,465 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-23 22:59:42,501 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-23 22:59:42,501 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.036s]
2025-07-23 22:59:42,501 __main__ INFO: 检查索引状态...
2025-07-23 22:59:42,504 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 404 0
2025-07-23 22:59:42,504 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:404 duration:0.002s]
2025-07-23 22:59:42,505 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /vector_documents HTTP/1.1" 404 0
2025-07-23 22:59:42,505 elastic_transport.transport INFO: HEAD https://localhost:9200/vector_documents [status:404 duration:0.001s]
2025-07-23 22:59:42,691 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /vector_documents HTTP/1.1" 200 0
2025-07-23 22:59:42,692 elastic_transport.transport INFO: PUT https://localhost:9200/vector_documents [status:200 duration:0.186s]
2025-07-23 22:59:42,692 __main__ INFO: 向量索引准备就绪
2025-07-23 22:59:42,692 __main__ INFO: 加载测试数据...
2025-07-23 22:59:42,694 __main__ INFO: 加载了 4 个文档
2025-07-23 22:59:42,696 __main__ INFO: 生成文档向量...
2025-07-23 22:59:42,798 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-6bf6ec0c-9a6b-4a03-8c42-7ac1a8652f8b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x1071a2b90>, 'json_data': {'input': ['Multi-language Performance Analysis Guide\n多语言性能分析指南\n\nIntroduction 介绍\nPerformance analysis is crucial for system optimization. 性能分析对系统优化至关重要。\nWe need to understand both English and Chinese documentation. 我们需要理解中英文文档。\n\nHardware Events 硬件事件\nCPU cycles are fundamental performance metrics. CPU周期是基本的性能指标。\nMemory access patterns affect overall performance. 内存访问模式影响整体性能。\nCache misses indicate performance bottlenecks. 缓存未命中表示性能瓶颈。\n\nSoftware Events 软件事件\nContext switches occur frequently in multi-threaded applications. 上下文切换在多线程应用中频繁发生。\nPage faults indicate memory pressure. 页面错误表示内存压力。\nSystem calls are expensive operations. 系统调用是昂贵的操作。\n\nAnalysis Tools 分析工具\nPerf is the primary tool for Linux performance analysis. Perf是Linux性能分析的主要工具。\nTop provides real-time system monitoring. Top提供实时系统监控。\nHtop offers an improved interface over top. Htop提供比top更好的界面。\n\nBest Practices 最佳实践\nAlways start with a baseline measurement. 始终从基线测量开始。\nMonitor both user and kernel space. 同时监控用户空间和内核空间。\nUse appropriate sampling rates. 使用适当的采样率。\n\nCommon Issues 常见问题\nHigh CPU usage may indicate inefficient algorithms. 高CPU使用率可能表示算法效率低下。\nMemory leaks cause gradual performance degradation. 内存泄漏导致性能逐渐下降。\nI/O bottlenecks limit overall throughput. I/O瓶颈限制整体吞吐量。\n\nOptimization Techniques 优化技术\nProfile before optimizing. 在优化之前进行性能分析。\nFocus on the biggest bottlenecks first. 首先关注最大的瓶颈。\nMeasure the impact of changes. 测量变更的影响。\n\nConclusion 结论\nPerformance analysis requires both tools and understanding. 性能分析需要工具和理解。\nContinuous monitoring is essential for production systems. 持续监控对生产系统至关重要。\nDocument your findings for future reference. 记录发现以供将来参考。 ', '人工智能在软件开发中的应用\n\n人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，AI为开发者提供了强大的工具和平台。\n\n机器学习在代码分析中的应用\n机器学习算法可以分析大量代码库，识别常见的编程模式和最佳实践。通过训练模型识别代码质量指标，AI系统能够自动检测潜在的bug和性能问题。这种基于数据的方法比传统的静态分析工具更加智能和准确。\n\n深度学习在代码生成中的作用\n深度学习模型，特别是基于Transformer的架构，已经能够生成高质量的代码片段。这些模型通过分析数百万行代码进行训练，学会了编程语言的语法和语义规则。生成的代码不仅语法正确，还遵循了良好的编程实践。\n\n自然语言处理在需求分析中的价值\n自然语言处理技术使AI系统能够理解用自然语言描述的需求，并将其转换为技术规范。这种能力大大简化了需求收集和分析过程，减少了开发团队与客户之间的沟通成本。\n\n智能测试和调试工具\nAI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使用机器学习算法分析代码覆盖率，确保测试的全面性和有效性。在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。\n\n代码审查和质量保证\n人工智能在代码审查过程中发挥着越来越重要的作用。AI系统能够自动检查代码风格、识别潜在的安全漏洞，并提供改进建议。这种自动化的审查过程提高了代码质量，减少了人工审查的工作量。\n\n持续集成和部署优化\n在CI/CD流程中，AI技术能够预测构建失败的可能性，优化测试执行顺序，并自动调整部署策略。通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。\n\n项目管理中的AI应用\n人工智能在项目管理中也发挥着重要作用。AI系统能够分析项目进度数据，预测完成时间，识别潜在的风险和瓶颈。通过机器学习算法，项目管理工具能够提供更准确的资源分配和任务调度建议。\n\n未来发展趋势\n随着AI技术的不断发展，我们可以预见更多创新的应用场景。从智能代码编辑器到自动化的系统架构设计，AI将继续推动软件开发行业的变革。开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。\n\n结论\n人工智能正在重塑软件开发的各个方面。从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者，而是要增强他们的能力。成功的软件开发团队将是那些能够有效利用AI工具，同时保持人类创造力和判断力的团队。 ', 'Linux性能分析工具Perf简介\n\n介绍\nPerf是一个基于Linux 2.6 +系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。Perf基于最新版本Linux内核的perf_events接口。这篇文章通过示例展示了Perf工具的使用。\n\n命令\nPerf工具提供了一组丰富的命令来收集和分析性能和跟踪数据。命令行的用法与git类似，通过一个通用的命令Perf，实现了一组子命令: stat, record, report, annotate, script, bench等。\n\n支持的命令列表:\nperf usage: perf [--version] [--help] COMMAND [ARGS]\n\nThe most commonly used perf commands are:\nannotate        Read perf.data (created by perf record) and display annotated code\narchive         Create archive with object files with build-ids found in perf.data file\nbench           General framework for benchmark suites\nbuildid-cache   Manage build-id cache.\nbuildid-list    List the buildids in a perf.data file\ndiff            Read two perf.data files and display the differential profile\ninject          Filter to augment the events stream with additional information\nkmem            Tool to trace/measure kernel memory(slab) properties\nkvm             Tool to trace/measure kvm guest os\nlist            List all symbolic event types\nlock            Analyze lock events\nprobe           Define new dynamic tracepoints\nrecord          Run a command and record its profile into perf.data\nreport          Read perf.data (created by perf record) and display the profile\nsched           Tool to trace/measure scheduler properties (latencies)\nscript          Read perf.data (created by perf record) and display trace output\nstat            Run a command and gather performance counter statistics\ntop             System profiling tool.\n\n硬件事件\nPMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD处理器的PMU硬件事件的列表，请参阅英特尔PMU事件表：手册的附录A。\n\n软件事件\nPerf还支持一组通用软件事件，这些事件不依赖于硬件，由内核实现。软件事件包括：\ncpu-clock        [Software event]\ntask-clock       [Software event]\npage-faults      [Software event]\ncontext-switches [Software event]\ncpu-migrations   [Software event]\nminor-faults     [Software event]\nmajor-faults     [Software event]\nalignment-faults [Software event]\nemulation-faults [Software event]\n\n缓存事件\n缓存事件是硬件事件，但通常由内核以软件事件的形式提供，因为硬件不支持缓存事件。缓存事件包括：\nL1-dcache-loads                                [Hardware cache event]\nL1-dcache-load-misses                          [Hardware cache event]\nL1-dcache-stores                               [Hardware cache event]\nL1-dcache-store-misses                         [Hardware cache event]\nL1-dcache-prefetches                           [Hardware cache event]\nL1-dcache-prefetch-misses                      [Hardware cache event]\nL1-icache-loads                                [Hardware cache event]\nL1-icache-load-misses                          [Hardware cache event]\nL1-icache-prefetches                           [Hardware cache event]\nL1-icache-prefetch-misses                      [Hardware cache event]\nLLC-loads                                       [Hardware cache event]\nLLC-load-misses                                [Hardware cache event]\nLLC-stores                                      [Hardware cache event]\nLLC-store-misses                               [Hardware cache event]\nLLC-prefetch-misses                            [Hardware cache event]\ndTLB-loads                                      [Hardware cache event]\ndTLB-load-misses                               [Hardware cache event]\ndTLB-stores                                     [Hardware cache event]\ndTLB-store-misses                              [Hardware cache event]\ndTLB-prefetches                                [Hardware cache event]\ndTLB-prefetch-misses                           [Hardware cache event]\niTLB-loads                                      [Hardware cache event]\niTLB-load-misses                               [Hardware cache event]\nbranch-loads                                    [Hardware cache event]\nbranch-load-misses                             [Hardware cache event]\n\n使用模式\nPerf支持多种使用模式，包括per-thread、per-process、per-cpu和per-system。在per-thread模式下，只监控指定的线程。计数和采样只在该线程上合计。在per-process模式下，进程中的所有线程都被监控。计数和采样在进程级别被合计。在per-cpu模式下，指定处理器上所有线程都被监控。计数和采样在每个CPU上合计。\n\n性能分析示例\n以下是一个使用perf进行性能分析的示例：\n\n1. 使用perf stat收集性能计数器统计信息：\nperf stat -B -ecycles:u,instructions:u -a dd if=/dev/zero of=/dev/null count=2000000\n\n2. 使用perf record收集样本：\nperf record -a -g -e cycles sleep 10\n\n3. 使用perf report查看报告：\nperf report\n\n4. 使用perf annotate查看注释代码：\nperf annotate\n\n5. 使用perf script查看脚本输出：\nperf script\n\n这些命令提供了强大的性能分析功能，帮助开发者识别性能瓶颈并优化代码。 ', "# Linux性能分析工具Perf完整指南\n\n## 1. 概述\n\n### 1.1 什么是Perf\nPerf是一个基于Linux 2.6+系统的分析工具，它抽象了在Linux中性能度量中CPU的硬件差异，提供一个简单的命令行界面。\n\n### 1.2 主要特性\n- 硬件事件监控\n- 软件事件分析\n- 缓存性能测量\n- 系统调用跟踪\n- 用户空间和内核空间分析\n\n## 2. 安装和配置\n\n### 2.1 系统要求\n- Linux内核版本 2.6.31+\n- 支持perf_events接口\n- 适当的权限设置\n\n### 2.2 安装方法\n```bash\n# Ubuntu/Debian\nsudo apt-get install linux-tools-common linux-tools-generic\n\n# CentOS/RHEL\nsudo yum install perf\n\n# 从源码编译\ngit clone https://github.com/torvalds/linux.git\ncd linux/tools/perf\nmake\n```\n\n## 3. 基本命令\n\n### 3.1 perf stat\n收集性能计数器统计信息。\n\n**基本用法：**\n```bash\nperf stat -e cycles,instructions -a sleep 5\n```\n\n**常用选项：**\n- `-e`: 指定事件\n- `-a`: 系统范围监控\n- `-p`: 指定进程ID\n- `-t`: 指定线程ID\n\n### 3.2 perf record\n记录性能数据到文件。\n\n**基本用法：**\n```bash\nperf record -g -e cycles -a sleep 10\n```\n\n**常用选项：**\n- `-g`: 记录调用栈\n- `-F`: 采样频率\n- `-o`: 输出文件\n\n### 3.3 perf report\n分析记录的性能数据。\n\n**基本用法：**\n```bash\nperf report -i perf.data\n```\n\n## 4. 高级功能\n\n### 4.1 事件类型\n\n#### 硬件事件\n- CPU周期\n- 指令数\n- 缓存命中/未命中\n- 分支预测\n\n#### 软件事件\n- 页面错误\n- 上下文切换\n- CPU迁移\n- 系统调用\n\n### 4.2 分析模式\n\n#### CPU分析\n```bash\nperf top -e cycles\n```\n\n#### 内存分析\n```bash\nperf mem record\nperf mem report\n```\n\n#### 锁分析\n```bash\nperf lock record\nperf lock report\n```\n\n## 5. 实际应用场景\n\n### 5.1 应用程序性能分析\n```bash\n# 分析特定程序\nperf record -g ./my_application\nperf report\n\n# 实时监控\nperf top -p $(pgrep my_application)\n```\n\n### 5.2 系统级性能分析\n```bash\n# 系统范围监控\nperf stat -a sleep 10\n\n# 分析系统调用\nperf trace -p $(pgrep my_application)\n```\n\n### 5.3 内核性能分析\n```bash\n# 内核函数分析\nperf record -g -e cycles -a sleep 10\nperf report --kernel\n\n# 内核模块分析\nperf probe --add function_name\nperf record -e probe:function_name -a\n```\n\n## 6. 最佳实践\n\n### 6.1 性能分析流程\n1. **确定目标**：明确要分析的性能问题\n2. **选择工具**：根据问题选择合适的perf命令\n3. **收集数据**：使用perf record收集性能数据\n4. **分析结果**：使用perf report分析数据\n5. **优化代码**：根据分析结果进行优化\n\n### 6.2 常见问题解决\n\n#### 权限问题\n```bash\n# 设置perf权限\necho -1 > /proc/sys/kernel/perf_event_paranoid\n```\n\n#### 采样频率调整\n```bash\n# 调整采样频率\nperf record -F 1000 -g -e cycles -a\n```\n\n#### 数据文件管理\n```bash\n# 压缩数据文件\nperf archive\n\n# 查看数据文件信息\nperf report --header-only\n```\n\n## 7. 与其他工具集成\n\n### 7.1 与gdb集成\n```bash\nperf record -g --call-graph dwarf ./my_application\nperf report --stdio\n```\n\n### 7.2 与火焰图集成\n```bash\n# 生成火焰图\nperf script | stackcollapse-perf.pl | flamegraph.pl > flamegraph.svg\n```\n\n### 7.3 与Python脚本集成\n```python\nimport subprocess\n\ndef run_perf_stat(command):\n    result = subprocess.run(['perf', 'stat', '-x', ','] + command,\n                          capture_output=True, text=True)\n    return result.stdout\n```\n\n## 8. 故障排除\n\n### 8.1 常见错误\n- **权限不足**：检查perf_event_paranoid设置\n- **内核不支持**：确认内核版本和配置\n- **事件不可用**：检查硬件支持\n\n### 8.2 调试技巧\n```bash\n# 查看可用事件\nperf list\n\n# 检查perf版本\nperf --version\n\n# 查看系统信息\nperf report --header-only\n```\n\n## 9. 总结\n\nPerf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能分析能力。通过合理使用perf的各种功能，可以有效地识别和解决性能问题，提升系统整体性能。\n\n### 9.1 关键要点\n- 选择合适的分析模式\n- 正确配置权限和参数\n- 结合其他工具使用\n- 持续监控和优化\n\n### 9.2 进一步学习\n- 阅读perf官方文档\n- 参与Linux内核社区\n- 实践各种分析场景\n- 分享经验和最佳实践 "], 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:59:42,813 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:59:42,813 httpcore.connection DEBUG: connect_tcp.started host='127.0.0.1' port=7890 local_address=None timeout=60 socket_options=None
2025-07-23 22:59:42,813 httpcore.connection DEBUG: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17fb2ec50>
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'CONNECT']>
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'CONNECT']>
2025-07-23 22:59:42,814 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'Connection established', [])
2025-07-23 22:59:42,814 httpcore.proxy DEBUG: start_tls.started ssl_context=<ssl.SSLContext object at 0x17ed5b640> server_hostname='open.bigmodel.cn' timeout=60
2025-07-23 22:59:42,846 httpcore.proxy DEBUG: start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17fb2ec80>
2025-07-23 22:59:42,846 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:59:42,847 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:42,847 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:59:42,847 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:42,847 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:59:43,141 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:59:43 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Set-Cookie', b'acw_tc=0aef812717532827830825116e005209725d1ad74f1ee31245f267ab1ed705;path=/;HttpOnly;Max-Age=1800'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072322594346ab8d6dca4e428b'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:59:43,144 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:59:43,144 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:59:43,199 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:59:43,199 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:59:43,199 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:59:43,200 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:59:43 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('set-cookie', 'acw_tc=0aef812717532827830825116e005209725d1ad74f1ee31245f267ab1ed705;path=/;HttpOnly;Max-Age=1800'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072322594346ab8d6dca4e428b'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:59:43,200 openai._base_client DEBUG: request_id: None
2025-07-23 22:59:43,246 __main__ INFO: 成功生成 4 个向量，每个向量维度: 2048
2025-07-23 22:59:43,246 __main__ INFO: 开始索引文档和向量...
2025-07-23 22:59:43,393 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-23 22:59:43,397 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.127s]
2025-07-23 22:59:43,397 __main__ INFO: 成功索引 4 个文档和向量
2025-07-23 22:59:43,397 __main__ INFO: 等待索引刷新...
2025-07-23 22:59:46,402 __main__ INFO: 
=== 文本搜索测试 ===
2025-07-23 22:59:46,403 __main__ INFO: 
文本搜索查询: '性能分析工具'
2025-07-23 22:59:46,430 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,430 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.027s]
2025-07-23 22:59:46,432 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (得分: 7.5227)
2025-07-23 22:59:46,432 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 7.3382)
2025-07-23 22:59:46,432 __main__ INFO:   结果 3: 人工智能在软件开发中的应用 (得分: 3.4298)
2025-07-23 22:59:46,432 __main__ INFO: 
文本搜索查询: '人工智能代码生成'
2025-07-23 22:59:46,445 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,445 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.013s]
2025-07-23 22:59:46,447 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 21.1386)
2025-07-23 22:59:46,447 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 6.5053)
2025-07-23 22:59:46,447 __main__ INFO:   结果 3: Linux性能分析工具Perf简介 (得分: 3.7277)
2025-07-23 22:59:46,447 __main__ INFO: 
文本搜索查询: 'Linux perf 命令'
2025-07-23 22:59:46,455 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,456 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.009s]
2025-07-23 22:59:46,457 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (得分: 8.7135)
2025-07-23 22:59:46,457 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (得分: 8.3431)
2025-07-23 22:59:46,457 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (得分: 3.1256)
2025-07-23 22:59:46,457 __main__ INFO: 
文本搜索查询: 'machine learning'
2025-07-23 22:59:46,462 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,462 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.005s]
2025-07-23 22:59:46,463 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (得分: 1.7010)
2025-07-23 22:59:46,463 __main__ INFO: 
=== 向量搜索测试 ===
2025-07-23 22:59:46,463 __main__ INFO: 
向量搜索查询: '如何使用性能分析工具优化程序'
2025-07-23 22:59:46,463 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-2d20f006-16e0-4e0d-99ab-35ba7ca0c6b4', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17fb37b50>, 'json_data': {'input': '如何使用性能分析工具优化程序', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:59:46,464 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:59:46,464 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,464 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:46,464 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,464 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:46,464 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,644 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:59:46 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072322594606d0d0cfe5484030'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:59:46,645 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:59:46,646 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,672 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:59:46,673 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:59:46,673 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:59:46,674 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:59:46 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072322594606d0d0cfe5484030'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:59:46,674 openai._base_client DEBUG: request_id: None
2025-07-23 22:59:46,759 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,759 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.068s]
2025-07-23 22:59:46,761 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (向量得分: 1.5742)
2025-07-23 22:59:46,761 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (向量得分: 1.5381)
2025-07-23 22:59:46,761 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (向量得分: 1.5004)
2025-07-23 22:59:46,761 __main__ INFO: 
向量搜索查询: 'AI在软件开发中的应用场景'
2025-07-23 22:59:46,762 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-ded72a31-65e9-4a0b-b967-72d60fd3e51c', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17fb37b50>, 'json_data': {'input': 'AI在软件开发中的应用场景', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:59:46,763 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:59:46,763 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,764 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:46,764 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,764 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:46,765 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,847 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:59:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'2025072322594752bdce585c9d4ba6'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:59:46,847 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:59:46,847 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,856 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:59:46,856 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:59:46,856 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:59:46,856 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:59:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '2025072322594752bdce585c9d4ba6'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:59:46,856 openai._base_client DEBUG: request_id: None
2025-07-23 22:59:46,869 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,869 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.007s]
2025-07-23 22:59:46,870 __main__ INFO:   结果 1: 人工智能在软件开发中的应用 (向量得分: 1.6773)
2025-07-23 22:59:46,870 __main__ INFO:   结果 2: Linux性能分析工具Perf简介 (向量得分: 1.4203)
2025-07-23 22:59:46,870 __main__ INFO:   结果 3: Linux性能分析工具Perf完整指南 (向量得分: 1.3367)
2025-07-23 22:59:46,870 __main__ INFO: 
向量搜索查询: 'Linux系统性能监控方法'
2025-07-23 22:59:46,870 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-e164d618-5e5a-4517-961a-d2dbdf351412', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17fb37b50>, 'json_data': {'input': 'Linux系统性能监控方法', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:59:46,870 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:59:46,870 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,871 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:46,871 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,871 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:46,871 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,948 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:59:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'202507232259472adb131ace214f37'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:59:46,948 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:59:46,948 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,956 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:59:46,956 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:59:46,957 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:59:46,957 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:59:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '202507232259472adb131ace214f37'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:59:46,957 openai._base_client DEBUG: request_id: None
2025-07-23 22:59:46,978 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:46,978 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.008s]
2025-07-23 22:59:46,979 __main__ INFO:   结果 1: Linux性能分析工具Perf简介 (向量得分: 1.6271)
2025-07-23 22:59:46,979 __main__ INFO:   结果 2: Linux性能分析工具Perf完整指南 (向量得分: 1.6030)
2025-07-23 22:59:46,979 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (向量得分: 1.4779)
2025-07-23 22:59:46,979 __main__ INFO: 
=== 混合搜索测试 ===
2025-07-23 22:59:46,979 __main__ INFO: 
混合搜索查询: 'Linux性能优化技巧'
2025-07-23 22:59:46,979 openai._base_client DEBUG: Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'idempotency_key': 'stainless-python-retry-b27c0e21-da33-41e2-9e86-ccd1b9774c0b', 'post_parser': <function Embeddings.create.<locals>.parser at 0x17fb37b50>, 'json_data': {'input': 'Linux性能优化技巧', 'model': 'embedding-3', 'encoding_format': 'base64'}}
2025-07-23 22:59:46,979 openai._base_client DEBUG: Sending HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings
2025-07-23 22:59:46,980 httpcore.http11 DEBUG: send_request_headers.started request=<Request [b'POST']>
2025-07-23 22:59:46,980 httpcore.http11 DEBUG: send_request_headers.complete
2025-07-23 22:59:46,980 httpcore.http11 DEBUG: send_request_body.started request=<Request [b'POST']>
2025-07-23 22:59:46,980 httpcore.http11 DEBUG: send_request_body.complete
2025-07-23 22:59:46,980 httpcore.http11 DEBUG: receive_response_headers.started request=<Request [b'POST']>
2025-07-23 22:59:47,066 httpcore.http11 DEBUG: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Wed, 23 Jul 2025 14:59:47 GMT'), (b'Content-Type', b'application/json; charset=UTF-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Vary', b'Accept-Encoding'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'X-LOG-ID', b'20250723225947f649abb535204732'), (b'Vary', b'Origin'), (b'Vary', b'Access-Control-Request-Method'), (b'Vary', b'Access-Control-Request-Headers'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains'), (b'Content-Encoding', b'gzip')])
2025-07-23 22:59:47,067 httpx INFO: HTTP Request: POST https://open.bigmodel.cn/api/paas/v4/embeddings "HTTP/1.1 200 OK"
2025-07-23 22:59:47,067 httpcore.http11 DEBUG: receive_response_body.started request=<Request [b'POST']>
2025-07-23 22:59:47,075 httpcore.http11 DEBUG: receive_response_body.complete
2025-07-23 22:59:47,075 httpcore.http11 DEBUG: response_closed.started
2025-07-23 22:59:47,075 httpcore.http11 DEBUG: response_closed.complete
2025-07-23 22:59:47,076 openai._base_client DEBUG: HTTP Response: POST https://open.bigmodel.cn/api/paas/v4/embeddings "200 OK" Headers([('date', 'Wed, 23 Jul 2025 14:59:47 GMT'), ('content-type', 'application/json; charset=UTF-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('vary', 'Accept-Encoding'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('x-log-id', '20250723225947f649abb535204732'), ('vary', 'Origin'), ('vary', 'Access-Control-Request-Method'), ('vary', 'Access-Control-Request-Headers'), ('strict-transport-security', 'max-age=31536000; includeSubDomains'), ('content-encoding', 'gzip')])
2025-07-23 22:59:47,076 openai._base_client DEBUG: request_id: None
2025-07-23 22:59:47,105 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /vector_documents/_search HTTP/1.1" 200 None
2025-07-23 22:59:47,106 elastic_transport.transport INFO: POST https://localhost:9200/vector_documents/_search [status:200 duration:0.014s]
2025-07-23 22:59:47,106 __main__ INFO:   结果 1: Linux性能分析工具Perf完整指南 (混合得分: 5.5339)
2025-07-23 22:59:47,106 __main__ INFO:   结果 2: Linux性能分析工具Perf简介 (混合得分: 4.6626)
2025-07-23 22:59:47,107 __main__ INFO:   结果 3: Multi-language Performance Analysis Guide (混合得分: 3.6836)
2025-07-23 22:59:47,107 __main__ INFO: 
=== 索引统计 ===
2025-07-23 22:59:47,110 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /vector_documents/_stats HTTP/1.1" 200 None
2025-07-23 22:59:47,110 elastic_transport.transport INFO: GET https://localhost:9200/vector_documents/_stats [status:200 duration:0.004s]
2025-07-23 22:59:47,111 __main__ INFO: 索引名称: vector_documents
2025-07-23 22:59:47,111 __main__ INFO: 文档数量: 4
2025-07-23 22:59:47,111 __main__ INFO: 存储大小: 144850 字节
2025-07-23 22:59:47,111 __main__ INFO: 向量维度: 2048
2025-07-23 22:59:47,111 __main__ INFO: 
Elasticsearch 向量索引器示例完成!
2025-07-23 22:59:47,111 __main__ INFO: 
功能特性:
2025-07-23 22:59:47,111 __main__ INFO: - ✅ OpenAI embedding 接口集成
2025-07-23 22:59:47,111 __main__ INFO: - ✅ 文档向量化和存储
2025-07-23 22:59:47,111 __main__ INFO: - ✅ 文本搜索
2025-07-23 22:59:47,111 __main__ INFO: - ✅ 向量搜索
2025-07-23 22:59:47,111 __main__ INFO: - ✅ 混合搜索（文本 + 向量）
2025-07-23 22:59:47,111 __main__ INFO: - ✅ 余弦相似度计算
2025-07-23 23:21:47,824 __main__ INFO: === 查询扩展测试 ===
2025-07-23 23:21:47,824 rag.components.base ERROR: 查询组件 test_expansion 初始化失败: No such config: llm
2025-07-23 23:27:18,944 __main__ INFO: === 查询扩展测试 ===
2025-07-23 23:27:18,944 rag.components.base INFO: 查询组件 test_expansion 初始化成功
2025-07-23 23:27:18,944 __main__ INFO: 
原始查询: 如何学习Python编程？
2025-07-23 23:27:19,874 __main__ INFO: 扩展结果: ['如何学习Python编程？', '如何开始学习Python编程']
2025-07-23 23:27:19,875 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:27:21,914 __main__ INFO: 扩展结果: ['苹果公司2023年的财务报告和市场表现如何？', '<output>苹果公司 2023 财年 财务报告 市场表现', '输出 苹果 2023 年 财务状况 市场分析', '输出 苹果 2023 财年 财报及 市场情况']
2025-07-23 23:27:21,914 __main__ INFO: 
=== 查询分解测试 ===
2025-07-23 23:27:21,915 rag.components.base INFO: 查询组件 test_decomposition 初始化成功
2025-07-23 23:27:21,915 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:27:24,615 __main__ INFO: 分解结果: ['SELECT 财务报告.年份, 财务报告.收入, 财务报告.利润', 'FROM 财务报告', "WHERE 财务报告.公司 = '苹果公司' AND 财务报告.年份 = 2023"]
2025-07-23 23:27:24,616 __main__ INFO: 是否需要分解: True
2025-07-23 23:27:24,616 __main__ INFO: 
原始查询: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:27:27,918 __main__ INFO: 分解结果: ['机器学习和深度学习的区别是什么，以及它们的应用场景？', "SELECT * FROM ML WHERE Type = '机器学习'"]
2025-07-23 23:27:27,919 __main__ INFO: 是否需要分解: True
2025-07-23 23:27:27,919 __main__ INFO: 
=== 查询消歧测试 ===
2025-07-23 23:27:27,920 rag.components.base INFO: 查询组件 test_disambiguation 初始化成功
2025-07-23 23:27:27,920 __main__ INFO: 
原始查询: 这个问题很复杂
2025-07-23 23:27:29,355 __main__ INFO: 消歧结果: 请提供更多关于“这个问题”的上下文信息，例如问题的领域、具体内容或相关背景，以便我能够更准确地理解和回答。
2025-07-23 23:27:29,356 __main__ INFO: 歧义分数: 1.0
2025-07-23 23:27:29,356 __main__ INFO: 
原始查询: AI
2025-07-23 23:27:29,357 __main__ INFO: 消歧结果: AI
2025-07-23 23:27:29,357 __main__ INFO: 歧义分数: 0.3
2025-07-23 23:27:29,357 __main__ INFO: 
=== 查询抽象测试 ===
2025-07-23 23:27:29,357 rag.components.base INFO: 查询组件 test_abstraction 初始化成功
2025-07-23 23:27:29,357 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:27:29,952 __main__ INFO: 抽象结果: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:27:29,953 __main__ INFO: 是否需要抽象: False
2025-07-23 23:27:29,953 __main__ INFO: 
原始查询: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:27:29,953 __main__ INFO: 抽象结果: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:27:29,953 __main__ INFO: 是否需要抽象: False
2025-07-23 23:27:29,953 __main__ INFO: 
=== 查询优化流水线测试 ===
2025-07-23 23:27:29,954 rag.components.query.query_factory INFO: 创建查询组件: expansion - multi_query_expansion
2025-07-23 23:27:29,954 rag.components.query.query_factory INFO: 创建查询组件: disambiguation - query_disambiguation
2025-07-23 23:27:29,954 __main__ INFO: 
测试查询: 这个AI技术怎么样？
2025-07-23 23:27:29,955 rag.components.base INFO: 查询组件 multi_query_expansion 初始化成功
2025-07-23 23:27:31,124 rag.components.base INFO: 查询组件 query_disambiguation 初始化成功
2025-07-23 23:27:32,185 __main__ INFO: 
流水线处理结果:
2025-07-23 23:27:32,186 __main__ INFO:   expanded_queries: ['这个AI技术怎么样？', '这个AI技术的优缺点是什么']
2025-07-23 23:27:32,186 __main__ INFO:   expansion_type: multi_query
2025-07-23 23:27:32,186 __main__ INFO:   original_query: 这个AI技术怎么样？
2025-07-23 23:27:32,186 __main__ INFO:   disambiguated_query: 请具体说明您想了解的是哪种AI技术，例如自然语言处理、计算机视觉、机器学习等，以便我为您提供更准确的信息。
2025-07-23 23:27:32,186 __main__ INFO:   disambiguation_needed: True
2025-07-23 23:27:32,186 __main__ INFO:   ambiguity_score: 1.0
2025-07-23 23:27:32,186 __main__ INFO:   disambiguation_method: llm_based
2025-07-23 23:27:32,187 __main__ INFO: 
=== 组件注册测试 ===
2025-07-23 23:27:32,187 __main__ INFO: 已注册的查询组件: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:27:32,187 __main__ INFO: 通过注册表创建组件成功: test
2025-07-23 23:27:32,187 __main__ INFO: 
=== 所有测试完成 ===
2025-07-23 23:31:55,292 __main__ INFO: === 查询扩展测试 ===
2025-07-23 23:31:55,292 rag.components.base INFO: 查询组件 test_expansion 初始化成功
2025-07-23 23:31:55,292 __main__ INFO: 
原始查询: 如何学习Python编程？
2025-07-23 23:31:57,025 __main__ INFO: 扩展结果: ['如何学习Python编程？', '如何开始学习Python编程']
2025-07-23 23:31:57,026 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:31:59,690 __main__ INFO: 扩展结果: ['苹果公司2023年的财务报告和市场表现如何？', '苹果公司 2023 财报 分析']
2025-07-23 23:31:59,690 __main__ INFO: 
=== 查询分解测试 ===
2025-07-23 23:31:59,690 rag.components.base INFO: 查询组件 test_decomposition 初始化成功
2025-07-23 23:31:59,690 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:32:02,128 __main__ INFO: 分解结果: ['苹果公司2023年的财务报告和市场表现如何？', 'SELECT * FROM 苹果公司财务报告 WHERE 年份 = 2023']
2025-07-23 23:32:02,128 __main__ INFO: 是否需要分解: True
2025-07-23 23:32:02,128 __main__ INFO: 
原始查询: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:32:04,334 __main__ INFO: 分解结果: ["<output>SELECT * FROM MLvsDL WHERE type = '机器学习'", "<output>SELECT * FROM MLvsDL WHERE type = '深度学习'", "<output>SELECT application FROM MLvsDL WHERE type = '机器学习'", "<output>SELECT application FROM MLvsDL WHERE type = '深度学习'"]
2025-07-23 23:32:04,334 __main__ INFO: 是否需要分解: True
2025-07-23 23:32:04,334 __main__ INFO: 
=== 查询消歧测试 ===
2025-07-23 23:32:04,334 rag.components.base INFO: 查询组件 test_disambiguation 初始化成功
2025-07-23 23:32:04,334 __main__ INFO: 
原始查询: 这个问题很复杂
2025-07-23 23:32:05,318 __main__ INFO: 消歧结果: 请提供更多关于“这个问题”的上下文信息，例如问题的领域、具体内容或相关背景，以便更准确地理解并回答。
2025-07-23 23:32:05,318 __main__ INFO: 歧义分数: 1.0
2025-07-23 23:32:05,318 __main__ INFO: 
原始查询: AI
2025-07-23 23:32:05,319 __main__ INFO: 消歧结果: AI
2025-07-23 23:32:05,319 __main__ INFO: 歧义分数: 0.3
2025-07-23 23:32:05,319 __main__ INFO: 
=== 查询抽象测试 ===
2025-07-23 23:32:05,319 rag.components.base INFO: 查询组件 test_abstraction 初始化成功
2025-07-23 23:32:05,319 __main__ INFO: 
原始查询: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:32:06,162 __main__ INFO: 抽象结果: 苹果公司2023年的财务报告和市场表现如何？
2025-07-23 23:32:06,163 __main__ INFO: 是否需要抽象: False
2025-07-23 23:32:06,163 __main__ INFO: 
原始查询: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:32:06,163 __main__ INFO: 抽象结果: 机器学习和深度学习的区别是什么，以及它们的应用场景？
2025-07-23 23:32:06,164 __main__ INFO: 是否需要抽象: False
2025-07-23 23:32:06,164 __main__ INFO: 
=== 查询优化流水线测试 ===
2025-07-23 23:32:06,164 rag.components.query.query_factory INFO: 创建查询组件: expansion - multi_query_expansion
2025-07-23 23:32:06,164 rag.components.query.query_factory INFO: 创建查询组件: disambiguation - query_disambiguation
2025-07-23 23:32:06,164 __main__ INFO: 
测试查询: 这个AI技术怎么样？
2025-07-23 23:32:06,164 rag.components.base INFO: 查询组件 multi_query_expansion 初始化成功
2025-07-23 23:32:07,125 rag.components.base INFO: 查询组件 query_disambiguation 初始化成功
2025-07-23 23:32:08,863 __main__ INFO: 
流水线处理结果:
2025-07-23 23:32:08,863 __main__ INFO:   expanded_queries: ['这个AI技术怎么样？', '这个AI技术的评价如何？', '评价这个AI技术怎么样？', '这个AI技术的表现如何？']
2025-07-23 23:32:08,863 __main__ INFO:   expansion_type: multi_query
2025-07-23 23:32:08,863 __main__ INFO:   original_query: 这个AI技术怎么样？
2025-07-23 23:32:08,863 __main__ INFO:   disambiguated_query: 请问您想了解哪种AI技术？例如是机器学习、自然语言处理、计算机视觉还是其他具体技术？以及您想了解的是它的功能、应用场景、优缺点还是发展前景？
2025-07-23 23:32:08,863 __main__ INFO:   disambiguation_needed: True
2025-07-23 23:32:08,863 __main__ INFO:   ambiguity_score: 1.0
2025-07-23 23:32:08,863 __main__ INFO:   disambiguation_method: llm_based
2025-07-23 23:32:08,863 __main__ INFO: 
=== 组件注册测试 ===
2025-07-23 23:32:08,863 __main__ INFO: 已注册的查询组件: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:32:08,863 __main__ INFO: 通过注册表创建组件成功: test
2025-07-23 23:32:08,864 __main__ INFO: 
=== 所有测试完成 ===
2025-07-23 23:54:16,206 __main__ INFO: 开始完整RAG流水线示例
2025-07-23 23:54:16,206 __main__ INFO: === 测试流水线组件状态 ===
2025-07-23 23:54:16,206 __main__ INFO: 已注册的组件类型:
2025-07-23 23:54:16,206 __main__ INFO:   loader: ['file', 'web']
2025-07-23 23:54:16,206 __main__ INFO:   splitter: ['text', 'recursive', 'semantic', 'hierarchical', 'hierarchical_doc', 'sentence']
2025-07-23 23:54:16,206 __main__ INFO:   indexer: ['elasticsearch', 'bm25']
2025-07-23 23:54:16,206 __main__ INFO:   query: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:54:16,206 __main__ INFO:   retriever: ['elasticsearch', 'es', 'bm25']
2025-07-23 23:54:16,206 __main__ INFO: 
测试配置加载...
2025-07-23 23:54:16,207 __main__ INFO: 成功加载配置: ['full_rag_pipeline', 'es_rag_pipeline', 'hybrid_rag_pipeline']
2025-07-23 23:54:16,207 __main__ INFO: === 测试BM25流水线 ===
2025-07-23 23:54:16,213 __main__ ERROR: BM25流水线测试失败: 未指定有效的入口点: None
2025-07-23 23:54:16,214 __main__ INFO: 完整RAG流水线示例完成
2025-07-23 23:55:53,909 __main__ INFO: 开始完整RAG流水线示例
2025-07-23 23:55:53,910 __main__ INFO: === 测试流水线组件状态 ===
2025-07-23 23:55:53,910 __main__ INFO: 已注册的组件类型:
2025-07-23 23:55:53,910 __main__ INFO:   loader: ['file', 'web']
2025-07-23 23:55:53,910 __main__ INFO:   splitter: ['text', 'recursive', 'semantic', 'hierarchical', 'hierarchical_doc', 'sentence']
2025-07-23 23:55:53,910 __main__ INFO:   indexer: ['elasticsearch', 'bm25']
2025-07-23 23:55:53,910 __main__ INFO:   query: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:55:53,910 __main__ INFO:   retriever: ['elasticsearch', 'es', 'bm25']
2025-07-23 23:55:53,910 __main__ INFO: 
测试配置加载...
2025-07-23 23:55:53,910 __main__ INFO: 成功加载配置: ['full_rag_pipeline', 'es_rag_pipeline', 'hybrid_rag_pipeline']
2025-07-23 23:55:53,910 __main__ INFO: === 测试BM25流水线 ===
2025-07-23 23:55:53,929 __main__ ERROR: BM25流水线测试失败: 未指定有效的入口点: None
2025-07-23 23:55:53,930 __main__ INFO: 完整RAG流水线示例完成
2025-07-23 23:57:08,012 __main__ INFO: 开始完整RAG流水线示例
2025-07-23 23:57:08,012 __main__ INFO: === 测试流水线组件状态 ===
2025-07-23 23:57:08,012 __main__ INFO: 已注册的组件类型:
2025-07-23 23:57:08,012 __main__ INFO:   loader: ['file', 'web']
2025-07-23 23:57:08,012 __main__ INFO:   splitter: ['text', 'recursive', 'semantic', 'hierarchical', 'hierarchical_doc', 'sentence']
2025-07-23 23:57:08,012 __main__ INFO:   indexer: ['elasticsearch', 'bm25']
2025-07-23 23:57:08,012 __main__ INFO:   query: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:57:08,012 __main__ INFO:   retriever: ['elasticsearch', 'es', 'bm25']
2025-07-23 23:57:08,012 __main__ INFO: 
测试配置加载...
2025-07-23 23:57:08,012 __main__ INFO: 成功加载配置: ['full_rag_pipeline', 'es_rag_pipeline', 'hybrid_rag_pipeline']
2025-07-23 23:57:08,012 __main__ INFO: === 测试BM25流水线 ===
2025-07-23 23:57:08,034 __main__ ERROR: BM25流水线测试失败: Can't instantiate abstract class HierarchicalSplitterComponent with abstract method _do_initialize
2025-07-23 23:57:08,035 __main__ INFO: 完整RAG流水线示例完成
2025-07-23 23:59:11,703 __main__ INFO: 开始完整RAG流水线示例
2025-07-23 23:59:11,704 __main__ INFO: === 测试流水线组件状态 ===
2025-07-23 23:59:11,704 __main__ INFO: 已注册的组件类型:
2025-07-23 23:59:11,705 __main__ INFO:   loader: ['file', 'web']
2025-07-23 23:59:11,705 __main__ INFO:   splitter: ['text', 'recursive', 'semantic', 'hierarchical', 'hierarchical_doc', 'sentence']
2025-07-23 23:59:11,705 __main__ INFO:   indexer: ['elasticsearch', 'bm25']
2025-07-23 23:59:11,705 __main__ INFO:   query: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-23 23:59:11,705 __main__ INFO:   retriever: ['elasticsearch', 'es', 'bm25']
2025-07-23 23:59:11,705 __main__ INFO: 
测试配置加载...
2025-07-23 23:59:11,705 __main__ INFO: 成功加载配置: ['full_rag_pipeline', 'es_rag_pipeline', 'hybrid_rag_pipeline']
2025-07-23 23:59:11,705 __main__ INFO: === 测试BM25流水线 ===
2025-07-23 23:59:11,725 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-23 23:59:11,725 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-23 23:59:11,725 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-23 23:59:11,860 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-23 23:59:11,860 rag.components.base DEBUG: 索引文件不存在，将创建新索引
2025-07-23 23:59:11,860 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 0
2025-07-23 23:59:11,860 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-23 23:59:11,860 rag.components.base DEBUG: BM25索引文件不存在
2025-07-23 23:59:11,860 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-23 23:59:11,860 __main__ INFO: BM25流水线构建完成
2025-07-23 23:59:11,861 __main__ INFO: 开始执行文档索引流程...
2025-07-23 23:59:11,861 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-23 23:59:11,861 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-23 23:59:11,863 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-23 23:59:11,867 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-23 23:59:11,867 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 23:59:11,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 23:59:11,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 23:59:11,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 23:59:11,871 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-23 23:59:11,871 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-23 23:59:11,871 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-23 23:59:11,871 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-23 23:59:11,871 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-23 23:59:12,177 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 23:59:12,177 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 23:59:12,177 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 23:59:12,178 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-23 23:59:12,178 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-23 23:59:12,178 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-23 23:59:12,178 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-23 23:59:12,178 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-23 23:59:12,179 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-23 23:59:12,179 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-23 23:59:12,181 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 23:59:12,181 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 23:59:12,181 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 23:59:12,181 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-23 23:59:12,182 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-23 23:59:12,182 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-23 23:59:12,182 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-23 23:59:12,182 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-23 23:59:12,186 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-23 23:59:12,187 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-23 23:59:12,187 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-23 23:59:12,187 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 23:59:12,187 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 23:59:12,187 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 23:59:12,188 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 23:59:12,188 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-23 23:59:12,189 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-23 23:59:12,189 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-23 23:59:12,189 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-23 23:59:12,189 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-23 23:59:12,189 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-23 23:59:12,189 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-23 23:59:12,189 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 23:59:12,190 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-23 23:59:12,190 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 23:59:12,190 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-23 23:59:12,190 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 23:59:12,191 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-23 23:59:12,191 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 23:59:12,191 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-23 23:59:12,191 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 23:59:12,191 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 23:59:12,192 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-23 23:59:12,193 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 23:59:12,193 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-23 23:59:12,193 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 23:59:12,193 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-23 23:59:12,193 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 23:59:12,194 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-23 23:59:12,194 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 23:59:12,194 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-23 23:59:12,194 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 23:59:12,194 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 23:59:12,195 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 23:59:12,196 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-23 23:59:12,197 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 23:59:12,197 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-23 23:59:12,197 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 23:59:12,197 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-23 23:59:12,197 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 23:59:12,198 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-23 23:59:12,198 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 23:59:12,198 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-23 23:59:12,198 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 23:59:12,198 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-23 23:59:12,199 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 23:59:12,199 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-23 23:59:12,199 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 23:59:12,199 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-23 23:59:12,199 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-23 23:59:12,200 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 23:59:12,201 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-23 23:59:12,201 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 23:59:12,201 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-23 23:59:12,201 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 23:59:12,201 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-23 23:59:12,202 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 23:59:12,202 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-23 23:59:12,202 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 23:59:12,202 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-23 23:59:12,202 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 23:59:12,203 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-23 23:59:12,203 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 23:59:12,203 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-23 23:59:12,203 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 23:59:12,203 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-23 23:59:12,204 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 23:59:12,204 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-23 23:59:12,204 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 23:59:12,204 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-23 23:59:12,204 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-23 23:59:12,204 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-23 23:59:12,204 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-23 23:59:12,204 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-23 23:59:12,207 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-23 23:59:12,207 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 114
2025-07-23 23:59:12,207 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-23 23:59:12,207 rag.components.base DEBUG: 执行下一步组件: bm25_retriever
2025-07-23 23:59:12,207 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-23 23:59:12,207 __main__ ERROR: BM25流水线测试失败: 输入数据必须包含 'query' 字段
2025-07-23 23:59:12,208 __main__ INFO: 完整RAG流水线示例完成
2025-07-24 00:01:16,441 __main__ INFO: 开始完整RAG流水线示例
2025-07-24 00:01:16,441 __main__ INFO: === 测试流水线组件状态 ===
2025-07-24 00:01:16,441 __main__ INFO: 已注册的组件类型:
2025-07-24 00:01:16,441 __main__ INFO:   loader: ['file', 'web']
2025-07-24 00:01:16,441 __main__ INFO:   splitter: ['text', 'recursive', 'semantic', 'hierarchical', 'hierarchical_doc', 'sentence']
2025-07-24 00:01:16,441 __main__ INFO:   indexer: ['elasticsearch', 'bm25']
2025-07-24 00:01:16,441 __main__ INFO:   query: ['expansion', 'decomposition', 'disambiguation', 'abstraction']
2025-07-24 00:01:16,441 __main__ INFO:   retriever: ['elasticsearch', 'es', 'bm25']
2025-07-24 00:01:16,441 __main__ INFO: 
测试配置加载...
2025-07-24 00:01:16,441 __main__ INFO: 成功加载配置: ['full_rag_pipeline', 'es_rag_pipeline', 'hybrid_rag_pipeline']
2025-07-24 00:01:16,441 __main__ INFO: === 测试BM25流水线 ===
2025-07-24 00:01:16,462 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:01:16,462 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:01:16,462 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:01:16,563 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:01:16,565 rag.components.base DEBUG: 成功加载索引，文档数量: 114
2025-07-24 00:01:16,565 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 114
2025-07-24 00:01:16,565 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:01:16,565 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:01:16,565 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:01:16,565 __main__ INFO: BM25流水线构建完成
2025-07-24 00:01:16,565 __main__ INFO: 开始执行文档索引流程...
2025-07-24 00:01:16,565 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:01:16,568 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:01:16,569 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:01:16,569 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:01:16,573 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:01:16,573 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:01:16,573 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:01:16,574 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:01:16,575 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:01:16,576 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:01:16,578 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:01:16,578 __main__ INFO: 加载了 42 个文档
2025-07-24 00:01:16,578 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:01:16,846 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:01:16,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:01:16,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:01:16,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:01:16,847 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:01:16,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:01:16,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:01:16,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:01:16,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:01:16,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:01:16,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:01:16,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:01:16,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:01:16,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:01:16,855 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:01:16,855 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:01:16,855 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:01:16,855 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:01:16,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:01:16,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:01:16,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:01:16,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:01:16,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:01:16,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:01:16,858 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:01:16,858 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:01:16,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:01:16,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:01:16,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:01:16,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:01:16,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:01:16,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:01:16,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:01:16,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:01:16,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:01:16,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:01:16,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:01:16,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:01:16,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:01:16,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:01:16,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:01:16,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:01:16,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:01:16,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:01:16,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:01:16,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:01:16,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:01:16,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:01:16,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:01:16,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:01:16,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:01:16,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:01:16,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:01:16,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:01:16,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:01:16,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:01:16,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:01:16,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:01:16,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:01:16,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:01:16,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:01:16,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:01:16,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:01:16,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:01:16,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:01:16,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:01:16,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:01:16,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:01:16,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:01:16,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:01:16,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:01:16,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:01:16,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:01:16,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:01:16,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:01:16,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:01:16,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:01:16,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:01:16,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:01:16,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:01:16,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:01:16,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:01:16,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:01:16,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:01:16,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:01:16,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:01:16,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:01:16,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:01:16,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:01:16,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:01:16,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:01:16,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:01:16,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:01:16,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:01:16,875 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:01:16,875 __main__ INFO: 分割得到 114 个文档块
2025-07-24 00:01:16,878 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:01:16,879 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 228
2025-07-24 00:01:16,879 __main__ INFO: 索引流程完成: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:01:18,884 __main__ INFO: 开始执行文档检索流程...
2025-07-24 00:01:18,884 __main__ INFO: 
检索查询: '性能分析工具'
2025-07-24 00:01:18,884 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:01:18,884 __main__ INFO: 检索到 0 个结果
2025-07-24 00:01:18,884 __main__ INFO: 
检索查询: 'perf命令使用'
2025-07-24 00:01:18,884 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:01:18,884 __main__ INFO: 检索到 0 个结果
2025-07-24 00:01:18,884 __main__ INFO: 
检索查询: '人工智能开发'
2025-07-24 00:01:18,884 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:01:18,884 __main__ INFO: 检索到 0 个结果
2025-07-24 00:01:18,884 __main__ INFO: 
检索查询: '机器学习算法'
2025-07-24 00:01:18,884 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:01:18,884 __main__ INFO: 检索到 0 个结果
2025-07-24 00:01:18,884 __main__ INFO: BM25流水线测试完成
2025-07-24 00:01:18,884 __main__ INFO: 完整RAG流水线示例完成
2025-07-24 00:16:49,682 __main__ INFO: 开始Generation组件测试
2025-07-24 00:16:49,683 __main__ INFO: === 测试模板生成器 ===
2025-07-24 00:16:49,683 rag.components.generation.base_generator DEBUG: 初始化组件: test_template_generator
2025-07-24 00:16:49,683 rag.components.generation.base_generator DEBUG: 模板生成器初始化完成，模板: retrieval_prompt
2025-07-24 00:16:49,683 __main__ INFO: 查询: 如何使用perf工具进行性能分析？
2025-07-24 00:16:49,683 __main__ INFO: 生成的回答:
基于以下检索到的文档片段，回答用户问题：

文档片段：
文档1 - Perf工具介绍:
Linux性能分析工具Perf是一个强大的性能分析工具，可以用来分析CPU使用情况、内存访问模式等。

文档2 - Perf命令使用:
使用perf命令可以进行系统级性能分析，包括CPU缓存命中率、分支预测等指标的监控。

用户问题：如何使用perf工具进行性能分析？

请提供准确、详细的答案：
2025-07-24 00:16:49,683 __main__ INFO: 元数据: {'component': 'test_template_generator', 'generator_type': 'TemplateGeneratorComponent', 'model_name': 'default', 'temperature': 0.7, 'template_used': 'retrieval_prompt', 'context_length': 126, 'context_count': 2}
2025-07-24 00:16:49,683 __main__ INFO: 模板生成器测试完成
2025-07-24 00:16:49,683 __main__ INFO: === 测试LLM生成器 ===
2025-07-24 00:16:49,683 __main__ INFO: LLM生成器创建成功（未初始化，需要真实API密钥）
2025-07-24 00:16:49,683 __main__ INFO: LLM生成器测试完成（跳过实际调用）
2025-07-24 00:16:49,683 __main__ INFO: === 测试完整RAG流水线 ===
2025-07-24 00:16:49,683 __main__ INFO: 完整RAG流水线测试需要配置文件支持
2025-07-24 00:16:49,683 __main__ INFO: 请参考 config/generation_pipeline.yaml 配置示例
2025-07-24 00:16:49,683 __main__ INFO: Generation组件测试完成
2025-07-24 00:21:22,908 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:21:22,909 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:21:22,909 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:21:22,909 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:21:22,909 __main__ INFO: 组件列表: []
2025-07-24 00:21:22,909 __main__ ERROR: Pipeline Builder测试失败: 组件 document_loader 缺少name配置
2025-07-24 00:21:22,909 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:21:22,909 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:21:22,909 rag.pipeline.builder ERROR: Pipeline构建失败: 组件 document_loader 缺少name配置
2025-07-24 00:21:22,909 rag.pipeline.factory ERROR: 创建Pipeline失败: bm25_pipeline, 错误: 组件 document_loader 缺少name配置
2025-07-24 00:21:22,909 __main__ ERROR: Pipeline执行测试失败: 组件 document_loader 缺少name配置
2025-07-24 00:21:22,909 __main__ INFO: 缓存已清理
2025-07-24 00:21:22,909 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:22:57,661 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:22:57,661 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:22:57,661 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:22:57,661 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:22:57,661 __main__ INFO: 组件列表: []
2025-07-24 00:22:57,661 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:22:57,661 __main__ INFO: 配置验证通过
2025-07-24 00:22:57,661 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:22:57,661 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:22:57,661 rag.pipeline.builder ERROR: 创建组件 document_loader 失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,661 rag.pipeline.builder ERROR: Pipeline构建失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,661 __main__ ERROR: Pipeline Builder测试失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,662 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:22:57,662 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:22:57,662 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:22:57,662 rag.pipeline.builder ERROR: 创建组件 document_loader 失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,662 rag.pipeline.builder ERROR: Pipeline构建失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,662 rag.pipeline.factory ERROR: 创建Pipeline失败: bm25_pipeline, 错误: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,662 __main__ ERROR: Pipeline执行测试失败: 未找到组件: loader.file.file_loader
2025-07-24 00:22:57,662 __main__ INFO: 缓存已清理
2025-07-24 00:22:57,662 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:23:56,697 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:23:56,698 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:23:56,698 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:23:56,698 __main__ INFO: 组件列表: []
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:23:56,698 __main__ INFO: 配置验证通过
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:23:56,698 rag.pipeline.builder DEBUG: 连接组件: bm25_indexer -> bm25_retriever
2025-07-24 00:23:56,699 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:23:56,838 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:23:56,838 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:23:56,838 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:23:56,838 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 连接组件: bm25_indexer -> bm25_retriever
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:23:56,839 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:23:56,839 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:23:56,839 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:23:56,839 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:23:56,839 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:23:56,839 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:23:56,839 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:23:56,839 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:23:56,839 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:23:56,839 __main__ INFO: 执行索引流程...
2025-07-24 00:23:56,839 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:23:56,839 rag.components.loader.file_loader INFO: 从./data加载文件中...
2025-07-24 00:23:56,840 rag.components.loader.file_loader INFO: 成功加载0个文档
2025-07-24 00:23:56,840 rag.pipeline.executor ERROR: Pipeline执行失败: 输入数据必须包含 'query' 字段
2025-07-24 00:23:56,840 __main__ ERROR: Pipeline执行测试失败: 输入数据必须包含 'query' 字段
2025-07-24 00:23:56,841 __main__ INFO: 缓存已清理
2025-07-24 00:23:56,841 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:24:45,312 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:24:45,312 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:24:45,312 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:24:45,312 __main__ INFO: 组件列表: []
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:24:45,312 __main__ INFO: 配置验证通过
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:24:45,312 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:24:45,413 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:24:45,413 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:24:45,413 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:24:45,413 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:24:45,414 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:24:45,414 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:24:45,414 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:24:45,414 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:24:45,414 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:24:45,414 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:24:45,414 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:24:45,414 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:24:45,414 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:24:45,414 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:24:45,414 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:24:45,414 __main__ INFO: 执行索引流程...
2025-07-24 00:24:45,414 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:24:45,414 rag.components.loader.file_loader INFO: 从./data加载文件中...
2025-07-24 00:24:45,414 rag.components.loader.file_loader INFO: 成功加载0个文档
2025-07-24 00:24:45,415 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:24:45,415 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:24:45,415 __main__ INFO: 执行检索流程...
2025-07-24 00:24:45,415 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:24:45,415 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:24:45,415 __main__ INFO: 检索到 0 个结果
2025-07-24 00:24:45,415 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:24:45,415 __main__ INFO: 缓存已清理
2025-07-24 00:24:45,415 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:26:33,937 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:26:33,939 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:26:33,939 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:26:33,939 __main__ INFO: 组件列表: []
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:26:33,939 __main__ INFO: 配置验证通过
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:26:33,939 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:26:33,940 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:26:33,940 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:26:33,940 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:26:33,940 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:26:33,940 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:26:33,940 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:26:33,940 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:26:33,940 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:26:34,059 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:26:34,059 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:26:34,060 rag.components.base DEBUG: 成功加载索引，文档数量: 228
2025-07-24 00:26:34,060 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 228
2025-07-24 00:26:34,060 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:26:34,060 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:26:34,061 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:26:34,061 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:26:34,061 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:26:34,061 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:26:34,061 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:26:34,061 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:26:34,061 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:26:34,061 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:26:34,061 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:26:34,061 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:26:34,062 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:26:34,062 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:26:34,062 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:26:34,062 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:26:34,062 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:26:34,063 rag.components.base DEBUG: 成功加载索引，文档数量: 228
2025-07-24 00:26:34,063 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 228
2025-07-24 00:26:34,063 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:26:34,063 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:26:34,064 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:26:34,064 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:26:34,064 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:26:34,064 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:26:34,064 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:26:34,064 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:26:34,064 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:26:34,064 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:26:34,064 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:26:34,064 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:26:34,064 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:26:34,064 __main__ INFO: 执行索引流程...
2025-07-24 00:26:34,064 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:26:34,064 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:26:34,064 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:26:34,067 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:26:34,068 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:26:34,068 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:26:34,069 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:26:34,070 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:26:34,071 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:26:34,071 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:26:34,071 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:26:34,071 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:26:34,071 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:26:34,071 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:26:34,071 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:26:34,071 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:26:34,071 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:26:34,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:26:34,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:26:34,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:26:34,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:26:34,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:26:34,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:26:34,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:26:34,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:26:34,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:26:34,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:26:34,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:26:34,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:26:34,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:26:34,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:26:34,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:26:34,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:26:34,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:26:34,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:26:34,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:26:34,384 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:26:34,384 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:26:34,384 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:26:34,384 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:26:34,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:26:34,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:26:34,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:26:34,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:26:34,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:26:34,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:26:34,386 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:26:34,386 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:26:34,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:26:34,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:26:34,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:26:34,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:26:34,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:26:34,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:26:34,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:26:34,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:26:34,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:26:34,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:26:34,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:26:34,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:26:34,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:26:34,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:26:34,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:26:34,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:26:34,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:26:34,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:26:34,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:26:34,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:26:34,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:26:34,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:26:34,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:26:34,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:26:34,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:26:34,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:26:34,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:26:34,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:26:34,395 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:26:34,395 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:26:34,395 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:26:34,395 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:26:34,395 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:26:34,396 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:26:34,396 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:26:34,396 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:26:34,396 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:26:34,397 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:26:34,398 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:26:34,398 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:26:34,398 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:26:34,398 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:26:34,398 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:26:34,399 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:26:34,399 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:26:34,399 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:26:34,399 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:26:34,399 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:26:34,400 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:26:34,400 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:26:34,400 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:26:34,400 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:26:34,400 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:26:34,401 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:26:34,401 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:26:34,401 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:26:34,401 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:26:34,401 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:26:34,401 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:26:34,401 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:26:34,401 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:26:34,401 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:26:34,407 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:26:34,407 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 342
2025-07-24 00:26:34,407 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:26:34,407 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:26:34,407 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:26:34,407 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:26:34,407 __main__ INFO: 执行检索流程...
2025-07-24 00:26:34,407 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:26:34,407 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:26:34,407 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:26:34,407 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:26:34,407 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:26:34,407 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:26:34,407 __main__ INFO: 检索到 0 个结果
2025-07-24 00:26:34,407 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:26:34,407 __main__ INFO: 缓存已清理
2025-07-24 00:26:34,407 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:28:11,950 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:28:11,951 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:28:11,951 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:28:11,951 __main__ INFO: 组件列表: []
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:28:11,951 __main__ INFO: 配置验证通过
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:28:11,951 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:28:11,951 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:28:11,951 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:28:11,951 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:28:12,054 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:28:12,054 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:28:12,056 rag.components.base DEBUG: 成功加载索引，文档数量: 342
2025-07-24 00:28:12,056 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 342
2025-07-24 00:28:12,056 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:28:12,056 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:28:12,057 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:28:12,057 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:28:12,057 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:28:12,057 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:28:12,057 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:28:12,057 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:28:12,058 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:28:12,058 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:28:12,058 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:28:12,058 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:28:12,058 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:28:12,058 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:28:12,058 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:28:12,058 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:28:12,058 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:28:12,059 rag.components.base DEBUG: 成功加载索引，文档数量: 342
2025-07-24 00:28:12,059 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 342
2025-07-24 00:28:12,059 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:28:12,059 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:28:12,060 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:28:12,061 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:28:12,061 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:28:12,061 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:28:12,061 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:28:12,061 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:28:12,061 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:28:12,061 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:28:12,061 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:28:12,061 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:28:12,061 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:28:12,061 __main__ INFO: 执行索引流程...
2025-07-24 00:28:12,061 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:28:12,061 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:28:12,061 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:28:12,064 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:28:12,064 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:28:12,065 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:28:12,066 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:28:12,067 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:28:12,068 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:28:12,069 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:28:12,069 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:28:12,069 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:28:12,069 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:28:12,069 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:28:12,359 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:28:12,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:28:12,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:28:12,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:28:12,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:28:12,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:28:12,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:28:12,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:28:12,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:28:12,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:28:12,363 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:28:12,363 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:28:12,363 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:28:12,364 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:28:12,364 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:28:12,364 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:28:12,364 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:28:12,365 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:28:12,369 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:28:12,369 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:28:12,369 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:28:12,369 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:28:12,369 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:28:12,370 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:28:12,370 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:28:12,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:28:12,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:28:12,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:28:12,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:28:12,372 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:28:12,372 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:28:12,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:28:12,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:28:12,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:28:12,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:28:12,373 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:28:12,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:28:12,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:28:12,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:28:12,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:28:12,374 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:28:12,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:28:12,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:28:12,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:28:12,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:28:12,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:28:12,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:28:12,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:28:12,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:28:12,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:28:12,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:28:12,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:28:12,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:28:12,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:28:12,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:28:12,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:28:12,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:28:12,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:28:12,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:28:12,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:28:12,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:28:12,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:28:12,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:28:12,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:28:12,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:28:12,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:28:12,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:28:12,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:28:12,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:28:12,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:28:12,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:28:12,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:28:12,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:28:12,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:28:12,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:28:12,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:28:12,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:28:12,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:28:12,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:28:12,387 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:28:12,387 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:28:12,387 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:28:12,387 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:28:12,393 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:28:12,393 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 456
2025-07-24 00:28:12,393 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:28:12,393 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:28:12,393 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:28:12,393 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:28:12,393 __main__ INFO: 执行检索流程...
2025-07-24 00:28:12,393 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:28:12,393 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:28:12,393 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:28:12,393 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:28:12,393 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:28:12,393 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:28:12,393 __main__ INFO: 检索到 0 个结果
2025-07-24 00:28:12,393 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:28:12,393 __main__ INFO: 缓存已清理
2025-07-24 00:28:12,393 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:30:07,446 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:30:07,446 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:30:07,446 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:30:07,446 __main__ INFO: 组件列表: []
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:30:07,446 __main__ INFO: 配置验证通过
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:30:07,446 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:30:07,446 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:30:07,447 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:30:07,447 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:30:07,549 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:30:07,549 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:30:07,552 rag.components.base DEBUG: 成功加载索引，文档数量: 456
2025-07-24 00:30:07,552 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 456
2025-07-24 00:30:07,552 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:30:07,552 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:30:07,554 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:30:07,554 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:30:07,554 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:30:07,554 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:30:07,554 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:30:07,554 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:30:07,554 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:30:07,555 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:30:07,555 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:30:07,555 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:30:07,555 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:30:07,555 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:30:07,556 rag.components.base DEBUG: 成功加载索引，文档数量: 456
2025-07-24 00:30:07,556 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 456
2025-07-24 00:30:07,556 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:30:07,556 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:30:07,558 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 0
2025-07-24 00:30:07,558 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 0
2025-07-24 00:30:07,558 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:30:07,558 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:30:07,558 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:30:07,558 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:30:07,558 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:30:07,558 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:30:07,558 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:30:07,558 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:30:07,558 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:30:07,558 __main__ INFO: 执行索引流程...
2025-07-24 00:30:07,558 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:30:07,558 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:30:07,559 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:30:07,561 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:30:07,562 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:30:07,562 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:30:07,563 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:30:07,564 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:30:07,565 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:30:07,567 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:30:07,567 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:30:07,567 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:30:07,567 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:30:07,567 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:30:07,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:30:07,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:30:07,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:30:07,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:30:07,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:30:07,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:30:07,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:30:07,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:30:07,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:30:07,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:30:07,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:30:07,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:30:07,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:30:07,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:30:07,866 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:30:07,867 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:30:07,867 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:30:07,867 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:30:07,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:30:07,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:30:07,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:30:07,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:30:07,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:30:07,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:30:07,869 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:30:07,869 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:30:07,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:30:07,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:30:07,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:30:07,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:30:07,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:30:07,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:30:07,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:30:07,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:30:07,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:30:07,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:30:07,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:30:07,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:30:07,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:30:07,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:30:07,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:30:07,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:30:07,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:30:07,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:30:07,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:30:07,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:30:07,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:30:07,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:30:07,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:30:07,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:30:07,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:30:07,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:30:07,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:30:07,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:30:07,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:30:07,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:30:07,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:30:07,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:30:07,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:30:07,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:30:07,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:30:07,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:30:07,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:30:07,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:30:07,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:30:07,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:30:07,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:30:07,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:30:07,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:30:07,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:30:07,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:30:07,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:30:07,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:30:07,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:30:07,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:30:07,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:30:07,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:30:07,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:30:07,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:30:07,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:30:07,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:30:07,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:30:07,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:30:07,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:30:07,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:30:07,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:30:07,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:30:07,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:30:07,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:30:07,884 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:30:07,884 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:30:07,884 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:30:07,884 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:30:07,896 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:30:07,896 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 570
2025-07-24 00:30:07,896 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:30:07,896 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:30:07,896 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:30:07,896 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:30:07,896 __main__ INFO: 执行检索流程...
2025-07-24 00:30:07,896 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:30:07,896 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:30:07,896 rag.components.base DEBUG: BM25索引为空，返回空结果
2025-07-24 00:30:07,896 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:30:07,897 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:30:07,897 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:30:07,897 __main__ INFO: 检索到 0 个结果
2025-07-24 00:30:07,897 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:30:07,897 __main__ INFO: 缓存已清理
2025-07-24 00:30:07,897 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:32:52,396 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:32:52,397 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:32:52,397 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:32:52,397 __main__ INFO: 组件列表: []
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:32:52,397 __main__ INFO: 配置验证通过
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:32:52,397 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:32:52,397 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:32:52,397 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:32:52,397 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:32:52,500 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:32:52,500 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:32:52,508 rag.components.base DEBUG: 成功加载索引，文档数量: 570
2025-07-24 00:32:52,508 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 570
2025-07-24 00:32:52,508 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:32:52,508 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:32:52,509 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 570
2025-07-24 00:32:52,510 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 570
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:32:52,510 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:32:52,510 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:32:52,510 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:32:52,510 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:32:52,510 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:32:52,510 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:32:52,510 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:32:52,510 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:32:52,517 rag.components.base DEBUG: 成功加载索引，文档数量: 570
2025-07-24 00:32:52,517 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 570
2025-07-24 00:32:52,517 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:32:52,517 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:32:52,518 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 570
2025-07-24 00:32:52,518 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 570
2025-07-24 00:32:52,518 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:32:52,518 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:32:52,518 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:32:52,518 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:32:52,518 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:32:52,518 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:32:52,519 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:32:52,519 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:32:52,519 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:32:52,519 __main__ INFO: 执行索引流程...
2025-07-24 00:32:52,519 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:32:52,519 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:32:52,519 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:32:52,522 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:32:52,523 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:32:52,523 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:32:52,524 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:32:52,525 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:32:52,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:32:52,527 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:32:52,527 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:32:52,527 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:32:52,527 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:32:52,527 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:32:52,776 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:32:52,776 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:32:52,776 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:32:52,777 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:32:52,777 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:32:52,777 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:32:52,778 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:32:52,778 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:32:52,778 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:32:52,778 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:32:52,780 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:32:52,780 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:32:52,780 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:32:52,780 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:32:52,781 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:32:52,781 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:32:52,781 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:32:52,781 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:32:52,785 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:32:52,785 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:32:52,786 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:32:52,786 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:32:52,786 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:32:52,786 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:32:52,786 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:32:52,786 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:32:52,786 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:32:52,786 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:32:52,786 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:32:52,787 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:32:52,787 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:32:52,788 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:32:52,788 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:32:52,788 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:32:52,789 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:32:52,789 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:32:52,789 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:32:52,790 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:32:52,790 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:32:52,790 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:32:52,790 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:32:52,790 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:32:52,791 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:32:52,791 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:32:52,791 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:32:52,791 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:32:52,791 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:32:52,792 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:32:52,792 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:32:52,792 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:32:52,792 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:32:52,792 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:32:52,793 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:32:52,794 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:32:52,794 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:32:52,794 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:32:52,794 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:32:52,794 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:32:52,795 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:32:52,796 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:32:52,796 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:32:52,796 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:32:52,796 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:32:52,796 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:32:52,797 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:32:52,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:32:52,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:32:52,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:32:52,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:32:52,798 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:32:52,799 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:32:52,800 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:32:52,800 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:32:52,800 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:32:52,800 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:32:52,800 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:32:52,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:32:52,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:32:52,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:32:52,801 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:32:52,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:32:52,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:32:52,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:32:52,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:32:52,802 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:32:52,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:32:52,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:32:52,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:32:52,803 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:32:52,804 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:32:52,804 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:32:52,804 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:32:52,804 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:32:52,804 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:32:52,818 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:32:52,818 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 684
2025-07-24 00:32:52,818 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:32:52,818 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:32:52,818 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:32:52,818 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:32:52,818 __main__ INFO: 执行检索流程...
2025-07-24 00:32:52,818 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:32:52,818 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:32:52,818 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:32:52,819 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:32:53,714 jieba DEBUG: Dumping model to file cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:32:53,784 jieba DEBUG: Loading model cost 0.966 seconds.
2025-07-24 00:32:53,784 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:32:53,785 rag.components.base DEBUG: BM25检索返回 0 个结果
2025-07-24 00:32:53,785 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:32:53,785 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:32:53,785 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:32:53,785 __main__ INFO: 检索到 0 个结果
2025-07-24 00:32:53,785 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:32:53,785 __main__ INFO: 缓存已清理
2025-07-24 00:32:53,785 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:34:24,751 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:34:24,752 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:34:24,752 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:34:24,752 __main__ INFO: 组件列表: []
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:34:24,752 __main__ INFO: 配置验证通过
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:34:24,752 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:34:24,752 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:34:24,752 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:34:24,752 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:34:24,853 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:34:24,853 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:34:24,862 rag.components.base DEBUG: 成功加载索引，文档数量: 684
2025-07-24 00:34:24,862 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 684
2025-07-24 00:34:24,862 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:34:24,862 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:34:24,863 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 684
2025-07-24 00:34:24,863 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 684
2025-07-24 00:34:24,863 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:34:24,863 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:34:24,863 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:34:24,863 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:34:24,864 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:34:24,864 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:34:24,864 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:34:24,864 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:34:24,864 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:34:24,872 rag.components.base DEBUG: 成功加载索引，文档数量: 684
2025-07-24 00:34:24,872 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 684
2025-07-24 00:34:24,872 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:34:24,872 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:34:24,873 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 684
2025-07-24 00:34:24,873 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 684
2025-07-24 00:34:24,873 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:34:24,873 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:34:24,873 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:34:24,873 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:34:24,873 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:34:24,873 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:34:24,873 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:34:24,873 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:34:24,874 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:34:24,874 __main__ INFO: 执行索引流程...
2025-07-24 00:34:24,874 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:34:24,874 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:34:24,874 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:34:24,877 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:34:24,877 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:34:24,878 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:34:24,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:34:24,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:34:24,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:34:24,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:34:24,882 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:34:24,882 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:34:24,882 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:34:24,882 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:34:24,882 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:34:25,136 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:34:25,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:34:25,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:34:25,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:34:25,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:34:25,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:34:25,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:34:25,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:34:25,139 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:34:25,140 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:34:25,140 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:34:25,140 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:34:25,141 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:34:25,145 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:34:25,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:34:25,146 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:34:25,146 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:34:25,146 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:34:25,146 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:34:25,147 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:34:25,147 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:34:25,147 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:34:25,147 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:34:25,147 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:34:25,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:34:25,148 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:34:25,148 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:34:25,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:34:25,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:34:25,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:34:25,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:34:25,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:34:25,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:34:25,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:34:25,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:34:25,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:34:25,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:34:25,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:34:25,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:34:25,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:34:25,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:34:25,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:34:25,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:34:25,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:34:25,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:34:25,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:34:25,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:34:25,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:34:25,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:34:25,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:34:25,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:34:25,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:34:25,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:34:25,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:34:25,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:34:25,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:34:25,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:34:25,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:34:25,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:34:25,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:34:25,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:34:25,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:34:25,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:34:25,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:34:25,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:34:25,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:34:25,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:34:25,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:34:25,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:34:25,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:34:25,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:34:25,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:34:25,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:34:25,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:34:25,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:34:25,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:34:25,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:34:25,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:34:25,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:34:25,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:34:25,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:34:25,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:34:25,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:34:25,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:34:25,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:34:25,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:34:25,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:34:25,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:34:25,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:34:25,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:34:25,163 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:34:25,163 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:34:25,163 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:34:25,163 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:34:25,179 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:34:25,179 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 798
2025-07-24 00:34:25,179 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:34:25,180 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:34:25,180 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:34:25,180 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:34:25,180 __main__ INFO: 执行检索流程...
2025-07-24 00:34:25,180 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:34:25,180 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:34:25,180 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:34:25,180 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:34:25,436 jieba DEBUG: Loading model cost 0.256 seconds.
2025-07-24 00:34:25,436 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:34:25,437 rag.components.base DEBUG: BM25检索返回 3 个结果
2025-07-24 00:34:25,437 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:34:25,437 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:34:25,437 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:34:25,437 __main__ INFO: 检索到 3 个结果
2025-07-24 00:34:25,437 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:34:25,437 __main__ INFO: 缓存已清理
2025-07-24 00:34:25,437 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:35:01,710 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:35:01,711 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:35:01,711 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:35:01,711 __main__ INFO: 组件列表: []
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:35:01,711 __main__ INFO: 配置验证通过
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:35:01,711 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:35:01,711 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:35:01,711 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:35:01,711 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:35:01,811 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:35:01,811 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:35:01,821 rag.components.base DEBUG: 成功加载索引，文档数量: 798
2025-07-24 00:35:01,821 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 798
2025-07-24 00:35:01,821 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:35:01,821 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:35:01,822 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 798
2025-07-24 00:35:01,822 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 798
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:35:01,822 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:35:01,822 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:35:01,822 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:35:01,822 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:35:01,822 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:35:01,823 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:35:01,823 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:35:01,823 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:35:01,823 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:35:01,831 rag.components.base DEBUG: 成功加载索引，文档数量: 798
2025-07-24 00:35:01,832 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 798
2025-07-24 00:35:01,832 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:35:01,832 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:35:01,833 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 798
2025-07-24 00:35:01,833 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 798
2025-07-24 00:35:01,833 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:35:01,833 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:35:01,833 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:35:01,833 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:35:01,833 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:35:01,833 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:35:01,833 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:35:01,833 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:35:01,834 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:35:01,834 __main__ INFO: 执行索引流程...
2025-07-24 00:35:01,834 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:35:01,834 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:35:01,834 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:35:01,836 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:35:01,836 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:35:01,836 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:35:01,837 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:35:01,838 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:35:01,839 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:35:01,839 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:35:01,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:35:01,841 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:35:01,841 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:35:01,841 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:35:01,841 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:35:01,841 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:35:02,079 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:35:02,080 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:35:02,080 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:35:02,080 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:35:02,080 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:35:02,080 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:35:02,081 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:35:02,081 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:35:02,081 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:35:02,081 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:35:02,083 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:35:02,083 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:35:02,083 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:35:02,083 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:35:02,084 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:35:02,084 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:35:02,084 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:35:02,085 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:35:02,089 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:35:02,089 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:35:02,090 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:35:02,090 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:35:02,090 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:35:02,091 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:35:02,091 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:35:02,091 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:35:02,091 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:35:02,092 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:35:02,092 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:35:02,092 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:35:02,092 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:35:02,092 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:35:02,092 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:35:02,092 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:35:02,093 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:35:02,094 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:35:02,094 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:35:02,094 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:35:02,094 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:35:02,094 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:35:02,095 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:35:02,095 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:35:02,095 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:35:02,095 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:35:02,095 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:35:02,096 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:35:02,097 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:35:02,097 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:35:02,097 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:35:02,097 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:35:02,097 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:35:02,098 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:35:02,099 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:35:02,100 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:35:02,100 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:35:02,100 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:35:02,101 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:35:02,101 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:35:02,101 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:35:02,101 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:35:02,101 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:35:02,102 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:35:02,103 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:35:02,103 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:35:02,103 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:35:02,103 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:35:02,103 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:35:02,104 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:35:02,104 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:35:02,104 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:35:02,105 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:35:02,105 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:35:02,105 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:35:02,105 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:35:02,105 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:35:02,106 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:35:02,106 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:35:02,106 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:35:02,106 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:35:02,106 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:35:02,107 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:35:02,107 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:35:02,107 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:35:02,107 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:35:02,107 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:35:02,107 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:35:02,107 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:35:02,107 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:35:02,127 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:35:02,127 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 912
2025-07-24 00:35:02,127 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:35:02,127 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:35:02,127 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:35:02,127 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:35:02,127 __main__ INFO: 执行检索流程...
2025-07-24 00:35:02,127 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:35:02,127 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:35:02,127 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:35:02,127 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:35:02,386 jieba DEBUG: Loading model cost 0.259 seconds.
2025-07-24 00:35:02,386 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:35:02,386 rag.components.base DEBUG: BM25检索返回 0 个结果
2025-07-24 00:35:02,387 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:35:02,387 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:35:02,387 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:35:02,387 __main__ INFO: 检索到 0 个结果
2025-07-24 00:35:02,387 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:35:02,387 __main__ INFO: 缓存已清理
2025-07-24 00:35:02,387 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:38:08,216 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:38:08,216 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:38:08,216 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:38:08,216 __main__ INFO: 组件列表: []
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:38:08,216 __main__ INFO: 配置验证通过
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:38:08,216 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:38:08,217 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:38:08,217 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:38:08,217 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:38:08,217 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:38:08,217 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:38:08,217 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:38:08,217 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:38:08,321 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:38:08,321 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:38:08,333 rag.components.base DEBUG: 成功加载索引，文档数量: 912
2025-07-24 00:38:08,333 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 912
2025-07-24 00:38:08,333 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:38:08,334 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:38:08,334 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 912
2025-07-24 00:38:08,335 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 912
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:38:08,335 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:38:08,335 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:38:08,335 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:38:08,335 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:38:08,335 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:38:08,335 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:38:08,335 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:38:08,335 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:38:08,345 rag.components.base DEBUG: 成功加载索引，文档数量: 912
2025-07-24 00:38:08,346 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 912
2025-07-24 00:38:08,346 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:38:08,346 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:38:08,347 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 912
2025-07-24 00:38:08,347 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 912
2025-07-24 00:38:08,347 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:38:08,347 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:38:08,347 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:38:08,347 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:38:08,347 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:38:08,347 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:38:08,347 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:38:08,348 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:38:08,348 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:38:08,348 __main__ INFO: 执行索引流程...
2025-07-24 00:38:08,348 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:38:08,348 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:38:08,348 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:38:08,351 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:38:08,353 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:38:08,356 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:38:08,360 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:38:08,361 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:38:08,362 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:38:08,363 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:38:08,363 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:38:08,364 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:38:08,364 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:38:08,364 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:38:08,364 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:38:08,364 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:38:08,611 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:38:08,611 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:38:08,611 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:38:08,612 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:38:08,613 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:38:08,615 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:38:08,615 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:38:08,615 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:38:08,615 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:38:08,616 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:38:08,616 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:38:08,616 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:38:08,616 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:38:08,620 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:38:08,621 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:38:08,621 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:38:08,621 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:38:08,621 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:38:08,621 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:38:08,622 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:38:08,622 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:38:08,623 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:38:08,623 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:38:08,623 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:38:08,623 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:38:08,623 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:38:08,623 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:38:08,623 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:38:08,624 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:38:08,625 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:38:08,625 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:38:08,625 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:38:08,625 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:38:08,625 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:38:08,626 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:38:08,626 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:38:08,626 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:38:08,626 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:38:08,626 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:38:08,627 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:38:08,627 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:38:08,627 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:38:08,627 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:38:08,627 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:38:08,628 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:38:08,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:38:08,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:38:08,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:38:08,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:38:08,629 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:38:08,630 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:38:08,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:38:08,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:38:08,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:38:08,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:38:08,631 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:38:08,632 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:38:08,632 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:38:08,632 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:38:08,632 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:38:08,632 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:38:08,633 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:38:08,633 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:38:08,633 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:38:08,633 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:38:08,633 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:38:08,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:38:08,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:38:08,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:38:08,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:38:08,634 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:38:08,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:38:08,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:38:08,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:38:08,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:38:08,635 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:38:08,636 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:38:08,636 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:38:08,636 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:38:08,636 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:38:08,637 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:38:08,637 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:38:08,637 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:38:08,637 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:38:08,638 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:38:08,638 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:38:08,638 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:38:08,639 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:38:08,639 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:38:08,639 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:38:08,639 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:38:08,639 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:38:08,639 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:38:08,639 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:38:08,661 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:38:08,661 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 1026
2025-07-24 00:38:08,661 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:38:08,661 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:38:08,661 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:38:08,661 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:38:08,661 __main__ INFO: 执行检索流程...
2025-07-24 00:38:08,661 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:38:08,661 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:38:08,661 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:38:08,661 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:38:08,917 jieba DEBUG: Loading model cost 0.256 seconds.
2025-07-24 00:38:08,917 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:38:08,918 rag.components.base DEBUG: 查询: '什么是Perf'
2025-07-24 00:38:08,918 rag.components.base DEBUG: 分词结果: ['什么', 'Perf']
2025-07-24 00:38:08,918 rag.components.base DEBUG: 开始计算BM25分数，查询词数量: 2
2025-07-24 00:38:08,918 rag.components.base DEBUG: 索引统计: 总文档数N=912, 平均文档长度=19.02
2025-07-24 00:38:08,918 rag.components.base DEBUG: BM25参数: k1=1.5, b=0.75
2025-07-24 00:38:08,918 rag.components.base DEBUG: 
--- 处理查询词 1/2: '什么' ---
2025-07-24 00:38:08,918 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 00:38:08,918 rag.components.base DEBUG: 词 '什么' 在索引中未找到匹配文档
2025-07-24 00:38:08,918 rag.components.base DEBUG: 
--- 处理查询词 2/2: 'Perf' ---
2025-07-24 00:38:08,918 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 00:38:08,918 rag.components.base DEBUG: 词 'Perf' 在索引中未找到匹配文档
2025-07-24 00:38:08,918 rag.components.base ERROR: BM25检索失败: 'NoneType' object has no attribute 'most_common'
2025-07-24 00:38:08,918 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:38:08,918 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:38:08,918 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:38:08,918 __main__ INFO: 检索到 0 个结果
2025-07-24 00:38:08,918 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:38:08,918 __main__ INFO: 缓存已清理
2025-07-24 00:38:08,918 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:39:23,456 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:39:23,457 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:39:23,457 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:39:23,457 __main__ INFO: 组件列表: []
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:39:23,457 __main__ INFO: 配置验证通过
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:39:23,457 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:39:23,457 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:39:23,457 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:39:23,457 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:39:23,562 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:39:23,562 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:39:23,578 rag.components.base DEBUG: 成功加载索引，文档数量: 1026
2025-07-24 00:39:23,578 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1026
2025-07-24 00:39:23,578 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:39:23,578 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:39:23,581 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1026
2025-07-24 00:39:23,581 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1026
2025-07-24 00:39:23,581 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:39:23,581 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:39:23,581 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:39:23,581 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:39:23,581 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:39:23,581 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:39:23,582 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:39:23,582 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:39:23,582 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:39:23,582 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:39:23,582 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:39:23,674 rag.components.base DEBUG: 成功加载索引，文档数量: 1026
2025-07-24 00:39:23,674 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1026
2025-07-24 00:39:23,674 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:39:23,674 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:39:23,675 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1026
2025-07-24 00:39:23,675 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1026
2025-07-24 00:39:23,675 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:39:23,675 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:39:23,675 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:39:23,676 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:39:23,676 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:39:23,676 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:39:23,676 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:39:23,676 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:39:23,676 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:39:23,676 __main__ INFO: 执行索引流程...
2025-07-24 00:39:23,676 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:39:23,676 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:39:23,676 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:39:23,680 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:39:23,680 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:39:23,681 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:39:23,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:39:23,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:39:23,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:39:23,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:39:23,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:39:23,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:39:23,684 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:39:23,686 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:39:23,686 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:39:23,686 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:39:23,686 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:39:23,686 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:39:23,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:39:23,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:39:23,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:39:23,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:39:23,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:39:23,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:39:23,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:39:23,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:39:23,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:39:23,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:39:23,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:39:23,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:39:23,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:39:23,868 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:39:23,869 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:39:23,869 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:39:23,869 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:39:23,869 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:39:23,869 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:39:23,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:39:23,870 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:39:23,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:39:23,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:39:23,871 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:39:23,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:39:23,872 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:39:23,872 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:39:23,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:39:23,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:39:23,872 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:39:23,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:39:23,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:39:23,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:39:23,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:39:23,873 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:39:23,874 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:39:23,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:39:23,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:39:23,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:39:23,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:39:23,875 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:39:23,876 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:39:23,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:39:23,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:39:23,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:39:23,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:39:23,877 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:39:23,878 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:39:23,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:39:23,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:39:23,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:39:23,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:39:23,879 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:39:23,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:39:23,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:39:23,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:39:23,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:39:23,880 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:39:23,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:39:23,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:39:23,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:39:23,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:39:23,881 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:39:23,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:39:23,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:39:23,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:39:23,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:39:23,882 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:39:23,883 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:39:23,884 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:39:23,885 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:39:23,885 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:39:23,885 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:39:23,885 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:39:23,885 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:39:23,886 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:39:23,886 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:39:23,886 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:39:23,886 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:39:23,886 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:39:23,887 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:39:23,887 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:39:23,887 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:39:23,887 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:39:23,913 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:39:23,913 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 1140
2025-07-24 00:39:23,913 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:39:23,913 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:39:23,913 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:39:23,913 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:39:23,913 __main__ INFO: 执行检索流程...
2025-07-24 00:39:23,913 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:39:23,913 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:39:23,913 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:39:23,913 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:39:24,188 jieba DEBUG: Loading model cost 0.274 seconds.
2025-07-24 00:39:24,188 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:39:24,188 rag.components.base DEBUG: 查询: '什么是Perf'
2025-07-24 00:39:24,188 rag.components.base DEBUG: 分词结果: ['什么', 'Perf']
2025-07-24 00:39:24,188 rag.components.base DEBUG: 开始计算BM25分数，查询词数量: 2
2025-07-24 00:39:24,188 rag.components.base DEBUG: 索引统计: 总文档数N=1026, 平均文档长度=19.02
2025-07-24 00:39:24,188 rag.components.base DEBUG: BM25参数: k1=1.5, b=0.75
2025-07-24 00:39:24,188 rag.components.base DEBUG: 
--- 处理查询词 1/2: '什么' ---
2025-07-24 00:39:24,188 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 00:39:24,188 rag.components.base DEBUG: 词 '什么' 在索引中未找到匹配文档
2025-07-24 00:39:24,188 rag.components.base DEBUG: 
--- 处理查询词 2/2: 'Perf' ---
2025-07-24 00:39:24,188 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 00:39:24,189 rag.components.base DEBUG: 词 'Perf' 在索引中未找到匹配文档
2025-07-24 00:39:24,189 rag.components.base DEBUG: 
=== BM25分数计算完成 ===
2025-07-24 00:39:24,189 rag.components.base DEBUG: Top-5分数预览: []
2025-07-24 00:39:24,189 rag.components.base DEBUG: 所有文档分数统计: 共 0 个文档有分数
2025-07-24 00:39:24,189 rag.components.base DEBUG: BM25检索完成: 候选文档0个 -> Top-3筛选 -> 阈值过滤 -> 最终返回0个结果
2025-07-24 00:39:24,189 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:39:24,189 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:39:24,189 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:39:24,189 __main__ INFO: 检索到 0 个结果
2025-07-24 00:39:24,189 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:39:24,189 __main__ INFO: 缓存已清理
2025-07-24 00:39:24,189 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:40:00,758 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 00:40:00,758 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 00:40:00,758 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:40:00,759 __main__ INFO: 组件列表: []
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:40:00,759 __main__ INFO: 配置验证通过
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:40:00,759 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:40:00,759 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:40:00,759 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:40:00,759 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:40:00,860 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:40:00,860 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:40:00,876 rag.components.base DEBUG: 成功加载索引，文档数量: 1140
2025-07-24 00:40:00,877 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1140
2025-07-24 00:40:00,877 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:40:00,877 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:40:00,878 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1140
2025-07-24 00:40:00,878 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1140
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:40:00,878 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:40:00,878 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 00:40:00,878 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 00:40:00,878 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 00:40:00,878 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 00:40:00,878 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 00:40:00,879 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 00:40:00,879 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 00:40:00,879 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:40:00,890 rag.components.base DEBUG: 成功加载索引，文档数量: 1140
2025-07-24 00:40:00,890 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1140
2025-07-24 00:40:00,890 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 00:40:00,890 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:40:00,892 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1140
2025-07-24 00:40:00,892 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1140
2025-07-24 00:40:00,892 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 00:40:00,892 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 00:40:00,892 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 00:40:00,892 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 00:40:00,892 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 00:40:00,892 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 00:40:00,892 __main__ INFO: Pipeline Builder测试完成
2025-07-24 00:40:00,893 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 00:40:00,893 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 00:40:00,893 __main__ INFO: 执行索引流程...
2025-07-24 00:40:00,893 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 00:40:00,893 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 00:40:00,893 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 00:40:00,895 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 00:40:00,896 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 00:40:00,896 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 00:40:00,896 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:40:00,897 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:40:00,898 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:40:00,900 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 00:40:00,900 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 00:40:00,900 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 00:40:00,900 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 00:40:00,900 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 00:40:01,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:40:01,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:40:01,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:40:01,137 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 00:40:01,138 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 00:40:01,141 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:40:01,141 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:40:01,141 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:40:01,141 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:40:01,142 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 00:40:01,142 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 00:40:01,142 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 00:40:01,142 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 00:40:01,146 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 00:40:01,147 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 00:40:01,147 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:40:01,147 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:40:01,147 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:40:01,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:40:01,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:40:01,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 00:40:01,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 00:40:01,148 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:40:01,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 00:40:01,149 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 00:40:01,149 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 00:40:01,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:40:01,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 00:40:01,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:40:01,149 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 00:40:01,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:40:01,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 00:40:01,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:40:01,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 00:40:01,150 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 00:40:01,151 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:40:01,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 00:40:01,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:40:01,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 00:40:01,152 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:40:01,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 00:40:01,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:40:01,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 00:40:01,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:40:01,153 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 00:40:01,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:40:01,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 00:40:01,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:40:01,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 00:40:01,154 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:40:01,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 00:40:01,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:40:01,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 00:40:01,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:40:01,155 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 00:40:01,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:40:01,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 00:40:01,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:40:01,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 00:40:01,156 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:40:01,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 00:40:01,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:40:01,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 00:40:01,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:40:01,157 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:40:01,158 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 00:40:01,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:40:01,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 00:40:01,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:40:01,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 00:40:01,159 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 00:40:01,160 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 00:40:01,161 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:40:01,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 00:40:01,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:40:01,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 00:40:01,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:40:01,162 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 00:40:01,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:40:01,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 00:40:01,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:40:01,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 00:40:01,163 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:40:01,164 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 00:40:01,164 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 00:40:01,164 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 00:40:01,164 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 00:40:01,164 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 00:40:01,191 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 00:40:01,191 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 1254
2025-07-24 00:40:01,191 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 00:40:01,191 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 00:40:01,191 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:40:01,191 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 00:40:01,191 __main__ INFO: 执行检索流程...
2025-07-24 00:40:01,191 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 00:40:01,191 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 00:40:01,191 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 00:40:01,191 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 00:40:01,442 jieba DEBUG: Loading model cost 0.251 seconds.
2025-07-24 00:40:01,443 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 00:40:01,443 rag.components.base DEBUG: 查询: '什么是perf'
2025-07-24 00:40:01,443 rag.components.base DEBUG: 分词结果: ['什么', 'perf']
2025-07-24 00:40:01,443 rag.components.base DEBUG: 开始计算BM25分数，查询词数量: 2
2025-07-24 00:40:01,443 rag.components.base DEBUG: 索引统计: 总文档数N=1140, 平均文档长度=19.02
2025-07-24 00:40:01,443 rag.components.base DEBUG: BM25参数: k1=1.5, b=0.75
2025-07-24 00:40:01,443 rag.components.base DEBUG: 
--- 处理查询词 1/2: '什么' ---
2025-07-24 00:40:01,443 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 00:40:01,443 rag.components.base DEBUG: 词 '什么' 在索引中未找到匹配文档
2025-07-24 00:40:01,443 rag.components.base DEBUG: 
--- 处理查询词 2/2: 'perf' ---
2025-07-24 00:40:01,443 rag.components.base DEBUG: 匹配文档数: 410
2025-07-24 00:40:01,443 rag.components.base DEBUG: IDF计算: df=410, idf=1.0223
2025-07-24 00:40:01,443 rag.components.base DEBUG: 匹配的文档ID: ['doc_12', 'doc_13', 'doc_22', 'doc_23', 'doc_24', 'doc_28', 'doc_29', 'doc_31', 'doc_35', 'doc_49']...
2025-07-24 00:40:01,443 rag.components.base DEBUG:   文档 '无标题' (ID=doc_12): tf=5, doc_len=39, 本词贡献分数=1.6634, 累计分数=1.6634
2025-07-24 00:40:01,443 rag.components.base DEBUG:   文档 '无标题' (ID=doc_13): tf=4, doc_len=58, 本词贡献分数=1.3096, 累计分数=1.3096
2025-07-24 00:40:01,443 rag.components.base DEBUG:   文档 '无标题' (ID=doc_22): tf=5, doc_len=39, 本词贡献分数=1.6634, 累计分数=1.6634
2025-07-24 00:40:01,443 rag.components.base DEBUG:   ... 还有 407 个文档的计算过程已省略
2025-07-24 00:40:01,444 rag.components.base DEBUG: 
=== BM25分数计算完成 ===
2025-07-24 00:40:01,444 rag.components.base DEBUG: Top-5分数预览: [('doc_77', '1.8502'), ('doc_78', '1.8502'), ('doc_107', '1.8502'), ('doc_108', '1.8502'), ('doc_191', '1.8502')]
2025-07-24 00:40:01,444 rag.components.base DEBUG: 所有文档分数统计: 共 410 个文档有分数
2025-07-24 00:40:01,444 rag.components.base DEBUG: 分数范围: 最高=1.8502, 最低=0.0000, 平均=1.3666
2025-07-24 00:40:01,444 rag.components.base DEBUG: Top-1: 文档ID=doc_77, 分数=1.8502, 标题='无标题', 内容预览='### 5.1 应用程序性能分析 ```bash # 分析特定程序 perf record -g ./my_application perf report  # 实时监控 perf top -p $(...'
2025-07-24 00:40:01,444 rag.components.base DEBUG: Top-2: 文档ID=doc_78, 分数=1.8502, 标题='无标题', 内容预览='### 5.1 应用程序性能分析 ```bash # 分析特定程序 perf record -g ./my_application perf report  # 实时监控 perf top -p $(...'
2025-07-24 00:40:01,444 rag.components.base DEBUG: Top-3: 文档ID=doc_107, 分数=1.8502, 标题='无标题', 内容预览='### 8.2 调试技巧 ```bash # 查看可用事件 perf list  # 检查perf版本 perf --version  # 查看系统信息 perf report --header-on...'
2025-07-24 00:40:01,445 rag.components.base DEBUG: BM25检索完成: 候选文档410个 -> Top-3筛选 -> 阈值过滤 -> 最终返回3个结果
2025-07-24 00:40:01,445 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 00:40:01,445 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 00:40:01,445 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 00:40:01,445 __main__ INFO: 检索到 3 个结果
2025-07-24 00:40:01,445 __main__ INFO: Pipeline执行测试完成
2025-07-24 00:40:01,445 __main__ INFO: 缓存已清理
2025-07-24 00:40:01,445 __main__ INFO: Pipeline Builder测试完成
2025-07-24 09:27:12,383 __main__ INFO: 开始Pipeline Builder测试
2025-07-24 09:27:12,384 __main__ INFO: === 测试Pipeline Builder ===
2025-07-24 09:27:12,384 __main__ INFO: 
--- 使用Builder手动构建 ---
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 09:27:12,384 __main__ INFO: 组件列表: []
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 09:27:12,384 __main__ INFO: 配置验证通过
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 09:27:12,384 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 09:27:12,384 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 09:27:12,384 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 09:27:12,384 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 09:27:12,483 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 09:27:12,483 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 09:27:12,499 rag.components.base DEBUG: 成功加载索引，文档数量: 1254
2025-07-24 09:27:12,500 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1254
2025-07-24 09:27:12,500 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 09:27:12,500 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 09:27:12,502 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1254
2025-07-24 09:27:12,502 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1254
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 09:27:12,502 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 09:27:12,502 __main__ INFO: Pipeline构建完成，入口点: {}
2025-07-24 09:27:12,502 __main__ INFO: 
--- 使用Factory快速创建 ---
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: bm25_pipeline
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: Pipeline配置验证通过: bm25_pipeline
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 09:27:12,502 rag.pipeline.builder DEBUG: 创建组件: bm25_indexer (indexer.bm25)
2025-07-24 09:27:12,503 rag.pipeline.builder DEBUG: 创建组件: bm25_retriever (retriever.bm25)
2025-07-24 09:27:12,503 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 09:27:12,503 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> bm25_indexer
2025-07-24 09:27:12,503 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 09:27:12,503 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 09:27:12,503 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 09:27:12,503 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 09:27:12,503 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 09:27:12,503 rag.components.base DEBUG: 初始化组件: bm25_indexer
2025-07-24 09:27:12,518 rag.components.base DEBUG: 成功加载索引，文档数量: 1254
2025-07-24 09:27:12,518 rag.components.base DEBUG: BM25索引器初始化完成，文档数量: 1254
2025-07-24 09:27:12,518 rag.pipeline.builder DEBUG: 初始化组件: bm25_indexer
2025-07-24 09:27:12,518 rag.components.base DEBUG: 初始化组件: bm25_retriever
2025-07-24 09:27:12,520 rag.components.base DEBUG: 成功加载BM25索引，文档数量: 1254
2025-07-24 09:27:12,520 rag.components.base DEBUG: BM25检索器初始化完成，文档数量: 1254
2025-07-24 09:27:12,520 rag.pipeline.builder DEBUG: 初始化组件: bm25_retriever
2025-07-24 09:27:12,520 rag.pipeline.builder INFO: Pipeline构建完成: bm25_pipeline
2025-07-24 09:27:12,520 rag.pipeline.factory INFO: 成功创建Pipeline: bm25_pipeline
2025-07-24 09:27:12,520 __main__ INFO: Pipeline创建完成: ['document_loader', 'text_splitter', 'bm25_indexer', 'bm25_retriever']
2025-07-24 09:27:12,520 __main__ INFO: 
--- 获取Builder实例 ---
2025-07-24 09:27:12,520 __main__ INFO: Builder创建完成: generation_pipeline
2025-07-24 09:27:12,520 __main__ INFO: Pipeline Builder测试完成
2025-07-24 09:27:12,521 __main__ INFO: === 测试Pipeline执行 ===
2025-07-24 09:27:12,521 rag.pipeline.factory DEBUG: 从缓存获取Pipeline: bm25_pipeline
2025-07-24 09:27:12,521 __main__ INFO: 执行索引流程...
2025-07-24 09:27:12,521 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 09:27:12,521 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 09:27:12,521 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 09:27:12,524 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 09:27:12,525 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 09:27:12,525 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 09:27:12,526 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 09:27:12,527 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 09:27:12,528 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 09:27:12,528 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 09:27:12,528 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 09:27:12,529 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 09:27:12,529 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 09:27:12,529 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 09:27:12,529 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 09:27:12,529 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 09:27:12,839 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 09:27:12,839 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 09:27:12,839 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 09:27:12,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 09:27:12,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 09:27:12,840 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 09:27:12,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 09:27:12,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 09:27:12,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 09:27:12,841 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 09:27:12,843 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 09:27:12,843 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 09:27:12,843 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 09:27:12,843 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 09:27:12,844 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 09:27:12,844 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 09:27:12,844 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 09:27:12,845 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 09:27:12,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 09:27:12,848 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 09:27:12,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 09:27:12,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 09:27:12,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 09:27:12,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 09:27:12,849 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 09:27:12,849 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 09:27:12,849 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 09:27:12,849 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 09:27:12,849 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 09:27:12,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 09:27:12,850 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 09:27:12,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 09:27:12,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 09:27:12,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 09:27:12,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 09:27:12,851 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 09:27:12,851 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 09:27:12,851 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 09:27:12,852 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 09:27:12,852 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 09:27:12,852 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 09:27:12,852 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 09:27:12,852 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 09:27:12,853 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 09:27:12,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 09:27:12,854 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 09:27:12,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 09:27:12,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 09:27:12,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 09:27:12,855 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 09:27:12,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 09:27:12,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 09:27:12,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 09:27:12,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 09:27:12,856 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 09:27:12,857 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 09:27:12,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 09:27:12,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 09:27:12,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 09:27:12,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 09:27:12,858 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 09:27:12,859 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 09:27:12,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 09:27:12,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 09:27:12,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 09:27:12,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 09:27:12,860 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 09:27:12,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 09:27:12,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 09:27:12,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 09:27:12,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 09:27:12,861 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 09:27:12,862 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 09:27:12,863 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 09:27:12,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 09:27:12,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 09:27:12,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 09:27:12,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 09:27:12,864 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 09:27:12,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 09:27:12,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 09:27:12,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 09:27:12,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 09:27:12,865 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 09:27:12,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 09:27:12,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 09:27:12,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 09:27:12,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 09:27:12,866 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 09:27:12,867 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 09:27:12,867 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 09:27:12,867 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 09:27:12,867 rag.components.base DEBUG: 执行下一步组件: bm25_indexer
2025-07-24 09:27:12,867 rag.components.base DEBUG: 组件 bm25_indexer 开始处理数据
2025-07-24 09:27:12,897 rag.components.base DEBUG: 索引已保存到: ./data/bm25_index/full_pipeline_docs.pkl
2025-07-24 09:27:12,897 rag.components.base DEBUG: 成功索引 114 个新文档，总文档数: 1368
2025-07-24 09:27:12,897 rag.components.base DEBUG: 组件 bm25_indexer 处理完成
2025-07-24 09:27:12,898 rag.components.base DEBUG: 组件 bm25_indexer 是终点组件，返回结果
2025-07-24 09:27:12,898 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 09:27:12,898 __main__ INFO: 索引结果: {'component': 'bm25_indexer', 'indexer_type': 'BM25IndexerComponent'}
2025-07-24 09:27:12,898 __main__ INFO: 执行检索流程...
2025-07-24 09:27:12,898 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: bm25_retriever
2025-07-24 09:27:12,898 rag.components.base DEBUG: 组件 bm25_retriever 开始处理数据
2025-07-24 09:27:12,898 jieba DEBUG: Building prefix dict from the default dictionary ...
2025-07-24 09:27:12,898 jieba DEBUG: Loading model from cache /var/folders/v6/tqsg1tn16333rlzyl42yctb80000gn/T/jieba.cache
2025-07-24 09:27:13,150 jieba DEBUG: Loading model cost 0.252 seconds.
2025-07-24 09:27:13,150 jieba DEBUG: Prefix dict has been built successfully.
2025-07-24 09:27:13,150 rag.components.base DEBUG: 查询: '什么是perf'
2025-07-24 09:27:13,150 rag.components.base DEBUG: 分词结果: ['什么', 'perf']
2025-07-24 09:27:13,150 rag.components.base DEBUG: 开始计算BM25分数，查询词数量: 2
2025-07-24 09:27:13,150 rag.components.base DEBUG: 索引统计: 总文档数N=1254, 平均文档长度=19.02
2025-07-24 09:27:13,150 rag.components.base DEBUG: BM25参数: k1=1.5, b=0.75
2025-07-24 09:27:13,150 rag.components.base DEBUG: 
--- 处理查询词 1/2: '什么' ---
2025-07-24 09:27:13,150 rag.components.base DEBUG: 匹配文档数: 0
2025-07-24 09:27:13,150 rag.components.base DEBUG: 词 '什么' 在索引中未找到匹配文档
2025-07-24 09:27:13,150 rag.components.base DEBUG: 
--- 处理查询词 2/2: 'perf' ---
2025-07-24 09:27:13,151 rag.components.base DEBUG: 匹配文档数: 451
2025-07-24 09:27:13,151 rag.components.base DEBUG: IDF计算: df=451, idf=1.0223
2025-07-24 09:27:13,151 rag.components.base DEBUG: 匹配的文档ID: ['doc_12', 'doc_13', 'doc_22', 'doc_23', 'doc_24', 'doc_28', 'doc_29', 'doc_31', 'doc_35', 'doc_49']...
2025-07-24 09:27:13,151 rag.components.base DEBUG:   文档 '无标题' (ID=doc_12): tf=5, doc_len=39, 本词贡献分数=1.6635, 累计分数=1.6635
2025-07-24 09:27:13,151 rag.components.base DEBUG:   文档 '无标题' (ID=doc_13): tf=4, doc_len=58, 本词贡献分数=1.3096, 累计分数=1.3096
2025-07-24 09:27:13,151 rag.components.base DEBUG:   文档 '无标题' (ID=doc_22): tf=5, doc_len=39, 本词贡献分数=1.6635, 累计分数=1.6635
2025-07-24 09:27:13,151 rag.components.base DEBUG:   ... 还有 448 个文档的计算过程已省略
2025-07-24 09:27:13,152 rag.components.base DEBUG: 
=== BM25分数计算完成 ===
2025-07-24 09:27:13,152 rag.components.base DEBUG: Top-5分数预览: [('doc_77', '1.8502'), ('doc_78', '1.8502'), ('doc_107', '1.8502'), ('doc_108', '1.8502'), ('doc_191', '1.8502')]
2025-07-24 09:27:13,152 rag.components.base DEBUG: 所有文档分数统计: 共 451 个文档有分数
2025-07-24 09:27:13,152 rag.components.base DEBUG: 分数范围: 最高=1.8502, 最低=0.0000, 平均=1.3666
2025-07-24 09:27:13,152 rag.components.base DEBUG: Top-1: 文档ID=doc_77, 分数=1.8502, 标题='无标题', 内容预览='### 5.1 应用程序性能分析 ```bash # 分析特定程序 perf record -g ./my_application perf report  # 实时监控 perf top -p $(...'
2025-07-24 09:27:13,152 rag.components.base DEBUG: Top-2: 文档ID=doc_78, 分数=1.8502, 标题='无标题', 内容预览='### 5.1 应用程序性能分析 ```bash # 分析特定程序 perf record -g ./my_application perf report  # 实时监控 perf top -p $(...'
2025-07-24 09:27:13,152 rag.components.base DEBUG: Top-3: 文档ID=doc_107, 分数=1.8502, 标题='无标题', 内容预览='### 8.2 调试技巧 ```bash # 查看可用事件 perf list  # 检查perf版本 perf --version  # 查看系统信息 perf report --header-on...'
2025-07-24 09:27:13,152 rag.components.base DEBUG: BM25检索完成: 候选文档451个 -> Top-3筛选 -> 阈值过滤 -> 最终返回3个结果
2025-07-24 09:27:13,152 rag.components.base DEBUG: 组件 bm25_retriever 处理完成
2025-07-24 09:27:13,152 rag.components.base DEBUG: 组件 bm25_retriever 是终点组件，返回结果
2025-07-24 09:27:13,152 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 09:27:13,152 __main__ INFO: 检索到 3 个结果
2025-07-24 09:27:13,152 __main__ INFO: Pipeline执行测试完成
2025-07-24 09:27:13,152 __main__ INFO: 缓存已清理
2025-07-24 09:27:13,152 __main__ INFO: Pipeline Builder测试完成
2025-07-24 09:57:59,251 __main__ INFO: 开始ES索引Pipeline示例
2025-07-24 09:57:59,251 __main__ INFO: === 检查索引状态 ===
2025-07-24 09:57:59,251 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 09:57:59,271 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 09:57:59,443 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 401 0
2025-07-24 09:57:59,443 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:401 duration:0.172s]
2025-07-24 09:57:59,443 rag.components.base ERROR: 初始化Elasticsearch客户端失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,443 __main__ ERROR: 检查索引状态失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,443 __main__ INFO: === 测试ES索引Pipeline ===
2025-07-24 09:57:59,443 __main__ INFO: 创建ES索引Pipeline...
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_index_pipeline
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_index_pipeline
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 创建组件: es_indexer (indexer.elasticsearch)
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> es_indexer
2025-07-24 09:57:59,444 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 09:57:59,444 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 09:57:59,444 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 09:57:59,444 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 09:57:59,560 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 09:57:59,560 rag.components.base DEBUG: 初始化组件: es_indexer
2025-07-24 09:57:59,577 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 09:57:59,677 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 401 0
2025-07-24 09:57:59,677 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:401 duration:0.101s]
2025-07-24 09:57:59,678 rag.components.base ERROR: 初始化Elasticsearch客户端失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,678 rag.pipeline.builder ERROR: 初始化组件 es_indexer 失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,678 rag.pipeline.builder ERROR: Pipeline构建失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,678 rag.pipeline.factory ERROR: 创建Pipeline失败: es_index_pipeline, 错误: 无法连接到Elasticsearch
2025-07-24 09:57:59,678 __main__ ERROR: ES索引Pipeline测试失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,678 __main__ INFO: === 检查索引状态 ===
2025-07-24 09:57:59,678 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 09:57:59,700 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 09:57:59,793 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 401 0
2025-07-24 09:57:59,793 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:401 duration:0.093s]
2025-07-24 09:57:59,793 rag.components.base ERROR: 初始化Elasticsearch客户端失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,793 __main__ ERROR: 检查索引状态失败: 无法连接到Elasticsearch
2025-07-24 09:57:59,793 __main__ INFO: 缓存已清理
2025-07-24 09:57:59,793 __main__ INFO: ES索引Pipeline示例完成
2025-07-24 10:01:52,721 __main__ INFO: 开始ES索引Pipeline示例
2025-07-24 10:01:52,721 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:01:52,721 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:01:52,740 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:01:52,880 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:01:52,881 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.140s]
2025-07-24 10:01:52,881 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:01:52,883 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 404 0
2025-07-24 10:01:52,883 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:404 duration:0.003s]
2025-07-24 10:01:52,883 __main__ WARNING: 索引 performance_docs 不存在
2025-07-24 10:01:52,884 __main__ INFO: === 测试ES索引Pipeline ===
2025-07-24 10:01:52,884 __main__ INFO: 创建ES索引Pipeline...
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_index_pipeline
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_index_pipeline
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 创建组件: es_indexer (indexer.elasticsearch)
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> es_indexer
2025-07-24 10:01:52,884 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 10:01:52,884 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 10:01:52,884 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 10:01:52,884 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 10:01:52,987 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 10:01:52,987 rag.components.base DEBUG: 初始化组件: es_indexer
2025-07-24 10:01:53,003 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:01:53,017 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:01:53,017 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.014s]
2025-07-24 10:01:53,017 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:01:53,017 rag.pipeline.builder DEBUG: 初始化组件: es_indexer
2025-07-24 10:01:53,017 rag.pipeline.builder INFO: Pipeline构建完成: es_index_pipeline
2025-07-24 10:01:53,017 rag.pipeline.factory INFO: 成功创建Pipeline: es_index_pipeline
2025-07-24 10:01:53,017 __main__ INFO: Pipeline创建完成，组件列表: ['document_loader', 'text_splitter', 'es_indexer']
2025-07-24 10:01:53,017 __main__ INFO: 开始执行索引流程...
2025-07-24 10:01:53,017 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 10:01:53,017 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 10:01:53,017 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 10:01:53,020 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 10:01:53,021 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 10:01:53,021 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 10:01:53,022 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:01:53,022 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:01:53,022 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:01:53,022 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:01:53,022 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:01:53,023 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:01:53,024 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:01:53,026 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 10:01:53,026 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 10:01:53,026 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 10:01:53,026 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 10:01:53,026 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 10:01:53,366 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:01:53,366 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:01:53,367 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:01:53,367 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:01:53,367 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 10:01:53,367 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 10:01:53,368 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:01:53,368 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 10:01:53,368 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 10:01:53,368 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:01:53,370 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:01:53,370 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:01:53,370 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:01:53,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:01:53,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:01:53,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 10:01:53,371 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 10:01:53,372 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:01:53,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:01:53,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 10:01:53,375 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 10:01:53,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 10:01:53,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 10:01:53,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 10:01:53,376 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:01:53,376 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 10:01:53,376 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:01:53,376 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:01:53,376 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:01:53,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:01:53,377 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:01:53,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:01:53,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 10:01:53,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:01:53,378 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:01:53,378 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 10:01:53,378 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:01:53,379 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:01:53,380 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:01:53,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:01:53,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:01:53,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:01:53,381 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:01:53,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:01:53,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:01:53,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:01:53,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:01:53,382 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:01:53,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:01:53,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:01:53,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:01:53,383 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:01:53,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:01:53,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:01:53,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:01:53,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:01:53,384 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:01:53,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:01:53,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:01:53,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:01:53,385 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:01:53,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:01:53,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:01:53,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:01:53,386 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:01:53,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:01:53,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:01:53,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:01:53,387 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:01:53,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:01:53,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:01:53,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:01:53,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:01:53,388 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:01:53,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:01:53,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:01:53,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:01:53,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:01:53,389 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:01:53,390 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:01:53,391 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:01:53,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:01:53,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:01:53,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:01:53,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:01:53,392 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:01:53,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:01:53,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:01:53,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:01:53,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:01:53,393 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:01:53,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:01:53,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:01:53,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:01:53,394 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:01:53,394 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 10:01:53,394 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 10:01:53,394 rag.components.base DEBUG: 执行下一步组件: es_indexer
2025-07-24 10:01:53,394 rag.components.base DEBUG: 组件 es_indexer 开始处理数据
2025-07-24 10:01:53,399 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 404 0
2025-07-24 10:01:53,399 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:404 duration:0.005s]
2025-07-24 10:01:53,642 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /performance_docs HTTP/1.1" 200 0
2025-07-24 10:01:53,644 elastic_transport.transport INFO: PUT https://localhost:9200/performance_docs [status:200 duration:0.244s]
2025-07-24 10:01:53,644 rag.components.base DEBUG: 成功创建索引: performance_docs
2025-07-24 10:01:53,848 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:01:53,850 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.113s]
2025-07-24 10:01:53,873 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:01:53,876 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.024s]
2025-07-24 10:01:53,890 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:01:53,896 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.019s]
2025-07-24 10:01:53,896 rag.components.base DEBUG: 成功索引 114 个文档到 performance_docs
2025-07-24 10:01:53,896 rag.components.base DEBUG: 组件 es_indexer 处理完成
2025-07-24 10:01:53,896 rag.components.base DEBUG: 组件 es_indexer 是终点组件，返回结果
2025-07-24 10:01:53,896 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 10:01:53,896 __main__ ERROR: 索引失败: 未知错误
2025-07-24 10:01:53,896 __main__ INFO: ES索引Pipeline测试完成
2025-07-24 10:01:53,896 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:01:53,896 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:01:53,925 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:01:53,942 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:01:53,942 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.017s]
2025-07-24 10:01:53,942 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:01:53,944 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:01:53,944 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.002s]
2025-07-24 10:01:53,948 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:01:53,948 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.004s]
2025-07-24 10:01:53,949 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:01:53,949 __main__ INFO: 文档数量: 0
2025-07-24 10:01:53,949 __main__ INFO: 索引大小: 227 bytes
2025-07-24 10:01:53,949 __main__ INFO: 缓存已清理
2025-07-24 10:01:53,949 __main__ INFO: ES索引Pipeline示例完成
2025-07-24 10:09:26,441 __main__ INFO: 开始ES索引Pipeline示例
2025-07-24 10:09:26,442 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:09:26,442 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:09:26,460 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:09:26,513 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:09:26,513 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.053s]
2025-07-24 10:09:26,513 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:09:26,516 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:09:26,516 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.003s]
2025-07-24 10:09:26,520 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:09:26,520 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.004s]
2025-07-24 10:09:26,520 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:09:26,520 __main__ INFO: 文档数量: 114
2025-07-24 10:09:26,521 __main__ INFO: 索引大小: 55996 bytes
2025-07-24 10:09:26,521 __main__ INFO: === 测试ES索引Pipeline ===
2025-07-24 10:09:26,521 __main__ INFO: 创建ES索引Pipeline...
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_index_pipeline
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_index_pipeline
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 创建组件: es_indexer (indexer.elasticsearch)
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> es_indexer
2025-07-24 10:09:26,521 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 10:09:26,521 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 10:09:26,521 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 10:09:26,521 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 10:09:26,627 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 10:09:26,627 rag.components.base DEBUG: 初始化组件: es_indexer
2025-07-24 10:09:26,643 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:09:26,675 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:09:26,675 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.032s]
2025-07-24 10:09:26,675 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:09:26,675 rag.pipeline.builder DEBUG: 初始化组件: es_indexer
2025-07-24 10:09:26,675 rag.pipeline.builder INFO: Pipeline构建完成: es_index_pipeline
2025-07-24 10:09:26,675 rag.pipeline.factory INFO: 成功创建Pipeline: es_index_pipeline
2025-07-24 10:09:26,676 __main__ INFO: Pipeline创建完成，组件列表: ['document_loader', 'text_splitter', 'es_indexer']
2025-07-24 10:09:26,676 __main__ INFO: 开始执行索引流程...
2025-07-24 10:09:26,676 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 10:09:26,676 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 10:09:26,676 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 10:09:26,678 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 10:09:26,679 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 10:09:26,679 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 10:09:26,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:09:26,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:09:26,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:09:26,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:09:26,680 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:09:26,681 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:09:26,682 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:09:26,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:09:26,683 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:09:26,683 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 10:09:26,684 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 10:09:26,684 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 10:09:26,684 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 10:09:26,684 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 10:09:26,943 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:09:26,944 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:09:26,944 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:09:26,944 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:09:26,944 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 10:09:26,944 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 10:09:26,945 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:09:26,945 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 10:09:26,945 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 10:09:26,945 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:09:26,947 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:09:26,947 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:09:26,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:09:26,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:09:26,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:09:26,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 10:09:26,948 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 10:09:26,949 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:09:26,952 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 10:09:26,953 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:09:26,953 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 10:09:26,953 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:09:26,953 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:09:26,953 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:09:26,955 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:09:26,955 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:09:26,956 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:09:26,956 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 10:09:26,956 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:09:26,956 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:09:26,956 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 10:09:26,956 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:09:26,957 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:09:26,957 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:09:26,957 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:09:26,957 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:09:26,957 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:09:26,958 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:09:26,958 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:09:26,958 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:09:26,958 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:09:26,958 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:09:26,959 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:09:26,959 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:09:26,959 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:09:26,959 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:09:26,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:09:26,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:09:26,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:09:26,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:09:26,960 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:09:26,961 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:09:26,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:09:26,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:09:26,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:09:26,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:09:26,962 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:09:26,963 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:09:26,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:09:26,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:09:26,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:09:26,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:09:26,964 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:09:26,965 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:09:26,966 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:09:26,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:09:26,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:09:26,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:09:26,967 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:09:26,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:09:26,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:09:26,968 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:09:26,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:09:26,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:09:26,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:09:26,969 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:09:26,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:09:26,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:09:26,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:09:26,970 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:09:26,971 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:09:26,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:09:26,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:09:26,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:09:26,972 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:09:26,972 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 10:09:26,972 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 10:09:26,972 rag.components.base DEBUG: 执行下一步组件: es_indexer
2025-07-24 10:09:26,972 rag.components.base DEBUG: 组件 es_indexer 开始处理数据
2025-07-24 10:09:26,977 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:09:26,977 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.005s]
2025-07-24 10:09:26,977 rag.components.base DEBUG: 索引 performance_docs 已存在
2025-07-24 10:09:27,053 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:09:27,053 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.073s]
2025-07-24 10:09:27,082 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:09:27,085 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.030s]
2025-07-24 10:09:27,115 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:09:27,119 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.033s]
2025-07-24 10:09:27,161 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /performance_docs/_refresh HTTP/1.1" 200 0
2025-07-24 10:09:27,161 elastic_transport.transport INFO: POST https://localhost:9200/performance_docs/_refresh [status:200 duration:0.042s]
2025-07-24 10:09:27,161 rag.components.base DEBUG: 成功索引 114 个文档到 performance_docs
2025-07-24 10:09:27,161 rag.components.base DEBUG: 组件 es_indexer 处理完成
2025-07-24 10:09:27,161 rag.components.base DEBUG: 组件 es_indexer 是终点组件，返回结果
2025-07-24 10:09:27,161 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 10:09:27,161 __main__ ERROR: 索引失败: 未知错误
2025-07-24 10:09:27,161 __main__ INFO: ES索引Pipeline测试完成
2025-07-24 10:09:27,161 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:09:27,161 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:09:27,180 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:09:27,194 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:09:27,194 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.015s]
2025-07-24 10:09:27,194 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:09:27,196 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:09:27,196 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.001s]
2025-07-24 10:09:27,199 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:09:27,199 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.003s]
2025-07-24 10:09:27,200 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:09:27,200 __main__ INFO: 文档数量: 114
2025-07-24 10:09:27,200 __main__ INFO: 索引大小: 182607 bytes
2025-07-24 10:09:27,200 __main__ INFO: 缓存已清理
2025-07-24 10:09:27,200 __main__ INFO: ES索引Pipeline示例完成
2025-07-24 10:24:50,142 __main__ INFO: 开始ES索引Pipeline示例
2025-07-24 10:24:50,142 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:24:50,142 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:24:50,161 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:24:50,305 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:24:50,305 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.144s]
2025-07-24 10:24:50,305 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:24:50,309 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:24:50,309 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.004s]
2025-07-24 10:24:50,315 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:24:50,315 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.006s]
2025-07-24 10:24:50,316 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:24:50,316 __main__ INFO: 文档数量: 114
2025-07-24 10:24:50,316 __main__ INFO: 索引大小: 85367 bytes
2025-07-24 10:24:50,316 __main__ INFO: === 测试ES索引Pipeline ===
2025-07-24 10:24:50,316 __main__ INFO: 创建ES索引Pipeline...
2025-07-24 10:24:50,316 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_index_pipeline
2025-07-24 10:24:50,316 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_index_pipeline
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 创建组件: es_indexer (indexer.elasticsearch)
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> es_indexer
2025-07-24 10:24:50,317 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 10:24:50,317 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 10:24:50,317 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 10:24:50,317 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 10:24:50,432 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 10:24:50,432 rag.components.base DEBUG: 初始化组件: es_indexer
2025-07-24 10:24:50,448 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:24:50,463 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:24:50,463 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.015s]
2025-07-24 10:24:50,463 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:24:50,463 rag.pipeline.builder DEBUG: 初始化组件: es_indexer
2025-07-24 10:24:50,463 rag.pipeline.builder INFO: Pipeline构建完成: es_index_pipeline
2025-07-24 10:24:50,464 rag.pipeline.factory INFO: 成功创建Pipeline: es_index_pipeline
2025-07-24 10:24:50,464 __main__ INFO: Pipeline创建完成，组件列表: ['document_loader', 'text_splitter', 'es_indexer']
2025-07-24 10:24:50,464 __main__ INFO: 开始执行索引流程...
2025-07-24 10:24:50,464 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 10:24:50,464 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 10:24:50,464 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 10:24:50,466 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 10:24:50,467 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 10:24:50,467 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:24:50,468 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:24:50,469 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:24:50,470 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:24:50,471 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 10:24:50,471 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 10:24:50,471 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 10:24:50,471 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 10:24:50,471 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 10:24:50,727 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:24:50,727 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:24:50,727 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:24:50,728 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:24:50,728 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 10:24:50,728 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 10:24:50,729 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:24:50,729 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 10:24:50,729 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 10:24:50,729 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:24:50,731 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:24:50,731 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:24:50,731 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:24:50,731 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:24:50,732 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:24:50,732 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 10:24:50,732 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 10:24:50,733 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:24:50,736 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 10:24:50,737 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:24:50,737 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 10:24:50,737 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:24:50,737 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:24:50,737 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:24:50,738 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:24:50,738 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:24:50,739 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:24:50,739 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 10:24:50,739 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:24:50,739 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:24:50,739 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 10:24:50,740 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:24:50,740 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:24:50,740 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:24:50,740 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:24:50,740 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:24:50,740 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:24:50,741 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:24:50,741 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:24:50,741 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:24:50,741 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:24:50,741 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:24:50,742 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:24:50,742 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:24:50,742 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:24:50,742 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:24:50,742 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:24:50,743 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:24:50,743 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:24:50,743 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:24:50,743 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:24:50,743 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:24:50,744 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:24:50,744 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:24:50,744 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:24:50,744 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:24:50,744 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:24:50,745 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:24:50,745 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:24:50,745 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:24:50,745 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:24:50,745 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:24:50,746 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:24:50,746 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:24:50,746 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:24:50,746 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:24:50,746 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:24:50,747 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:24:50,747 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:24:50,747 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:24:50,747 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:24:50,747 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:24:50,748 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:24:50,749 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:24:50,750 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:24:50,750 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:24:50,750 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:24:50,750 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:24:50,750 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:24:50,751 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:24:50,751 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:24:50,751 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:24:50,751 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:24:50,751 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:24:50,752 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:24:50,752 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:24:50,752 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:24:50,752 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:24:50,753 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:24:50,753 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:24:50,753 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:24:50,753 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:24:50,754 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:24:50,754 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:24:50,754 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:24:50,754 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:24:50,755 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:24:50,755 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:24:50,755 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:24:50,755 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:24:50,755 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 10:24:50,755 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 10:24:50,755 rag.components.base DEBUG: 执行下一步组件: es_indexer
2025-07-24 10:24:50,755 rag.components.base DEBUG: 组件 es_indexer 开始处理数据
2025-07-24 10:24:50,761 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:24:50,761 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.005s]
2025-07-24 10:24:50,761 rag.components.base DEBUG: 索引 performance_docs 已存在
2025-07-24 10:24:50,825 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:24:50,825 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.062s]
2025-07-24 10:24:50,856 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:24:50,859 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.032s]
2025-07-24 10:24:50,880 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:24:50,883 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.023s]
2025-07-24 10:24:50,929 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /performance_docs/_refresh HTTP/1.1" 200 0
2025-07-24 10:24:50,929 elastic_transport.transport INFO: POST https://localhost:9200/performance_docs/_refresh [status:200 duration:0.045s]
2025-07-24 10:24:50,929 rag.components.base DEBUG: 成功索引 114 个文档到 performance_docs
2025-07-24 10:24:50,929 rag.components.base DEBUG: 组件 es_indexer 处理完成
2025-07-24 10:24:50,929 rag.components.base DEBUG: 组件 es_indexer 是终点组件，返回结果
2025-07-24 10:24:50,929 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 10:24:50,929 __main__ INFO: 索引完成！索引了 114 个文档
2025-07-24 10:24:50,929 __main__ INFO: 索引详情: {'component': 'es_indexer', 'indexer_type': 'ESIndexerComponent'}
2025-07-24 10:24:50,929 __main__ INFO: ES索引Pipeline测试完成
2025-07-24 10:24:50,929 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:24:50,929 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:24:50,953 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:24:50,968 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:24:50,968 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.015s]
2025-07-24 10:24:50,968 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:24:50,973 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:24:50,973 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.005s]
2025-07-24 10:24:50,976 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:24:50,976 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.003s]
2025-07-24 10:24:50,976 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:24:50,976 __main__ INFO: 文档数量: 114
2025-07-24 10:24:50,976 __main__ INFO: 索引大小: 90990 bytes
2025-07-24 10:24:50,976 __main__ INFO: 缓存已清理
2025-07-24 10:24:50,976 __main__ INFO: ES索引Pipeline示例完成
2025-07-24 10:26:54,773 __main__ INFO: 开始ES索引Pipeline示例
2025-07-24 10:26:54,773 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:26:54,773 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:26:54,792 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:26:54,828 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:26:54,829 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.036s]
2025-07-24 10:26:54,829 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:26:54,831 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:26:54,831 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.002s]
2025-07-24 10:26:54,834 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:26:54,834 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.003s]
2025-07-24 10:26:54,835 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:26:54,835 __main__ INFO: 文档数量: 114
2025-07-24 10:26:54,835 __main__ INFO: 索引大小: 90990 bytes
2025-07-24 10:26:54,835 __main__ INFO: === 测试ES索引Pipeline ===
2025-07-24 10:26:54,835 __main__ INFO: 创建ES索引Pipeline...
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 成功加载Pipeline配置: es_index_pipeline
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: Pipeline配置验证通过: es_index_pipeline
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 创建组件: document_loader (loader.file)
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 创建组件: text_splitter (splitter.hierarchical)
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 创建组件: es_indexer (indexer.elasticsearch)
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 连接组件: document_loader -> text_splitter
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 连接组件: text_splitter -> es_indexer
2025-07-24 10:26:54,835 rag.components.loader.file_loader DEBUG: 初始化组件: document_loader
2025-07-24 10:26:54,835 rag.pipeline.builder DEBUG: 初始化组件: document_loader
2025-07-24 10:26:54,835 rag.components.base DEBUG: 初始化组件: text_splitter
2025-07-24 10:26:54,835 rag.components.base DEBUG: 初始化 HierarchicalSplitter，chunk_sizes: [512, 256]
2025-07-24 10:26:54,938 rag.pipeline.builder DEBUG: 初始化组件: text_splitter
2025-07-24 10:26:54,938 rag.components.base DEBUG: 初始化组件: es_indexer
2025-07-24 10:26:54,955 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:26:54,982 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:26:54,982 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.028s]
2025-07-24 10:26:54,982 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:26:54,982 rag.pipeline.builder DEBUG: 初始化组件: es_indexer
2025-07-24 10:26:54,982 rag.pipeline.builder INFO: Pipeline构建完成: es_index_pipeline
2025-07-24 10:26:54,982 rag.pipeline.factory INFO: 成功创建Pipeline: es_index_pipeline
2025-07-24 10:26:54,983 __main__ INFO: Pipeline创建完成，组件列表: ['document_loader', 'text_splitter', 'es_indexer']
2025-07-24 10:26:54,983 __main__ INFO: 开始执行索引流程...
2025-07-24 10:26:54,983 rag.pipeline.executor DEBUG: 开始执行Pipeline，入口点: document_loader
2025-07-24 10:26:54,983 rag.components.loader.file_loader DEBUG: 组件 document_loader 开始处理数据
2025-07-24 10:26:54,983 rag.components.loader.file_loader INFO: 从./test_cases/test_data加载文件中...
2025-07-24 10:26:54,985 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/semantic_splitter_data.txt
2025-07-24 10:26:54,986 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/text_splitter_data.txt
2025-07-24 10:26:54,986 fsspec.local DEBUG: open file: /Users/caixiaomeng/Projects/Python/PerformanceRag/test_cases/test_data/mixed_language_data.txt
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:26:54,987 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:26:54,988 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:26:54,989 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:26:54,990 rag.components.loader.file_loader INFO: 成功加载42个文档
2025-07-24 10:26:54,990 rag.components.loader.file_loader DEBUG: 组件 document_loader 处理完成
2025-07-24 10:26:54,990 rag.components.loader.file_loader DEBUG: 执行下一步组件: text_splitter
2025-07-24 10:26:54,990 rag.components.base DEBUG: 组件 text_splitter 开始处理数据
2025-07-24 10:26:54,990 rag.components.base DEBUG: 开始分割 42 个文档
2025-07-24 10:26:55,243 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:26:55,243 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:26:55,243 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 人工智能在软件开发中的应用

人工智能技术正在深刻改变软件开发的方式。从代码生成到测试自动化，...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 深度学习在代码生成中的作用
深度学习模型，特别是基于Transformer的架构，已经能够生成...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 智能测试和调试工具
AI驱动的测试工具能够自动生成测试用例，识别边界条件和异常情况。这些工具使...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在调试过程中，AI系统能够分析错误日志和性能数据，快速定位问题的根本原因。

代码审查和质量保...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 通过分析历史数据，AI系统能够识别影响构建成功的因素，并提供相应的优化建议。

项目管理中的A...
2025-07-24 10:26:55,244 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 开发者需要适应这种变化，学习如何与AI工具协作，发挥人机协作的最大潜力。

结论
人工智能正在...
2025-07-24 10:26:55,245 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 从代码生成到项目管理，AI技术为开发者提供了前所未有的工具和能力。然而，AI并不是要替代开发者...
2025-07-24 10:26:55,247 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:26:55,247 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:26:55,247 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:26:55,247 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:26:55,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Linux性能分析工具Perf简介

介绍
Perf是一个基于Linux 2.6 +系统的分析...
2025-07-24 10:26:55,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: data (created by perf record) and display annot...
2025-07-24 10:26:55,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 硬件事件
PMU硬件事件取决与特定的CPU，由CPU供应商提供文档。如果将Perf工具与lib...
2025-07-24 10:26:55,248 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 如果将Perf工具与libpfm4库链接，则可以提供事件的一些简短描述。有关Intel和AMD...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 缓存事件包括：
L1-dcache-loads                        ...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
L1-icache-loads         ...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
LLC-load-misses         ...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
dTLB-load-misses        ...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: [Hardware cache event]
iTLB-loads              ...
2025-07-24 10:26:55,252 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: cache event]

使用模式
Perf支持多种使用模式，包括per-thread、pe...
2025-07-24 10:26:55,253 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 计数和采样在每个CPU上合计。

性能分析示例
以下是一个使用perf进行性能分析的示例：

...
2025-07-24 10:26:55,253 rag.components.splitter.splitter_utils WARNING: 发现3个超过最大chunk_size的节点
2025-07-24 10:26:55,253 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:26:55,253 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:26:55,253 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:26:55,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:26:55,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:26:55,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Multi-language Performance Analysis Guide
多语言性能...
2025-07-24 10:26:55,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: Perf是Linux性能分析的主要工具。
Top provides real-time sys...
2025-07-24 10:26:55,254 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:26:55,255 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: 在优化之前进行性能分析。
Focus on the biggest bottlenecks f...
2025-07-24 10:26:55,255 rag.components.splitter.splitter_utils WARNING: 发现1个超过最大chunk_size的节点
2025-07-24 10:26:55,255 rag.components.splitter.splitter_utils INFO: 使用text分割器进行一级退化分割
2025-07-24 10:26:55,255 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:26:55,255 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: # Linux性能分析工具Perf完整指南
2025-07-24 10:26:55,255 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:26:55,256 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 1. 概述
2025-07-24 10:26:55,256 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:26:55,256 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.1 什么是Perf
Perf是一个基于Linux 2.6+系统的分析工具，它抽象了...
2025-07-24 10:26:55,256 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:26:55,256 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 1.2 主要特性
- 硬件事件监控
- 软件事件分析
- 缓存性能测量
- 系统调用跟...
2025-07-24 10:26:55,257 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:26:55,257 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 2. 安装和配置
2025-07-24 10:26:55,257 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:26:55,257 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.1 系统要求
- Linux内核版本 2.6.31+
- 支持perf_event...
2025-07-24 10:26:55,257 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:26:55,258 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 2.2 安装方法
```bash
# Ubuntu/Debian
sudo apt-g...
2025-07-24 10:26:55,258 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:26:55,258 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 3. 基本命令
2025-07-24 10:26:55,258 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:26:55,258 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.1 perf stat
收集性能计数器统计信息。

**基本用法：**
```ba...
2025-07-24 10:26:55,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:26:55,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.2 perf record
记录性能数据到文件。

**基本用法：**
```ba...
2025-07-24 10:26:55,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:26:55,259 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 3.3 perf report
分析记录的性能数据。

**基本用法：**
```ba...
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 4. 高级功能
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.1 事件类型
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:26:55,260 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 硬件事件
- CPU周期
- 指令数
- 缓存命中/未命中
- 分支预测
2025-07-24 10:26:55,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:26:55,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 软件事件
- 页面错误
- 上下文切换
- CPU迁移
- 系统调用
2025-07-24 10:26:55,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:26:55,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 4.2 分析模式
2025-07-24 10:26:55,261 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### CPU分析
```bash
perf top -e cycles
```
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 内存分析
```bash
perf mem record
perf mem repo...
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 锁分析
```bash
perf lock record
perf lock rep...
2025-07-24 10:26:55,262 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:26:55,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 5. 实际应用场景
2025-07-24 10:26:55,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:26:55,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.1 应用程序性能分析
```bash
# 分析特定程序
perf record -...
2025-07-24 10:26:55,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:26:55,263 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.2 系统级性能分析
```bash
# 系统范围监控
perf stat -a s...
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 5.3 内核性能分析
```bash
# 内核函数分析
perf record -g ...
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 6. 最佳实践
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:26:55,264 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.1 性能分析流程
1. **确定目标**：明确要分析的性能问题
2. **选择工具...
2025-07-24 10:26:55,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:26:55,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 6.2 常见问题解决
2025-07-24 10:26:55,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:26:55,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 权限问题
```bash
# 设置perf权限
echo -1 > /proc/sy...
2025-07-24 10:26:55,265 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 采样频率调整
```bash
# 调整采样频率
perf record -F 100...
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: #### 数据文件管理
```bash
# 压缩数据文件
perf archive

# 查看...
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 7. 与其他工具集成
2025-07-24 10:26:55,266 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:26:55,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.1 与gdb集成
```bash
perf record -g --call-gr...
2025-07-24 10:26:55,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:26:55,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.2 与火焰图集成
```bash
# 生成火焰图
perf script | st...
2025-07-24 10:26:55,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:26:55,267 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 7.3 与Python脚本集成
```python
import subprocess...
2025-07-24 10:26:55,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:26:55,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 8. 故障排除
2025-07-24 10:26:55,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:26:55,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.1 常见错误
- **权限不足**：检查perf_event_paranoid设置...
2025-07-24 10:26:55,268 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:26:55,269 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 8.2 调试技巧
```bash
# 查看可用事件
perf list

# 检查pe...
2025-07-24 10:26:55,269 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:26:55,269 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ## 9. 总结

Perf是一个强大的Linux性能分析工具，提供了从硬件到软件的全方位性能...
2025-07-24 10:26:55,269 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:26:55,269 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.1 关键要点
- 选择合适的分析模式
- 正确配置权限和参数
- 结合其他工具使用...
2025-07-24 10:26:55,270 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:26:55,270 llama_index.core.node_parser.node_utils DEBUG: > Adding chunk: ### 9.2 进一步学习
- 阅读perf官方文档
- 参与Linux内核社区
- 实践各种...
2025-07-24 10:26:55,270 rag.components.base DEBUG: 分割完成，生成 114 个文档块
2025-07-24 10:26:55,270 rag.components.base DEBUG: 组件 text_splitter 处理完成
2025-07-24 10:26:55,270 rag.components.base DEBUG: 执行下一步组件: es_indexer
2025-07-24 10:26:55,270 rag.components.base DEBUG: 组件 es_indexer 开始处理数据
2025-07-24 10:26:55,275 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:26:55,275 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.005s]
2025-07-24 10:26:55,275 rag.components.base DEBUG: 索引 performance_docs 已存在
2025-07-24 10:26:55,340 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:26:55,340 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.061s]
2025-07-24 10:26:55,363 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:26:55,364 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.022s]
2025-07-24 10:26:55,385 urllib3.connectionpool DEBUG: https://localhost:9200 "PUT /_bulk HTTP/1.1" 200 None
2025-07-24 10:26:55,387 elastic_transport.transport INFO: PUT https://localhost:9200/_bulk [status:200 duration:0.023s]
2025-07-24 10:26:55,429 urllib3.connectionpool DEBUG: https://localhost:9200 "POST /performance_docs/_refresh HTTP/1.1" 200 0
2025-07-24 10:26:55,429 elastic_transport.transport INFO: POST https://localhost:9200/performance_docs/_refresh [status:200 duration:0.042s]
2025-07-24 10:26:55,430 rag.components.base DEBUG: 成功索引 114 个文档到 performance_docs
2025-07-24 10:26:55,430 rag.components.base DEBUG: 组件 es_indexer 处理完成
2025-07-24 10:26:55,430 rag.components.base DEBUG: 组件 es_indexer 是终点组件，返回结果
2025-07-24 10:26:55,430 rag.pipeline.executor DEBUG: Pipeline执行完成
2025-07-24 10:26:55,430 __main__ INFO: 索引完成！索引了 114 个文档
2025-07-24 10:26:55,430 __main__ INFO: 索引详情: {'component': 'es_indexer', 'indexer_type': 'ESIndexerComponent'}
2025-07-24 10:26:55,430 __main__ INFO: ES索引Pipeline测试完成
2025-07-24 10:26:55,430 __main__ INFO: === 检查索引状态 ===
2025-07-24 10:26:55,430 rag.components.base DEBUG: 初始化组件: status_checker
2025-07-24 10:26:55,448 urllib3.connectionpool DEBUG: Starting new HTTPS connection (1): localhost:9200
2025-07-24 10:26:55,462 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD / HTTP/1.1" 200 0
2025-07-24 10:26:55,463 elastic_transport.transport INFO: HEAD https://localhost:9200/ [status:200 duration:0.015s]
2025-07-24 10:26:55,463 rag.components.base DEBUG: 成功连接到Elasticsearch: localhost:9200
2025-07-24 10:26:55,464 urllib3.connectionpool DEBUG: https://localhost:9200 "HEAD /performance_docs HTTP/1.1" 200 0
2025-07-24 10:26:55,464 elastic_transport.transport INFO: HEAD https://localhost:9200/performance_docs [status:200 duration:0.001s]
2025-07-24 10:26:55,466 urllib3.connectionpool DEBUG: https://localhost:9200 "GET /performance_docs/_stats HTTP/1.1" 200 None
2025-07-24 10:26:55,466 elastic_transport.transport INFO: GET https://localhost:9200/performance_docs/_stats [status:200 duration:0.002s]
2025-07-24 10:26:55,467 __main__ INFO: 索引 performance_docs 存在
2025-07-24 10:26:55,467 __main__ INFO: 文档数量: 114
2025-07-24 10:26:55,467 __main__ INFO: 索引大小: 91038 bytes
2025-07-24 10:26:55,467 __main__ INFO: 缓存已清理
2025-07-24 10:26:55,467 __main__ INFO: ES索引Pipeline示例完成
